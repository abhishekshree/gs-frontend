{"ast":null,"code":"'use strict';\n\n/**\n * Local dependencies\n */\nvar compilers = require('./lib/compilers');\nvar parsers = require('./lib/parsers');\n\n/**\n * Module dependencies\n */\n\nvar debug = require('debug')('expand-brackets');\nvar extend = require('extend-shallow');\nvar Snapdragon = require('snapdragon');\nvar toRegex = require('to-regex');\n\n/**\n * Parses the given POSIX character class `pattern` and returns a\n * string that can be used for creating regular expressions for matching.\n *\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\nfunction brackets(pattern, options) {\n  debug('initializing from <%s>', __filename);\n  var res = brackets.create(pattern, options);\n  return res.output;\n}\n\n/**\n * Takes an array of strings and a POSIX character class pattern, and returns a new\n * array with only the strings that matched the pattern.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));\n * //=> ['a']\n *\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));\n * //=> ['a', 'ab']\n * ```\n * @param {Array} `arr` Array of strings to match\n * @param {String} `pattern` POSIX character class pattern(s)\n * @param {Object} `options`\n * @return {Array}\n * @api public\n */\n\nbrackets.match = function (arr, pattern, options) {\n  arr = [].concat(arr);\n  var opts = extend({}, options);\n  var isMatch = brackets.matcher(pattern, opts);\n  var len = arr.length;\n  var idx = -1;\n  var res = [];\n  while (++idx < len) {\n    var ele = arr[idx];\n    if (isMatch(ele)) {\n      res.push(ele);\n    }\n  }\n  if (res.length === 0) {\n    if (opts.failglob === true) {\n      throw new Error('no matches found for \"' + pattern + '\"');\n    }\n    if (opts.nonull === true || opts.nullglob === true) {\n      return [pattern.split('\\\\').join('')];\n    }\n  }\n  return res;\n};\n\n/**\n * Returns true if the specified `string` matches the given\n * brackets `pattern`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n *\n * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));\n * //=> true\n * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));\n * //=> false\n * ```\n * @param {String} `string` String to match\n * @param {String} `pattern` Poxis pattern\n * @param {String} `options`\n * @return {Boolean}\n * @api public\n */\n\nbrackets.isMatch = function (str, pattern, options) {\n  return brackets.matcher(pattern, options)(str);\n};\n\n/**\n * Takes a POSIX character class pattern and returns a matcher function. The returned\n * function takes the string to match as its only argument.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * var isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');\n *\n * console.log(isMatch('a.a'));\n * //=> false\n * console.log(isMatch('a.A'));\n * //=> true\n * ```\n * @param {String} `pattern` Poxis pattern\n * @param {String} `options`\n * @return {Boolean}\n * @api public\n */\n\nbrackets.matcher = function (pattern, options) {\n  var re = brackets.makeRe(pattern, options);\n  return function (str) {\n    return re.test(str);\n  };\n};\n\n/**\n * Create a regular expression from the given `pattern`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * var re = brackets.makeRe('[[:alpha:]]');\n * console.log(re);\n * //=> /^(?:[a-zA-Z])$/\n * ```\n * @param {String} `pattern` The pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\nbrackets.makeRe = function (pattern, options) {\n  var res = brackets.create(pattern, options);\n  var opts = extend({\n    strictErrors: false\n  }, options);\n  return toRegex(res.output, opts);\n};\n\n/**\n * Parses the given POSIX character class `pattern` and returns an object\n * with the compiled `output` and optional source `map`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * console.log(brackets('[[:alpha:]]'));\n * // { options: { source: 'string' },\n * //   input: '[[:alpha:]]',\n * //   state: {},\n * //   compilers:\n * //    { eos: [Function],\n * //      noop: [Function],\n * //      bos: [Function],\n * //      not: [Function],\n * //      escape: [Function],\n * //      text: [Function],\n * //      posix: [Function],\n * //      bracket: [Function],\n * //      'bracket.open': [Function],\n * //      'bracket.inner': [Function],\n * //      'bracket.literal': [Function],\n * //      'bracket.close': [Function] },\n * //   output: '[a-zA-Z]',\n * //   ast:\n * //    { type: 'root',\n * //      errors: [],\n * //      nodes: [ [Object], [Object], [Object] ] },\n * //   parsingErrors: [] }\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\nbrackets.create = function (pattern, options) {\n  var snapdragon = options && options.snapdragon || new Snapdragon(options);\n  compilers(snapdragon);\n  parsers(snapdragon);\n  var ast = snapdragon.parse(pattern, options);\n  ast.input = pattern;\n  var res = snapdragon.compile(ast, options);\n  res.input = pattern;\n  return res;\n};\n\n/**\n * Expose `brackets` constructor, parsers and compilers\n */\n\nbrackets.compilers = compilers;\nbrackets.parsers = parsers;\n\n/**\n * Expose `brackets`\n * @type {Function}\n */\n\nmodule.exports = brackets;","map":{"version":3,"names":["compilers","require","parsers","debug","extend","Snapdragon","toRegex","brackets","pattern","options","__filename","res","create","output","match","arr","concat","opts","isMatch","matcher","len","length","idx","ele","push","failglob","Error","nonull","nullglob","split","join","str","re","makeRe","test","strictErrors","snapdragon","ast","parse","input","compile","module","exports"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/expand-brackets/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Local dependencies\n */\n\nvar compilers = require('./lib/compilers');\nvar parsers = require('./lib/parsers');\n\n/**\n * Module dependencies\n */\n\nvar debug = require('debug')('expand-brackets');\nvar extend = require('extend-shallow');\nvar Snapdragon = require('snapdragon');\nvar toRegex = require('to-regex');\n\n/**\n * Parses the given POSIX character class `pattern` and returns a\n * string that can be used for creating regular expressions for matching.\n *\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\nfunction brackets(pattern, options) {\n  debug('initializing from <%s>', __filename);\n  var res = brackets.create(pattern, options);\n  return res.output;\n}\n\n/**\n * Takes an array of strings and a POSIX character class pattern, and returns a new\n * array with only the strings that matched the pattern.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]'));\n * //=> ['a']\n *\n * console.log(brackets.match(['1', 'a', 'ab'], '[[:alpha:]]+'));\n * //=> ['a', 'ab']\n * ```\n * @param {Array} `arr` Array of strings to match\n * @param {String} `pattern` POSIX character class pattern(s)\n * @param {Object} `options`\n * @return {Array}\n * @api public\n */\n\nbrackets.match = function(arr, pattern, options) {\n  arr = [].concat(arr);\n  var opts = extend({}, options);\n  var isMatch = brackets.matcher(pattern, opts);\n  var len = arr.length;\n  var idx = -1;\n  var res = [];\n\n  while (++idx < len) {\n    var ele = arr[idx];\n    if (isMatch(ele)) {\n      res.push(ele);\n    }\n  }\n\n  if (res.length === 0) {\n    if (opts.failglob === true) {\n      throw new Error('no matches found for \"' + pattern + '\"');\n    }\n\n    if (opts.nonull === true || opts.nullglob === true) {\n      return [pattern.split('\\\\').join('')];\n    }\n  }\n  return res;\n};\n\n/**\n * Returns true if the specified `string` matches the given\n * brackets `pattern`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n *\n * console.log(brackets.isMatch('a.a', '[[:alpha:]].[[:alpha:]]'));\n * //=> true\n * console.log(brackets.isMatch('1.2', '[[:alpha:]].[[:alpha:]]'));\n * //=> false\n * ```\n * @param {String} `string` String to match\n * @param {String} `pattern` Poxis pattern\n * @param {String} `options`\n * @return {Boolean}\n * @api public\n */\n\nbrackets.isMatch = function(str, pattern, options) {\n  return brackets.matcher(pattern, options)(str);\n};\n\n/**\n * Takes a POSIX character class pattern and returns a matcher function. The returned\n * function takes the string to match as its only argument.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * var isMatch = brackets.matcher('[[:lower:]].[[:upper:]]');\n *\n * console.log(isMatch('a.a'));\n * //=> false\n * console.log(isMatch('a.A'));\n * //=> true\n * ```\n * @param {String} `pattern` Poxis pattern\n * @param {String} `options`\n * @return {Boolean}\n * @api public\n */\n\nbrackets.matcher = function(pattern, options) {\n  var re = brackets.makeRe(pattern, options);\n  return function(str) {\n    return re.test(str);\n  };\n};\n\n/**\n * Create a regular expression from the given `pattern`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * var re = brackets.makeRe('[[:alpha:]]');\n * console.log(re);\n * //=> /^(?:[a-zA-Z])$/\n * ```\n * @param {String} `pattern` The pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\nbrackets.makeRe = function(pattern, options) {\n  var res = brackets.create(pattern, options);\n  var opts = extend({strictErrors: false}, options);\n  return toRegex(res.output, opts);\n};\n\n/**\n * Parses the given POSIX character class `pattern` and returns an object\n * with the compiled `output` and optional source `map`.\n *\n * ```js\n * var brackets = require('expand-brackets');\n * console.log(brackets('[[:alpha:]]'));\n * // { options: { source: 'string' },\n * //   input: '[[:alpha:]]',\n * //   state: {},\n * //   compilers:\n * //    { eos: [Function],\n * //      noop: [Function],\n * //      bos: [Function],\n * //      not: [Function],\n * //      escape: [Function],\n * //      text: [Function],\n * //      posix: [Function],\n * //      bracket: [Function],\n * //      'bracket.open': [Function],\n * //      'bracket.inner': [Function],\n * //      'bracket.literal': [Function],\n * //      'bracket.close': [Function] },\n * //   output: '[a-zA-Z]',\n * //   ast:\n * //    { type: 'root',\n * //      errors: [],\n * //      nodes: [ [Object], [Object], [Object] ] },\n * //   parsingErrors: [] }\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\nbrackets.create = function(pattern, options) {\n  var snapdragon = (options && options.snapdragon) || new Snapdragon(options);\n  compilers(snapdragon);\n  parsers(snapdragon);\n\n  var ast = snapdragon.parse(pattern, options);\n  ast.input = pattern;\n  var res = snapdragon.compile(ast, options);\n  res.input = pattern;\n  return res;\n};\n\n/**\n * Expose `brackets` constructor, parsers and compilers\n */\n\nbrackets.compilers = compilers;\nbrackets.parsers = parsers;\n\n/**\n * Expose `brackets`\n * @type {Function}\n */\n\nmodule.exports = brackets;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}