{"ast":null,"code":"'use strict';\n\nvar os = require('os');\nvar path = require('path');\nvar fo = require('../../file-operations');\nvar isWindows = os.platform() === 'win32';\nfunction writeSymbolicLink(file, optResolver, onWritten) {\n  if (!file.symlink) {\n    return onWritten(new Error('Missing symlink property on symbolic vinyl'));\n  }\n  var isRelative = optResolver.resolve('relativeSymlinks', file);\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file)\n  });\n  if (!isWindows) {\n    // On non-Windows, just use 'file'\n    return createLinkWithType('file');\n  }\n  fo.reflectStat(file.symlink, file, onReflect);\n  function onReflect(statErr) {\n    if (statErr && statErr.code !== 'ENOENT') {\n      return onWritten(statErr);\n    }\n\n    // This option provides a way to create a Junction instead of a\n    // Directory symlink on Windows. This comes with the following caveats:\n    // * NTFS Junctions cannot be relative.\n    // * NTFS Junctions MUST be directories.\n    // * NTFS Junctions must be on the same file system.\n    // * Most products CANNOT detect a directory is a Junction:\n    //    This has the side effect of possibly having a whole directory\n    //    deleted when a product is deleting the Junction directory.\n    //    For example, JetBrains product lines will delete the entire contents\n    //    of the TARGET directory because the product does not realize it's\n    //    a symlink as the JVM and Node return false for isSymlink.\n\n    // This function is Windows only, so we don't need to check again\n    var useJunctions = optResolver.resolve('useJunctions', file);\n    var dirType = useJunctions ? 'junction' : 'dir';\n    // Dangling links are always 'file'\n    var type = !statErr && file.isDirectory() ? dirType : 'file';\n    createLinkWithType(type);\n  }\n  function createLinkWithType(type) {\n    // This is done after prepare() to use the adjusted file.base property\n    if (isRelative && type !== 'junction') {\n      file.symlink = path.relative(file.base, file.symlink);\n    }\n    var opts = {\n      flags: flags,\n      type: type\n    };\n    fo.symlink(file.symlink, file.path, opts, onSymlink);\n    function onSymlink(symlinkErr) {\n      if (symlinkErr) {\n        return onWritten(symlinkErr);\n      }\n      fo.reflectLinkStat(file.path, file, onWritten);\n    }\n  }\n}\nmodule.exports = writeSymbolicLink;","map":{"version":3,"names":["os","require","path","fo","isWindows","platform","writeSymbolicLink","file","optResolver","onWritten","symlink","Error","isRelative","resolve","flags","getFlags","overwrite","append","createLinkWithType","reflectStat","onReflect","statErr","code","useJunctions","dirType","type","isDirectory","relative","base","opts","onSymlink","symlinkErr","reflectLinkStat","module","exports"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/vinyl-fs/lib/dest/write-contents/write-symbolic-link.js"],"sourcesContent":["'use strict';\n\nvar os = require('os');\nvar path = require('path');\n\nvar fo = require('../../file-operations');\n\nvar isWindows = (os.platform() === 'win32');\n\nfunction writeSymbolicLink(file, optResolver, onWritten) {\n  if (!file.symlink) {\n    return onWritten(new Error('Missing symlink property on symbolic vinyl'));\n  }\n\n  var isRelative = optResolver.resolve('relativeSymlinks', file);\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file),\n  });\n\n  if (!isWindows) {\n    // On non-Windows, just use 'file'\n    return createLinkWithType('file');\n  }\n\n  fo.reflectStat(file.symlink, file, onReflect);\n\n  function onReflect(statErr) {\n    if (statErr && statErr.code !== 'ENOENT') {\n      return onWritten(statErr);\n    }\n\n    // This option provides a way to create a Junction instead of a\n    // Directory symlink on Windows. This comes with the following caveats:\n    // * NTFS Junctions cannot be relative.\n    // * NTFS Junctions MUST be directories.\n    // * NTFS Junctions must be on the same file system.\n    // * Most products CANNOT detect a directory is a Junction:\n    //    This has the side effect of possibly having a whole directory\n    //    deleted when a product is deleting the Junction directory.\n    //    For example, JetBrains product lines will delete the entire contents\n    //    of the TARGET directory because the product does not realize it's\n    //    a symlink as the JVM and Node return false for isSymlink.\n\n    // This function is Windows only, so we don't need to check again\n    var useJunctions = optResolver.resolve('useJunctions', file);\n\n    var dirType = useJunctions ? 'junction' : 'dir';\n    // Dangling links are always 'file'\n    var type = !statErr && file.isDirectory() ? dirType : 'file';\n\n    createLinkWithType(type);\n  }\n\n  function createLinkWithType(type) {\n    // This is done after prepare() to use the adjusted file.base property\n    if (isRelative && type !== 'junction') {\n      file.symlink = path.relative(file.base, file.symlink);\n    }\n\n    var opts = {\n      flags: flags,\n      type: type,\n    };\n    fo.symlink(file.symlink, file.path, opts, onSymlink);\n\n    function onSymlink(symlinkErr) {\n      if (symlinkErr) {\n        return onWritten(symlinkErr);\n      }\n\n      fo.reflectLinkStat(file.path, file, onWritten);\n    }\n  }\n}\n\nmodule.exports = writeSymbolicLink;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAIE,EAAE,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AAEzC,IAAIG,SAAS,GAAIJ,EAAE,CAACK,QAAQ,EAAE,KAAK,OAAQ;AAE3C,SAASC,iBAAiB,CAACC,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAE;EACvD,IAAI,CAACF,IAAI,CAACG,OAAO,EAAE;IACjB,OAAOD,SAAS,CAAC,IAAIE,KAAK,CAAC,4CAA4C,CAAC,CAAC;EAC3E;EAEA,IAAIC,UAAU,GAAGJ,WAAW,CAACK,OAAO,CAAC,kBAAkB,EAAEN,IAAI,CAAC;EAC9D,IAAIO,KAAK,GAAGX,EAAE,CAACY,QAAQ,CAAC;IACtBC,SAAS,EAAER,WAAW,CAACK,OAAO,CAAC,WAAW,EAAEN,IAAI,CAAC;IACjDU,MAAM,EAAET,WAAW,CAACK,OAAO,CAAC,QAAQ,EAAEN,IAAI;EAC5C,CAAC,CAAC;EAEF,IAAI,CAACH,SAAS,EAAE;IACd;IACA,OAAOc,kBAAkB,CAAC,MAAM,CAAC;EACnC;EAEAf,EAAE,CAACgB,WAAW,CAACZ,IAAI,CAACG,OAAO,EAAEH,IAAI,EAAEa,SAAS,CAAC;EAE7C,SAASA,SAAS,CAACC,OAAO,EAAE;IAC1B,IAAIA,OAAO,IAAIA,OAAO,CAACC,IAAI,KAAK,QAAQ,EAAE;MACxC,OAAOb,SAAS,CAACY,OAAO,CAAC;IAC3B;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,IAAIE,YAAY,GAAGf,WAAW,CAACK,OAAO,CAAC,cAAc,EAAEN,IAAI,CAAC;IAE5D,IAAIiB,OAAO,GAAGD,YAAY,GAAG,UAAU,GAAG,KAAK;IAC/C;IACA,IAAIE,IAAI,GAAG,CAACJ,OAAO,IAAId,IAAI,CAACmB,WAAW,EAAE,GAAGF,OAAO,GAAG,MAAM;IAE5DN,kBAAkB,CAACO,IAAI,CAAC;EAC1B;EAEA,SAASP,kBAAkB,CAACO,IAAI,EAAE;IAChC;IACA,IAAIb,UAAU,IAAIa,IAAI,KAAK,UAAU,EAAE;MACrClB,IAAI,CAACG,OAAO,GAAGR,IAAI,CAACyB,QAAQ,CAACpB,IAAI,CAACqB,IAAI,EAAErB,IAAI,CAACG,OAAO,CAAC;IACvD;IAEA,IAAImB,IAAI,GAAG;MACTf,KAAK,EAAEA,KAAK;MACZW,IAAI,EAAEA;IACR,CAAC;IACDtB,EAAE,CAACO,OAAO,CAACH,IAAI,CAACG,OAAO,EAAEH,IAAI,CAACL,IAAI,EAAE2B,IAAI,EAAEC,SAAS,CAAC;IAEpD,SAASA,SAAS,CAACC,UAAU,EAAE;MAC7B,IAAIA,UAAU,EAAE;QACd,OAAOtB,SAAS,CAACsB,UAAU,CAAC;MAC9B;MAEA5B,EAAE,CAAC6B,eAAe,CAACzB,IAAI,CAACL,IAAI,EAAEK,IAAI,EAAEE,SAAS,CAAC;IAChD;EACF;AACF;AAEAwB,MAAM,CAACC,OAAO,GAAG5B,iBAAiB"},"metadata":{},"sourceType":"script"}