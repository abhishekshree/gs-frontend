{"ast":null,"code":"/*!\n * static-extend <https://github.com/jonschlinkert/static-extend>\n *\n * Copyright (c) 2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar copy = require('object-copy');\nvar define = require('define-property');\nvar util = require('util');\n\n/**\n * Returns a function for extending the static properties,\n * prototype properties, and descriptors from the `Parent`\n * constructor onto `Child` constructors.\n *\n * ```js\n * var extend = require('static-extend');\n * Parent.extend = extend(Parent);\n *\n * // optionally pass a custom merge function as the second arg\n * Parent.extend = extend(Parent, function(Child) {\n *   Child.prototype.mixin = function(key, val) {\n *     Child.prototype[key] = val;\n *   };\n * });\n *\n * // extend \"child\" constructors\n * Parent.extend(Child);\n *\n * // optionally define prototype methods as the second arg\n * Parent.extend(Child, {\n *   foo: function() {},\n *   bar: function() {}\n * });\n * ```\n * @param {Function} `Parent` Parent ctor\n * @param {Function} `extendFn` Optional extend function for handling any necessary custom merging. Useful when updating methods that require a specific prototype.\n *   @param {Function} `Child` Child ctor\n *   @param {Object} `proto` Optionally pass additional prototype properties to inherit.\n *   @return {Object}\n * @api public\n */\n\nfunction extend(Parent, extendFn) {\n  if (typeof Parent !== 'function') {\n    throw new TypeError('expected Parent to be a function.');\n  }\n  return function (Ctor, proto) {\n    if (typeof Ctor !== 'function') {\n      throw new TypeError('expected Ctor to be a function.');\n    }\n    util.inherits(Ctor, Parent);\n    copy(Ctor, Parent);\n\n    // proto can be null or a plain object\n    if (typeof proto === 'object') {\n      var obj = Object.create(proto);\n      for (var k in obj) {\n        Ctor.prototype[k] = obj[k];\n      }\n    }\n\n    // keep a reference to the parent prototype\n    define(Ctor.prototype, '_parent_', {\n      configurable: true,\n      set: function () {},\n      get: function () {\n        return Parent.prototype;\n      }\n    });\n    if (typeof extendFn === 'function') {\n      extendFn(Ctor, Parent);\n    }\n    Ctor.extend = extend(Ctor, extendFn);\n  };\n}\n;\n\n/**\n * Expose `extend`\n */\n\nmodule.exports = extend;","map":{"version":3,"names":["copy","require","define","util","extend","Parent","extendFn","TypeError","Ctor","proto","inherits","obj","Object","create","k","prototype","configurable","set","get","module","exports"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/static-extend/index.js"],"sourcesContent":["/*!\n * static-extend <https://github.com/jonschlinkert/static-extend>\n *\n * Copyright (c) 2016, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar copy = require('object-copy');\nvar define = require('define-property');\nvar util = require('util');\n\n/**\n * Returns a function for extending the static properties,\n * prototype properties, and descriptors from the `Parent`\n * constructor onto `Child` constructors.\n *\n * ```js\n * var extend = require('static-extend');\n * Parent.extend = extend(Parent);\n *\n * // optionally pass a custom merge function as the second arg\n * Parent.extend = extend(Parent, function(Child) {\n *   Child.prototype.mixin = function(key, val) {\n *     Child.prototype[key] = val;\n *   };\n * });\n *\n * // extend \"child\" constructors\n * Parent.extend(Child);\n *\n * // optionally define prototype methods as the second arg\n * Parent.extend(Child, {\n *   foo: function() {},\n *   bar: function() {}\n * });\n * ```\n * @param {Function} `Parent` Parent ctor\n * @param {Function} `extendFn` Optional extend function for handling any necessary custom merging. Useful when updating methods that require a specific prototype.\n *   @param {Function} `Child` Child ctor\n *   @param {Object} `proto` Optionally pass additional prototype properties to inherit.\n *   @return {Object}\n * @api public\n */\n\nfunction extend(Parent, extendFn) {\n  if (typeof Parent !== 'function') {\n    throw new TypeError('expected Parent to be a function.');\n  }\n\n  return function(Ctor, proto) {\n    if (typeof Ctor !== 'function') {\n      throw new TypeError('expected Ctor to be a function.');\n    }\n\n    util.inherits(Ctor, Parent);\n    copy(Ctor, Parent);\n\n    // proto can be null or a plain object\n    if (typeof proto === 'object') {\n      var obj = Object.create(proto);\n\n      for (var k in obj) {\n        Ctor.prototype[k] = obj[k];\n      }\n    }\n\n    // keep a reference to the parent prototype\n    define(Ctor.prototype, '_parent_', {\n      configurable: true,\n      set: function() {},\n      get: function() {\n        return Parent.prototype;\n      }\n    });\n\n    if (typeof extendFn === 'function') {\n      extendFn(Ctor, Parent);\n    }\n\n    Ctor.extend = extend(Ctor, extendFn);\n  };\n};\n\n/**\n * Expose `extend`\n */\n\nmodule.exports = extend;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,aAAa,CAAC;AACjC,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,MAAM,CAACC,MAAM,EAAEC,QAAQ,EAAE;EAChC,IAAI,OAAOD,MAAM,KAAK,UAAU,EAAE;IAChC,MAAM,IAAIE,SAAS,CAAC,mCAAmC,CAAC;EAC1D;EAEA,OAAO,UAASC,IAAI,EAAEC,KAAK,EAAE;IAC3B,IAAI,OAAOD,IAAI,KAAK,UAAU,EAAE;MAC9B,MAAM,IAAID,SAAS,CAAC,iCAAiC,CAAC;IACxD;IAEAJ,IAAI,CAACO,QAAQ,CAACF,IAAI,EAAEH,MAAM,CAAC;IAC3BL,IAAI,CAACQ,IAAI,EAAEH,MAAM,CAAC;;IAElB;IACA,IAAI,OAAOI,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAIE,GAAG,GAAGC,MAAM,CAACC,MAAM,CAACJ,KAAK,CAAC;MAE9B,KAAK,IAAIK,CAAC,IAAIH,GAAG,EAAE;QACjBH,IAAI,CAACO,SAAS,CAACD,CAAC,CAAC,GAAGH,GAAG,CAACG,CAAC,CAAC;MAC5B;IACF;;IAEA;IACAZ,MAAM,CAACM,IAAI,CAACO,SAAS,EAAE,UAAU,EAAE;MACjCC,YAAY,EAAE,IAAI;MAClBC,GAAG,EAAE,YAAW,CAAC,CAAC;MAClBC,GAAG,EAAE,YAAW;QACd,OAAOb,MAAM,CAACU,SAAS;MACzB;IACF,CAAC,CAAC;IAEF,IAAI,OAAOT,QAAQ,KAAK,UAAU,EAAE;MAClCA,QAAQ,CAACE,IAAI,EAAEH,MAAM,CAAC;IACxB;IAEAG,IAAI,CAACJ,MAAM,GAAGA,MAAM,CAACI,IAAI,EAAEF,QAAQ,CAAC;EACtC,CAAC;AACH;AAAC;;AAED;AACA;AACA;;AAEAa,MAAM,CAACC,OAAO,GAAGhB,MAAM"},"metadata":{},"sourceType":"script"}