{"ast":null,"code":"'use strict';\n\nvar extglob = require('extglob');\nvar nanomatch = require('nanomatch');\nvar regexNot = require('regex-not');\nvar toRegex = require('to-regex');\nvar not;\n\n/**\n * Characters to use in negation regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\nvar TEXT = '([!@*?+]?\\\\(|\\\\)|\\\\[:?(?=.*?:?\\\\])|:?\\\\]|[*+?!^$.\\\\\\\\/])+';\nvar createNotRegex = function (opts) {\n  return not || (not = textRegex(TEXT));\n};\n\n/**\n * Parsers\n */\n\nmodule.exports = function (snapdragon) {\n  var parsers = snapdragon.parser.parsers;\n\n  // register nanomatch parsers\n  snapdragon.use(nanomatch.parsers);\n\n  // get references to some specific nanomatch parsers before they\n  // are overridden by the extglob and/or parsers\n  var escape = parsers.escape;\n  var slash = parsers.slash;\n  var qmark = parsers.qmark;\n  var plus = parsers.plus;\n  var star = parsers.star;\n  var dot = parsers.dot;\n\n  // register extglob parsers\n  snapdragon.use(extglob.parsers);\n\n  // custom micromatch parsers\n  snapdragon.parser.use(function () {\n    // override \"notRegex\" created in nanomatch parser\n    this.notRegex = /^\\!+(?!\\()/;\n  })\n  // reset the referenced parsers\n  .capture('escape', escape).capture('slash', slash).capture('qmark', qmark).capture('star', star).capture('plus', plus).capture('dot', dot)\n\n  /**\n   * Override `text` parser\n   */.capture('text', function () {\n    if (this.isInside('bracket')) return;\n    var pos = this.position();\n    var m = this.match(createNotRegex(this.options));\n    if (!m || !m[0]) return;\n\n    // escape regex boundary characters and simple brackets\n    var val = m[0].replace(/([[\\]^$])/g, '\\\\$1');\n    return pos({\n      type: 'text',\n      val: val\n    });\n  });\n};\n\n/**\n * Create text regex\n */\n\nfunction textRegex(pattern) {\n  var notStr = regexNot.create(pattern, {\n    contains: true,\n    strictClose: false\n  });\n  var prefix = '(?:[\\\\^]|\\\\\\\\|';\n  return toRegex(prefix + notStr + ')', {\n    strictClose: false\n  });\n}","map":{"version":3,"names":["extglob","require","nanomatch","regexNot","toRegex","not","TEXT","createNotRegex","opts","textRegex","module","exports","snapdragon","parsers","parser","use","escape","slash","qmark","plus","star","dot","notRegex","capture","isInside","pos","position","m","match","options","val","replace","type","pattern","notStr","create","contains","strictClose","prefix"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/micromatch/lib/parsers.js"],"sourcesContent":["'use strict';\n\nvar extglob = require('extglob');\nvar nanomatch = require('nanomatch');\nvar regexNot = require('regex-not');\nvar toRegex = require('to-regex');\nvar not;\n\n/**\n * Characters to use in negation regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\nvar TEXT = '([!@*?+]?\\\\(|\\\\)|\\\\[:?(?=.*?:?\\\\])|:?\\\\]|[*+?!^$.\\\\\\\\/])+';\nvar createNotRegex = function(opts) {\n  return not || (not = textRegex(TEXT));\n};\n\n/**\n * Parsers\n */\n\nmodule.exports = function(snapdragon) {\n  var parsers = snapdragon.parser.parsers;\n\n  // register nanomatch parsers\n  snapdragon.use(nanomatch.parsers);\n\n  // get references to some specific nanomatch parsers before they\n  // are overridden by the extglob and/or parsers\n  var escape = parsers.escape;\n  var slash = parsers.slash;\n  var qmark = parsers.qmark;\n  var plus = parsers.plus;\n  var star = parsers.star;\n  var dot = parsers.dot;\n\n  // register extglob parsers\n  snapdragon.use(extglob.parsers);\n\n  // custom micromatch parsers\n  snapdragon.parser\n    .use(function() {\n      // override \"notRegex\" created in nanomatch parser\n      this.notRegex = /^\\!+(?!\\()/;\n    })\n    // reset the referenced parsers\n    .capture('escape', escape)\n    .capture('slash', slash)\n    .capture('qmark', qmark)\n    .capture('star', star)\n    .capture('plus', plus)\n    .capture('dot', dot)\n\n    /**\n     * Override `text` parser\n     */\n\n    .capture('text', function() {\n      if (this.isInside('bracket')) return;\n      var pos = this.position();\n      var m = this.match(createNotRegex(this.options));\n      if (!m || !m[0]) return;\n\n      // escape regex boundary characters and simple brackets\n      var val = m[0].replace(/([[\\]^$])/g, '\\\\$1');\n\n      return pos({\n        type: 'text',\n        val: val\n      });\n    });\n};\n\n/**\n * Create text regex\n */\n\nfunction textRegex(pattern) {\n  var notStr = regexNot.create(pattern, {contains: true, strictClose: false});\n  var prefix = '(?:[\\\\^]|\\\\\\\\|';\n  return toRegex(prefix + notStr + ')', {strictClose: false});\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIE,QAAQ,GAAGF,OAAO,CAAC,WAAW,CAAC;AACnC,IAAIG,OAAO,GAAGH,OAAO,CAAC,UAAU,CAAC;AACjC,IAAII,GAAG;;AAEP;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GAAG,2DAA2D;AACtE,IAAIC,cAAc,GAAG,UAASC,IAAI,EAAE;EAClC,OAAOH,GAAG,KAAKA,GAAG,GAAGI,SAAS,CAACH,IAAI,CAAC,CAAC;AACvC,CAAC;;AAED;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAG,UAASC,UAAU,EAAE;EACpC,IAAIC,OAAO,GAAGD,UAAU,CAACE,MAAM,CAACD,OAAO;;EAEvC;EACAD,UAAU,CAACG,GAAG,CAACb,SAAS,CAACW,OAAO,CAAC;;EAEjC;EACA;EACA,IAAIG,MAAM,GAAGH,OAAO,CAACG,MAAM;EAC3B,IAAIC,KAAK,GAAGJ,OAAO,CAACI,KAAK;EACzB,IAAIC,KAAK,GAAGL,OAAO,CAACK,KAAK;EACzB,IAAIC,IAAI,GAAGN,OAAO,CAACM,IAAI;EACvB,IAAIC,IAAI,GAAGP,OAAO,CAACO,IAAI;EACvB,IAAIC,GAAG,GAAGR,OAAO,CAACQ,GAAG;;EAErB;EACAT,UAAU,CAACG,GAAG,CAACf,OAAO,CAACa,OAAO,CAAC;;EAE/B;EACAD,UAAU,CAACE,MAAM,CACdC,GAAG,CAAC,YAAW;IACd;IACA,IAAI,CAACO,QAAQ,GAAG,YAAY;EAC9B,CAAC;EACD;EAAA,CACCC,OAAO,CAAC,QAAQ,EAAEP,MAAM,CAAC,CACzBO,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC,CACvBM,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC,CACvBK,OAAO,CAAC,MAAM,EAAEH,IAAI,CAAC,CACrBG,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAAC,CACrBI,OAAO,CAAC,KAAK,EAAEF,GAAG;;EAEnB;AACJ;AACA,KAFI,CAICE,OAAO,CAAC,MAAM,EAAE,YAAW;IAC1B,IAAI,IAAI,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;IAC9B,IAAIC,GAAG,GAAG,IAAI,CAACC,QAAQ,EAAE;IACzB,IAAIC,CAAC,GAAG,IAAI,CAACC,KAAK,CAACrB,cAAc,CAAC,IAAI,CAACsB,OAAO,CAAC,CAAC;IAChD,IAAI,CAACF,CAAC,IAAI,CAACA,CAAC,CAAC,CAAC,CAAC,EAAE;;IAEjB;IACA,IAAIG,GAAG,GAAGH,CAAC,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;IAE5C,OAAON,GAAG,CAAC;MACTO,IAAI,EAAE,MAAM;MACZF,GAAG,EAAEA;IACP,CAAC,CAAC;EACJ,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;;AAEA,SAASrB,SAAS,CAACwB,OAAO,EAAE;EAC1B,IAAIC,MAAM,GAAG/B,QAAQ,CAACgC,MAAM,CAACF,OAAO,EAAE;IAACG,QAAQ,EAAE,IAAI;IAAEC,WAAW,EAAE;EAAK,CAAC,CAAC;EAC3E,IAAIC,MAAM,GAAG,gBAAgB;EAC7B,OAAOlC,OAAO,CAACkC,MAAM,GAAGJ,MAAM,GAAG,GAAG,EAAE;IAACG,WAAW,EAAE;EAAK,CAAC,CAAC;AAC7D"},"metadata":{},"sourceType":"script"}