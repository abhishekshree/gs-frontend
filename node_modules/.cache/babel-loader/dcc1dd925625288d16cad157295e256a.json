{"ast":null,"code":"import _slicedToArray from \"/home/krishnansh/Documents/WebDev/PS/tom-tom-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/krishnansh/Documents/WebDev/PS/tom-tom-app/src/Map.js\";\nimport React from 'react';\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport * as ttservices from \"@tomtom-international/web-sdk-services\";\nimport tt from \"@tomtom-international/web-sdk-maps\";\nimport { useEffect, useState, useRef } from \"react\";\n// import { fromSeconds } from \"from-seconds\";\nimport { api_key } from \"./constants.js\";\nimport axios from \"axios\";\nfunction Map(_ref) {\n  var currLocation = _ref.currLocation,\n    deliveryLocation = _ref.deliveryLocation,\n    destinations = _ref.destinations,\n    zoom_level = _ref.zoom_level,\n    travel_mode = _ref.travel_mode;\n  var mapElement = useRef();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    map = _useState2[0],\n    setMap = _useState2[1];\n  var _useState3 = useState(destinations),\n    _useState4 = _slicedToArray(_useState3, 2),\n    waypoints = _useState4[0],\n    setWayPoints = _useState4[1];\n  function create_delivery_marker(location) {\n    var marker_el = document.createElement(\"div\");\n    marker_el.className = 'marker-delivery';\n    // const popup = new tt.Popup({ offset: 20 }).setText(location.name);\n    var marker = new tt.Marker({\n      element: marker_el,\n      anchor: \"bottom\"\n    }).setLngLat([location.lng, location.lat]).addTo(map);\n    return marker;\n  }\n  var URL = \"https://api.tomtom.com/routing/waypointoptimization/1?key=\".concat(api_key);\n  // const optimize_routes = () => {\n  //     const data = {\n  //         waypoints: waypoints.map((location) => {\n  //             return {\n  //             point: {\n  //                 latitude: location.lat,\n  //                 longitude: location.lng,\n  //             },\n  //             };\n  //         }),\n  //         options: {\n  //             travelMode: travel_mode,\n  //             vehicleMaxSpeed: 0,\n  //             vehicleCommercial: true,\n  //             vehicleLoadType: [\"otherHazmatGeneral\"],\n  //             traffic: \"live\",\n  //             departAt: \"now\",\n  //             outputExtensions: [\"travelTimes\", \"routeLengths\"],\n  //             waypointConstraints: {\n  //             originIndex: 0,\n  //             destinationIndex: 0,\n  //             },\n  //         },\n  //     };\n  //     fetch(URL, {\n  //     method: \"POST\",\n  //     headers: { \"Content-type\": \"application/json;charset=UTF-8\" },\n  //     body: JSON.stringify(data),\n  //     })\n  //     .then((response) => response.json())\n  //     .then((data) => {\n  //         const optimized_locations = data.summary.legSummaries.map((summary) => {\n  //             return { ...waypoints[summary.originIndex], ...summary };\n  //         });\n  //         console.log(optimized_locations);\n  //         optimized_locations.forEach((location, index) => {\n  //             const start_time = new Date(location.departureTime).toLocaleString();\n  //             const arrival_time = new Date(location.arrivalTime).toLocaleString();\n  //             const distance_in_seconds = location.travelTimeInSeconds\n  //             const start_at = location.originIndex;\n  //             const end_at = location.destinationIndex;\n  //             const popup = new tt.Popup({ offset: 50 }).setHTML(\n  //               `<div class=\"popup\">\n  //               <h1>Location ${index}</h1>\n  //               <br />\n  //               <p>Current Point: ${waypoints[start_at].name}</p>\n  //               <p>Departure Time: ${start_time}</p>\n  //               <p>Next Stop: ${waypoints[end_at].name}</p>\n  //               <p>Arrival Time:  ${arrival_time}<p>\n  //               <p>Distance To next stop:  ${location.lengthInMeters / 1000}(km)</p>\n  //               <p>Estimated Time To next stop:  ${\n  //                 distance_in_seconds.hours\n  //               } Hours, ${distance_in_seconds.minutes} Minutes</p>\n  //               </div> `\n  //             );\n  //             create_delivery_marker(location).setPopup(popup);\n  //         })\n  //         create_route(optimized_locations);\n  //     })\n  // };\n\n  // const create_route = async (locations) => {\n  //     await ttservices.services\n  //         .calculateRoute({\n  //         key: api_key,\n  //         locations,\n  //         })\n  //         .then((routeData) => {\n  //         const features = routeData.toGeoJson().features;\n  //         features.forEach((feature, index) => {\n  //             map.addLayer({\n  //             id: \"route\" + index,\n  //             type: \"line\",\n  //             source: {\n  //                 type: \"geojson\",\n  //                 data: feature,\n  //             },\n  //             paint: {\n  //                 \"line-color\": `red`,\n  //                 \"line-opacity\": 0.8,\n  //                 \"line-width\": 6,\n  //                 \"line-dasharray\": [1, 0, 1, 0],\n  //             }\n  //             });\n  //         });\n  //         });\n  // };\n\n  // function createAllRoutes(){\n  //     let pts_covered = 0;\n  //         while(pts_covered<waypoints.length){\n  //             create_route(waypoints.slice(pts_covered,Math.min(pts_covered+150,waypoints.length)))\n  //             pts_covered+=150    \n  //         }       \n  // }\n\n  function createRoute() {\n    console.log(currLocation);\n    var routeOptions = {\n      key: api_key,\n      locations: [[currLocation.lng, currLocation.lat], [deliveryLocation.lng, deliveryLocation.lat]]\n      // travelMode: travel_mode,\n      // vehicleCommercial: true,\n      // vehicleHeading: 0,\n    };\n\n    ttservices.services.calculateRoute(routeOptions).then(function (response) {\n      // routeOptions.locations.map((store) => \n      //    new tt.Marker().setLngLat(store).addTo(map.current)\n      // );\n      // if(map.current === undefined)\n      //   console.log(\"hi\")\n      var geojson = response.toGeoJson();\n      map.current.addLayer({\n        id: \"route\" + Math.random(100000),\n        type: \"line\",\n        source: {\n          type: \"geojson\",\n          data: geojson\n        },\n        paint: {\n          \"line-color\": \"#0f8ae2\",\n          \"line-width\": 8\n        }\n      });\n      var bounds = new tt.LngLatBounds();\n      geojson.features[0].geometry.coordinates.forEach(function (point) {\n        bounds.extend(tt.LngLat.convert(point)); // creates a bounding area\n      });\n\n      map.current.fitBounds(bounds, {\n        duration: 300,\n        padding: 50,\n        maxZoom: 14\n      }); // zooms the map to the searched route\n    });\n  }\n\n  var getSnapFunction = function getSnapFunction() {\n    // const url = 'https://api.tomtom.com/snapToRoads/1';\n    // const params = {\n    //   points: `${currLocation.lng},${currLocation.lat};${deliveryLocation.lng},${deliveryLocation.lat}`,\n    //   vehicleType: 'Truck',\n    //   fields: '{projectedPoints{type,geometry{type,coordinates}'+\n    //           ',properties{routeIndex,snapResult}}'+\n    //           ',route{type,geometry{type,coordinates}'+\n    //           ',properties{id,linearReference,speedLimits{value,unit,type}'+\n    //           ',speedProfile{value,unit},address{roadName,roadNumbers}}'+\n    //           ',frc,formOfWay,roadUse,laneInfo{numberOfLanes}'+\n    //           ',heightInfo{height,chainage},trafficSigns{signType,chainage}'+\n    //           ',trafficLight,confidence}}'+\n    //           ',distances{total,road,offRoad}}',\n    //   key: api_key,\n    // };\n    axios.get(\"https://api.tomtom.com/snap-to-roads/1/snap-to-roads?points=77.5747463,12.9140182;77.5454111,12.9414398&fields={projectedPoints{type,geometry{type,coordinates},properties{routeIndex}},route{type,geometry{type,coordinates},properties{id,speedRestrictions{maximumSpeed{value,unit}}}}}&key=y1Duis78asfADSQn9HYekaSyUw4siXLf\").then(function (res) {\n      console.log(\"done\");\n      console.log(res.data);\n      res.data.route.forEach(function (item) {\n        map.addLayer({\n          id: Math.random().toString(),\n          type: \"line\",\n          source: {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: [{\n                type: \"Feature\",\n                geometry: {\n                  type: \"LineString\",\n                  properties: {},\n                  coordinates: item.geometry.coordinates\n                }\n              }]\n            }\n          },\n          layout: {\n            \"line-cap\": \"round\",\n            \"line-join\": \"round\"\n          },\n          paint: {\n            \"line-color\": \"#ff0000\",\n            \"line-width\": 2\n          }\n        });\n      });\n      map.setCenter([parseFloat(77.5747463), parseFloat(12.9140182)]);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n  useEffect(function () {\n    var map = tt.map({\n      key: api_key,\n      container: mapElement.current,\n      center: [77.5747463, 12.9140182],\n      zoom: zoom_level\n    });\n    map.addControl(new tt.FullscreenControl());\n    map.addControl(new tt.NavigationControl());\n    setMap(map);\n    return function () {\n      return map.remove();\n    };\n  }, []);\n  useEffect(function () {\n    if (map) {\n      map.on(\"load\", function () {\n        // for (let d in waypoints) {\n        //     create_delivery_marker(waypoints[d],map);\n        // }\n        createRoute();\n        create_delivery_marker(currLocation, map);\n        create_delivery_marker(deliveryLocation, map);\n        // getSnapFunction()\n      });\n    } else {\n      console.log(\"error loading map\"); //Add better error handling function\n    }\n  }, [map]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map_wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapElement,\n    className: \"mapDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }));\n}\nexport default Map;","map":{"version":3,"names":["React","ttservices","tt","useEffect","useState","useRef","api_key","axios","Map","currLocation","deliveryLocation","destinations","zoom_level","travel_mode","mapElement","map","setMap","waypoints","setWayPoints","create_delivery_marker","location","marker_el","document","createElement","className","marker","Marker","element","anchor","setLngLat","lng","lat","addTo","URL","createRoute","console","log","routeOptions","key","locations","services","calculateRoute","then","response","geojson","toGeoJson","current","addLayer","id","Math","random","type","source","data","paint","bounds","LngLatBounds","features","geometry","coordinates","forEach","point","extend","LngLat","convert","fitBounds","duration","padding","maxZoom","getSnapFunction","get","res","route","item","toString","properties","layout","setCenter","parseFloat","catch","err","container","center","zoom","addControl","FullscreenControl","NavigationControl","remove","on"],"sources":["/home/krishnansh/Documents/WebDev/PS/tom-tom-app/src/Map.js"],"sourcesContent":["import React from 'react'\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport * as ttservices from \"@tomtom-international/web-sdk-services\";\nimport tt from \"@tomtom-international/web-sdk-maps\";\nimport { useEffect, useState, useRef } from \"react\";\n// import { fromSeconds } from \"from-seconds\";\nimport { api_key } from \"./constants.js\"\nimport axios from \"axios\"\n\nfunction Map({ currLocation, deliveryLocation, destinations, zoom_level, travel_mode }) {\n\n    const mapElement = useRef();\n    const [map, setMap] = useState(null); \n    const [waypoints,setWayPoints] = useState(destinations);\n\n    function create_delivery_marker(location) {\n        const marker_el = document.createElement(\"div\");\n        marker_el.className = 'marker-delivery';\n        // const popup = new tt.Popup({ offset: 20 }).setText(location.name);\n        const marker = new tt.Marker({ element: marker_el, anchor: \"bottom\" })\n        .setLngLat([location.lng, location.lat])\n        .addTo(map);\n\n        return marker;\n    }\n    let URL = `https://api.tomtom.com/routing/waypointoptimization/1?key=${api_key}`;\n    // const optimize_routes = () => {\n    //     const data = {\n    //         waypoints: waypoints.map((location) => {\n    //             return {\n    //             point: {\n    //                 latitude: location.lat,\n    //                 longitude: location.lng,\n    //             },\n    //             };\n    //         }),\n    //         options: {\n    //             travelMode: travel_mode,\n    //             vehicleMaxSpeed: 0,\n    //             vehicleCommercial: true,\n    //             vehicleLoadType: [\"otherHazmatGeneral\"],\n    //             traffic: \"live\",\n    //             departAt: \"now\",\n    //             outputExtensions: [\"travelTimes\", \"routeLengths\"],\n    //             waypointConstraints: {\n    //             originIndex: 0,\n    //             destinationIndex: 0,\n    //             },\n    //         },\n    //     };\n    //     fetch(URL, {\n    //     method: \"POST\",\n    //     headers: { \"Content-type\": \"application/json;charset=UTF-8\" },\n    //     body: JSON.stringify(data),\n    //     })\n    //     .then((response) => response.json())\n    //     .then((data) => {\n    //         const optimized_locations = data.summary.legSummaries.map((summary) => {\n    //             return { ...waypoints[summary.originIndex], ...summary };\n    //         });\n    //         console.log(optimized_locations);\n    //         optimized_locations.forEach((location, index) => {\n    //             const start_time = new Date(location.departureTime).toLocaleString();\n    //             const arrival_time = new Date(location.arrivalTime).toLocaleString();\n    //             const distance_in_seconds = location.travelTimeInSeconds\n    //             const start_at = location.originIndex;\n    //             const end_at = location.destinationIndex;\n    //             const popup = new tt.Popup({ offset: 50 }).setHTML(\n    //               `<div class=\"popup\">\n    //               <h1>Location ${index}</h1>\n    //               <br />\n    //               <p>Current Point: ${waypoints[start_at].name}</p>\n    //               <p>Departure Time: ${start_time}</p>\n    //               <p>Next Stop: ${waypoints[end_at].name}</p>\n    //               <p>Arrival Time:  ${arrival_time}<p>\n    //               <p>Distance To next stop:  ${location.lengthInMeters / 1000}(km)</p>\n    //               <p>Estimated Time To next stop:  ${\n    //                 distance_in_seconds.hours\n    //               } Hours, ${distance_in_seconds.minutes} Minutes</p>\n    //               </div> `\n    //             );\n    //             create_delivery_marker(location).setPopup(popup);\n    //         })\n    //         create_route(optimized_locations);\n    //     })\n    // };\n\n    // const create_route = async (locations) => {\n    //     await ttservices.services\n    //         .calculateRoute({\n    //         key: api_key,\n    //         locations,\n    //         })\n    //         .then((routeData) => {\n    //         const features = routeData.toGeoJson().features;\n    //         features.forEach((feature, index) => {\n    //             map.addLayer({\n    //             id: \"route\" + index,\n    //             type: \"line\",\n    //             source: {\n    //                 type: \"geojson\",\n    //                 data: feature,\n    //             },\n    //             paint: {\n    //                 \"line-color\": `red`,\n    //                 \"line-opacity\": 0.8,\n    //                 \"line-width\": 6,\n    //                 \"line-dasharray\": [1, 0, 1, 0],\n    //             }\n    //             });\n    //         });\n    //         });\n    // };\n\n    // function createAllRoutes(){\n    //     let pts_covered = 0;\n    //         while(pts_covered<waypoints.length){\n    //             create_route(waypoints.slice(pts_covered,Math.min(pts_covered+150,waypoints.length)))\n    //             pts_covered+=150    \n    //         }       \n    // }\n\n    function createRoute () {\n        console.log(currLocation)\n        const routeOptions = {\n          key: api_key,\n          locations: [\n            [currLocation.lng, currLocation.lat],\n            [deliveryLocation.lng, deliveryLocation.lat],\n          ],\n          // travelMode: travel_mode,\n          // vehicleCommercial: true,\n          // vehicleHeading: 0,\n        };\n        \n        ttservices.services.calculateRoute(routeOptions).then((response) => {\n          // routeOptions.locations.map((store) => \n          //    new tt.Marker().setLngLat(store).addTo(map.current)\n          // );\n          // if(map.current === undefined)\n          //   console.log(\"hi\")\n          var geojson = response.toGeoJson();\n          map.current.addLayer({\n            id: \"route\" + Math.random(100000),\n            type: \"line\",\n            source: {\n              type: \"geojson\",\n              data: geojson,\n            },\n            paint: {\n              \"line-color\": \"#0f8ae2\",\n              \"line-width\": 8,\n            },\n          });\n     \n          var bounds = new tt.LngLatBounds();\n          geojson.features[0].geometry.coordinates.forEach(function (point) {\n            bounds.extend(tt.LngLat.convert(point)); // creates a bounding area\n          });\n          map.current.fitBounds(bounds, {\n            duration: 300,\n            padding: 50,\n            maxZoom: 14,\n          }); // zooms the map to the searched route\n        });\n    }\n\n    const getSnapFunction = () => {\n      // const url = 'https://api.tomtom.com/snapToRoads/1';\n      // const params = {\n      //   points: `${currLocation.lng},${currLocation.lat};${deliveryLocation.lng},${deliveryLocation.lat}`,\n      //   vehicleType: 'Truck',\n      //   fields: '{projectedPoints{type,geometry{type,coordinates}'+\n      //           ',properties{routeIndex,snapResult}}'+\n      //           ',route{type,geometry{type,coordinates}'+\n      //           ',properties{id,linearReference,speedLimits{value,unit,type}'+\n      //           ',speedProfile{value,unit},address{roadName,roadNumbers}}'+\n      //           ',frc,formOfWay,roadUse,laneInfo{numberOfLanes}'+\n      //           ',heightInfo{height,chainage},trafficSigns{signType,chainage}'+\n      //           ',trafficLight,confidence}}'+\n      //           ',distances{total,road,offRoad}}',\n      //   key: api_key,\n      // };\n      axios.get(\"https://api.tomtom.com/snap-to-roads/1/snap-to-roads?points=77.5747463,12.9140182;77.5454111,12.9414398&fields={projectedPoints{type,geometry{type,coordinates},properties{routeIndex}},route{type,geometry{type,coordinates},properties{id,speedRestrictions{maximumSpeed{value,unit}}}}}&key=y1Duis78asfADSQn9HYekaSyUw4siXLf\").then((res) => \n      {\n        console.log(\"done\")\n       console.log(res.data)\n       res.data.route.forEach(\n        (item) => {\n          map.addLayer({\n            id: Math.random().toString(),\n            type: \"line\",\n            source: {\n              type: \"geojson\",\n              data: {\n                type: \"FeatureCollection\",\n                features: [\n                  {\n                    type: \"Feature\",\n                    geometry: {\n                      type: \"LineString\",\n                      properties: {},\n                      coordinates: item.geometry.coordinates\n                    }\n                  }\n                ]\n              }\n            },\n            layout: {\n              \"line-cap\": \"round\",\n              \"line-join\": \"round\"\n            },\n            paint: {\n              \"line-color\": \"#ff0000\",\n              \"line-width\": 2\n            }\n          });\n        }\n       )\n         map.setCenter([parseFloat(77.5747463), parseFloat(12.9140182)]);\n     }).catch((err) => console.log(err))\n    }\n\n    useEffect(() => {\n        let map = tt.map({\n        key: api_key,\n        container: mapElement.current,\n        center: [77.5747463,12.9140182],\n        zoom: zoom_level,\n        });\n        map.addControl(new tt.FullscreenControl());\n        map.addControl(new tt.NavigationControl());\n        setMap(map);\n        return () => map.remove();\n    }, []);\n    \n    useEffect(() => {\n        if (map) {\n          map.on(\"load\", () => {\n            // for (let d in waypoints) {\n            //     create_delivery_marker(waypoints[d],map);\n            // }\n            createRoute()\n            create_delivery_marker(currLocation,map)\n            create_delivery_marker(deliveryLocation,map)\n            // getSnapFunction()\n          });\n        }\n        else{\n            console.log(\"error loading map\"); //Add better error handling function\n        }\n      }, [map]);\n\n    return (\n      <div className=\"map_wrapper\">\n        <div ref={mapElement} className=\"mapDiv\" />\n      </div>\n    );\n  }\n  export default Map;"],"mappings":"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"},"metadata":{},"sourceType":"module"}