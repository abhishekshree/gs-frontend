{"ast":null,"code":"'use strict';\n\nvar extend = require('extend-shallow');\nvar Snapdragon = require('snapdragon');\nvar compilers = require('./compilers');\nvar parsers = require('./parsers');\nvar utils = require('./utils');\n\n/**\n * Customize Snapdragon parser and renderer\n */\n\nfunction Braces(options) {\n  this.options = extend({}, options);\n}\n\n/**\n * Initialize braces\n */\n\nBraces.prototype.init = function (options) {\n  if (this.isInitialized) return;\n  this.isInitialized = true;\n  var opts = utils.createOptions({}, this.options, options);\n  this.snapdragon = this.options.snapdragon || new Snapdragon(opts);\n  this.compiler = this.snapdragon.compiler;\n  this.parser = this.snapdragon.parser;\n  compilers(this.snapdragon, opts);\n  parsers(this.snapdragon, opts);\n\n  /**\n   * Call Snapdragon `.parse` method. When AST is returned, we check to\n   * see if any unclosed braces are left on the stack and, if so, we iterate\n   * over the stack and correct the AST so that compilers are called in the correct\n   * order and unbalance braces are properly escaped.\n   */\n\n  utils.define(this.snapdragon, 'parse', function (pattern, options) {\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\n    this.parser.ast.input = pattern;\n    var stack = this.parser.stack;\n    while (stack.length) {\n      addParent({\n        type: 'brace.close',\n        val: ''\n      }, stack.pop());\n    }\n    function addParent(node, parent) {\n      utils.define(node, 'parent', parent);\n      parent.nodes.push(node);\n    }\n\n    // add non-enumerable parser reference\n    utils.define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n};\n\n/**\n * Decorate `.parse` method\n */\n\nBraces.prototype.parse = function (ast, options) {\n  if (ast && typeof ast === 'object' && ast.nodes) return ast;\n  this.init(options);\n  return this.snapdragon.parse(ast, options);\n};\n\n/**\n * Decorate `.compile` method\n */\n\nBraces.prototype.compile = function (ast, options) {\n  if (typeof ast === 'string') {\n    ast = this.parse(ast, options);\n  } else {\n    this.init(options);\n  }\n  return this.snapdragon.compile(ast, options);\n};\n\n/**\n * Expand\n */\n\nBraces.prototype.expand = function (pattern) {\n  var ast = this.parse(pattern, {\n    expand: true\n  });\n  return this.compile(ast, {\n    expand: true\n  });\n};\n\n/**\n * Optimize\n */\n\nBraces.prototype.optimize = function (pattern) {\n  var ast = this.parse(pattern, {\n    optimize: true\n  });\n  return this.compile(ast, {\n    optimize: true\n  });\n};\n\n/**\n * Expose `Braces`\n */\n\nmodule.exports = Braces;","map":{"version":3,"names":["extend","require","Snapdragon","compilers","parsers","utils","Braces","options","prototype","init","isInitialized","opts","createOptions","snapdragon","compiler","parser","define","pattern","parsed","parse","apply","arguments","ast","input","stack","length","addParent","type","val","pop","node","parent","nodes","push","compile","expand","optimize","module","exports"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/braces/lib/braces.js"],"sourcesContent":["'use strict';\n\nvar extend = require('extend-shallow');\nvar Snapdragon = require('snapdragon');\nvar compilers = require('./compilers');\nvar parsers = require('./parsers');\nvar utils = require('./utils');\n\n/**\n * Customize Snapdragon parser and renderer\n */\n\nfunction Braces(options) {\n  this.options = extend({}, options);\n}\n\n/**\n * Initialize braces\n */\n\nBraces.prototype.init = function(options) {\n  if (this.isInitialized) return;\n  this.isInitialized = true;\n  var opts = utils.createOptions({}, this.options, options);\n  this.snapdragon = this.options.snapdragon || new Snapdragon(opts);\n  this.compiler = this.snapdragon.compiler;\n  this.parser = this.snapdragon.parser;\n\n  compilers(this.snapdragon, opts);\n  parsers(this.snapdragon, opts);\n\n  /**\n   * Call Snapdragon `.parse` method. When AST is returned, we check to\n   * see if any unclosed braces are left on the stack and, if so, we iterate\n   * over the stack and correct the AST so that compilers are called in the correct\n   * order and unbalance braces are properly escaped.\n   */\n\n  utils.define(this.snapdragon, 'parse', function(pattern, options) {\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\n    this.parser.ast.input = pattern;\n\n    var stack = this.parser.stack;\n    while (stack.length) {\n      addParent({type: 'brace.close', val: ''}, stack.pop());\n    }\n\n    function addParent(node, parent) {\n      utils.define(node, 'parent', parent);\n      parent.nodes.push(node);\n    }\n\n    // add non-enumerable parser reference\n    utils.define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n};\n\n/**\n * Decorate `.parse` method\n */\n\nBraces.prototype.parse = function(ast, options) {\n  if (ast && typeof ast === 'object' && ast.nodes) return ast;\n  this.init(options);\n  return this.snapdragon.parse(ast, options);\n};\n\n/**\n * Decorate `.compile` method\n */\n\nBraces.prototype.compile = function(ast, options) {\n  if (typeof ast === 'string') {\n    ast = this.parse(ast, options);\n  } else {\n    this.init(options);\n  }\n  return this.snapdragon.compile(ast, options);\n};\n\n/**\n * Expand\n */\n\nBraces.prototype.expand = function(pattern) {\n  var ast = this.parse(pattern, {expand: true});\n  return this.compile(ast, {expand: true});\n};\n\n/**\n * Optimize\n */\n\nBraces.prototype.optimize = function(pattern) {\n  var ast = this.parse(pattern, {optimize: true});\n  return this.compile(ast, {optimize: true});\n};\n\n/**\n * Expose `Braces`\n */\n\nmodule.exports = Braces;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}