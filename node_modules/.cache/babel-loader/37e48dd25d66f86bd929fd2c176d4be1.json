{"ast":null,"code":"'use strict';\n\nvar os = require('os');\nvar equals = require('buffer-equal');\nvar cr = new Buffer('\\r\\n');\nvar nl = new Buffer('\\n');\n\n/**\n * Append a buffer to another buffer ensuring to preserve line ending characters.\n *\n * ```js\n * console.log([appendBuffer(new Buffer('abc\\r\\n'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\r\\ndef\\r\\n' ]\n *\n * console.log([appendBuffer(new Buffer('abc\\n'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\ndef\\n' ]\n *\n * // uses os.EOL when a line ending is not found\n * console.log([appendBuffer(new Buffer('abc'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\ndef' ]\n * * ```\n * @param  {Buffer} `buf` Buffer that will be used to check for an existing line ending. The suffix is appended to this.\n * @param  {Buffer} `suffix` Buffer that will be appended to the buf.\n * @return {Buffer} Final Buffer\n * @api public\n */\n\nmodule.exports = function appendBuffer(buf, suffix) {\n  if (!suffix || !suffix.length) {\n    return buf;\n  }\n  var eol;\n  if (equals(buf.slice(-2), cr)) {\n    eol = cr;\n  } else if (equals(buf.slice(-1), nl)) {\n    eol = nl;\n  } else {\n    return Buffer.concat([buf, new Buffer(os.EOL), new Buffer(suffix)]);\n  }\n  return Buffer.concat([buf, new Buffer(suffix), eol]);\n};","map":{"version":3,"names":["os","require","equals","cr","Buffer","nl","module","exports","appendBuffer","buf","suffix","length","eol","slice","concat","EOL"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/append-buffer/index.js"],"sourcesContent":["'use strict';\n\nvar os = require('os');\nvar equals = require('buffer-equal');\nvar cr = new Buffer('\\r\\n');\nvar nl = new Buffer('\\n');\n\n/**\n * Append a buffer to another buffer ensuring to preserve line ending characters.\n *\n * ```js\n * console.log([appendBuffer(new Buffer('abc\\r\\n'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\r\\ndef\\r\\n' ]\n *\n * console.log([appendBuffer(new Buffer('abc\\n'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\ndef\\n' ]\n *\n * // uses os.EOL when a line ending is not found\n * console.log([appendBuffer(new Buffer('abc'), new Buffer('def')).toString()]);\n * //=> [ 'abc\\ndef' ]\n * * ```\n * @param  {Buffer} `buf` Buffer that will be used to check for an existing line ending. The suffix is appended to this.\n * @param  {Buffer} `suffix` Buffer that will be appended to the buf.\n * @return {Buffer} Final Buffer\n * @api public\n */\n\nmodule.exports = function appendBuffer(buf, suffix) {\n  if (!suffix || !suffix.length) {\n    return buf;\n  }\n  var eol;\n  if (equals(buf.slice(-2), cr)) {\n    eol = cr;\n  } else if (equals(buf.slice(-1), nl)) {\n    eol = nl;\n  } else {\n    return Buffer.concat([buf, new Buffer(os.EOL), new Buffer(suffix)]);\n  }\n  return Buffer.concat([buf, new Buffer(suffix), eol]);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAc,CAAC;AACpC,IAAIE,EAAE,GAAG,IAAIC,MAAM,CAAC,MAAM,CAAC;AAC3B,IAAIC,EAAE,GAAG,IAAID,MAAM,CAAC,IAAI,CAAC;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAG,SAASC,YAAY,CAACC,GAAG,EAAEC,MAAM,EAAE;EAClD,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,MAAM,EAAE;IAC7B,OAAOF,GAAG;EACZ;EACA,IAAIG,GAAG;EACP,IAAIV,MAAM,CAACO,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEV,EAAE,CAAC,EAAE;IAC7BS,GAAG,GAAGT,EAAE;EACV,CAAC,MAAM,IAAID,MAAM,CAACO,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,EAAER,EAAE,CAAC,EAAE;IACpCO,GAAG,GAAGP,EAAE;EACV,CAAC,MAAM;IACL,OAAOD,MAAM,CAACU,MAAM,CAAC,CAACL,GAAG,EAAE,IAAIL,MAAM,CAACJ,EAAE,CAACe,GAAG,CAAC,EAAE,IAAIX,MAAM,CAACM,MAAM,CAAC,CAAC,CAAC;EACrE;EACA,OAAON,MAAM,CAACU,MAAM,CAAC,CAACL,GAAG,EAAE,IAAIL,MAAM,CAACM,MAAM,CAAC,EAAEE,GAAG,CAAC,CAAC;AACtD,CAAC"},"metadata":{},"sourceType":"script"}