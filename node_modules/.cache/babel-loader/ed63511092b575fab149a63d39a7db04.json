{"ast":null,"code":"/*!\n * split-string <https://github.com/jonschlinkert/split-string>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar extend = require('extend-shallow');\nmodule.exports = function (str, options, fn) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  // allow separator to be defined as a string\n  if (typeof options === 'string') {\n    options = {\n      sep: options\n    };\n  }\n  var opts = extend({\n    sep: '.'\n  }, options);\n  var quotes = opts.quotes || ['\"', \"'\", '`'];\n  var brackets;\n  if (opts.brackets === true) {\n    brackets = {\n      '<': '>',\n      '(': ')',\n      '[': ']',\n      '{': '}'\n    };\n  } else if (opts.brackets) {\n    brackets = opts.brackets;\n  }\n  var tokens = [];\n  var stack = [];\n  var arr = [''];\n  var sep = opts.sep;\n  var len = str.length;\n  var idx = -1;\n  var closeIdx;\n  function expected() {\n    if (brackets && stack.length) {\n      return brackets[stack[stack.length - 1]];\n    }\n  }\n  while (++idx < len) {\n    var ch = str[idx];\n    var next = str[idx + 1];\n    var tok = {\n      val: ch,\n      idx: idx,\n      arr: arr,\n      str: str\n    };\n    tokens.push(tok);\n    if (ch === '\\\\') {\n      tok.val = keepEscaping(opts, str, idx) === true ? ch + next : next;\n      tok.escaped = true;\n      if (typeof fn === 'function') {\n        fn(tok);\n      }\n      arr[arr.length - 1] += tok.val;\n      idx++;\n      continue;\n    }\n    if (brackets && brackets[ch]) {\n      stack.push(ch);\n      var e = expected();\n      var i = idx + 1;\n      if (str.indexOf(e, i + 1) !== -1) {\n        while (stack.length && i < len) {\n          var s = str[++i];\n          if (s === '\\\\') {\n            s++;\n            continue;\n          }\n          if (quotes.indexOf(s) !== -1) {\n            i = getClosingQuote(str, s, i + 1);\n            continue;\n          }\n          e = expected();\n          if (stack.length && str.indexOf(e, i + 1) === -1) {\n            break;\n          }\n          if (brackets[s]) {\n            stack.push(s);\n            continue;\n          }\n          if (e === s) {\n            stack.pop();\n          }\n        }\n      }\n      closeIdx = i;\n      if (closeIdx === -1) {\n        arr[arr.length - 1] += ch;\n        continue;\n      }\n      ch = str.slice(idx, closeIdx + 1);\n      tok.val = ch;\n      tok.idx = idx = closeIdx;\n    }\n    if (quotes.indexOf(ch) !== -1) {\n      closeIdx = getClosingQuote(str, ch, idx + 1);\n      if (closeIdx === -1) {\n        arr[arr.length - 1] += ch;\n        continue;\n      }\n      if (keepQuotes(ch, opts) === true) {\n        ch = str.slice(idx, closeIdx + 1);\n      } else {\n        ch = str.slice(idx + 1, closeIdx);\n      }\n      tok.val = ch;\n      tok.idx = idx = closeIdx;\n    }\n    if (typeof fn === 'function') {\n      fn(tok, tokens);\n      ch = tok.val;\n      idx = tok.idx;\n    }\n    if (tok.val === sep && tok.split !== false) {\n      arr.push('');\n      continue;\n    }\n    arr[arr.length - 1] += tok.val;\n  }\n  return arr;\n};\nfunction getClosingQuote(str, ch, i, brackets) {\n  var idx = str.indexOf(ch, i);\n  if (str.charAt(idx - 1) === '\\\\') {\n    return getClosingQuote(str, ch, idx + 1);\n  }\n  return idx;\n}\nfunction keepQuotes(ch, opts) {\n  if (opts.keepDoubleQuotes === true && ch === '\"') return true;\n  if (opts.keepSingleQuotes === true && ch === \"'\") return true;\n  return opts.keepQuotes;\n}\nfunction keepEscaping(opts, str, idx) {\n  if (typeof opts.keepEscaping === 'function') {\n    return opts.keepEscaping(str, idx);\n  }\n  return opts.keepEscaping === true || str[idx + 1] === '\\\\';\n}","map":{"version":3,"names":["extend","require","module","exports","str","options","fn","TypeError","sep","opts","quotes","brackets","tokens","stack","arr","len","length","idx","closeIdx","expected","ch","next","tok","val","push","keepEscaping","escaped","e","i","indexOf","s","getClosingQuote","pop","slice","keepQuotes","split","charAt","keepDoubleQuotes","keepSingleQuotes"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/split-string/index.js"],"sourcesContent":["/*!\n * split-string <https://github.com/jonschlinkert/split-string>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar extend = require('extend-shallow');\n\nmodule.exports = function(str, options, fn) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  // allow separator to be defined as a string\n  if (typeof options === 'string') {\n    options = { sep: options };\n  }\n\n  var opts = extend({sep: '.'}, options);\n  var quotes = opts.quotes || ['\"', \"'\", '`'];\n  var brackets;\n\n  if (opts.brackets === true) {\n    brackets = {\n      '<': '>',\n      '(': ')',\n      '[': ']',\n      '{': '}'\n    };\n  } else if (opts.brackets) {\n    brackets = opts.brackets;\n  }\n\n  var tokens = [];\n  var stack = [];\n  var arr = [''];\n  var sep = opts.sep;\n  var len = str.length;\n  var idx = -1;\n  var closeIdx;\n\n  function expected() {\n    if (brackets && stack.length) {\n      return brackets[stack[stack.length - 1]];\n    }\n  }\n\n  while (++idx < len) {\n    var ch = str[idx];\n    var next = str[idx + 1];\n    var tok = { val: ch, idx: idx, arr: arr, str: str };\n    tokens.push(tok);\n\n    if (ch === '\\\\') {\n      tok.val = keepEscaping(opts, str, idx) === true ? (ch + next) : next;\n      tok.escaped = true;\n      if (typeof fn === 'function') {\n        fn(tok);\n      }\n      arr[arr.length - 1] += tok.val;\n      idx++;\n      continue;\n    }\n\n    if (brackets && brackets[ch]) {\n      stack.push(ch);\n      var e = expected();\n      var i = idx + 1;\n\n      if (str.indexOf(e, i + 1) !== -1) {\n        while (stack.length && i < len) {\n          var s = str[++i];\n          if (s === '\\\\') {\n            s++;\n            continue;\n          }\n\n          if (quotes.indexOf(s) !== -1) {\n            i = getClosingQuote(str, s, i + 1);\n            continue;\n          }\n\n          e = expected();\n          if (stack.length && str.indexOf(e, i + 1) === -1) {\n            break;\n          }\n\n          if (brackets[s]) {\n            stack.push(s);\n            continue;\n          }\n\n          if (e === s) {\n            stack.pop();\n          }\n        }\n      }\n\n      closeIdx = i;\n      if (closeIdx === -1) {\n        arr[arr.length - 1] += ch;\n        continue;\n      }\n\n      ch = str.slice(idx, closeIdx + 1);\n      tok.val = ch;\n      tok.idx = idx = closeIdx;\n    }\n\n    if (quotes.indexOf(ch) !== -1) {\n      closeIdx = getClosingQuote(str, ch, idx + 1);\n      if (closeIdx === -1) {\n        arr[arr.length - 1] += ch;\n        continue;\n      }\n\n      if (keepQuotes(ch, opts) === true) {\n        ch = str.slice(idx, closeIdx + 1);\n      } else {\n        ch = str.slice(idx + 1, closeIdx);\n      }\n\n      tok.val = ch;\n      tok.idx = idx = closeIdx;\n    }\n\n    if (typeof fn === 'function') {\n      fn(tok, tokens);\n      ch = tok.val;\n      idx = tok.idx;\n    }\n\n    if (tok.val === sep && tok.split !== false) {\n      arr.push('');\n      continue;\n    }\n\n    arr[arr.length - 1] += tok.val;\n  }\n\n  return arr;\n};\n\nfunction getClosingQuote(str, ch, i, brackets) {\n  var idx = str.indexOf(ch, i);\n  if (str.charAt(idx - 1) === '\\\\') {\n    return getClosingQuote(str, ch, idx + 1);\n  }\n  return idx;\n}\n\nfunction keepQuotes(ch, opts) {\n  if (opts.keepDoubleQuotes === true && ch === '\"') return true;\n  if (opts.keepSingleQuotes === true && ch === \"'\") return true;\n  return opts.keepQuotes;\n}\n\nfunction keepEscaping(opts, str, idx) {\n  if (typeof opts.keepEscaping === 'function') {\n    return opts.keepEscaping(str, idx);\n  }\n  return opts.keepEscaping === true || str[idx + 1] === '\\\\';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}