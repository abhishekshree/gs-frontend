{"ast":null,"code":"'use strict';\n\nvar nanomatch = require('nanomatch');\nvar extglob = require('extglob');\nmodule.exports = function (snapdragon) {\n  var compilers = snapdragon.compiler.compilers;\n  var opts = snapdragon.options;\n\n  // register nanomatch compilers\n  snapdragon.use(nanomatch.compilers);\n\n  // get references to some specific nanomatch compilers before they\n  // are overridden by the extglob and/or custom compilers\n  var escape = compilers.escape;\n  var qmark = compilers.qmark;\n  var slash = compilers.slash;\n  var star = compilers.star;\n  var text = compilers.text;\n  var plus = compilers.plus;\n  var dot = compilers.dot;\n\n  // register extglob compilers or escape exglobs if disabled\n  if (opts.extglob === false || opts.noext === true) {\n    snapdragon.compiler.use(escapeExtglobs);\n  } else {\n    snapdragon.use(extglob.compilers);\n  }\n  snapdragon.use(function () {\n    this.options.star = this.options.star || function /*node*/\n    () {\n      return '[^\\\\\\\\/]*?';\n    };\n  });\n\n  // custom micromatch compilers\n  snapdragon.compiler\n\n  // reset referenced compiler\n  .set('dot', dot).set('escape', escape).set('plus', plus).set('slash', slash).set('qmark', qmark).set('star', star).set('text', text);\n};\nfunction escapeExtglobs(compiler) {\n  compiler.set('paren', function (node) {\n    var val = '';\n    visit(node, function (tok) {\n      if (tok.val) val += (/^\\W/.test(tok.val) ? '\\\\' : '') + tok.val;\n    });\n    return this.emit(val, node);\n  });\n\n  /**\n   * Visit `node` with the given `fn`\n   */\n\n  function visit(node, fn) {\n    return node.nodes ? mapVisit(node.nodes, fn) : fn(node);\n  }\n\n  /**\n   * Map visit over array of `nodes`.\n   */\n\n  function mapVisit(nodes, fn) {\n    var len = nodes.length;\n    var idx = -1;\n    while (++idx < len) {\n      visit(nodes[idx], fn);\n    }\n  }\n}","map":{"version":3,"names":["nanomatch","require","extglob","module","exports","snapdragon","compilers","compiler","opts","options","use","escape","qmark","slash","star","text","plus","dot","noext","escapeExtglobs","set","node","val","visit","tok","test","emit","fn","nodes","mapVisit","len","length","idx"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/micromatch/lib/compilers.js"],"sourcesContent":["'use strict';\n\nvar nanomatch = require('nanomatch');\nvar extglob = require('extglob');\n\nmodule.exports = function(snapdragon) {\n  var compilers = snapdragon.compiler.compilers;\n  var opts = snapdragon.options;\n\n  // register nanomatch compilers\n  snapdragon.use(nanomatch.compilers);\n\n  // get references to some specific nanomatch compilers before they\n  // are overridden by the extglob and/or custom compilers\n  var escape = compilers.escape;\n  var qmark = compilers.qmark;\n  var slash = compilers.slash;\n  var star = compilers.star;\n  var text = compilers.text;\n  var plus = compilers.plus;\n  var dot = compilers.dot;\n\n  // register extglob compilers or escape exglobs if disabled\n  if (opts.extglob === false || opts.noext === true) {\n    snapdragon.compiler.use(escapeExtglobs);\n  } else {\n    snapdragon.use(extglob.compilers);\n  }\n\n  snapdragon.use(function() {\n    this.options.star = this.options.star || function(/*node*/) {\n      return '[^\\\\\\\\/]*?';\n    };\n  });\n\n  // custom micromatch compilers\n  snapdragon.compiler\n\n    // reset referenced compiler\n    .set('dot', dot)\n    .set('escape', escape)\n    .set('plus', plus)\n    .set('slash', slash)\n    .set('qmark', qmark)\n    .set('star', star)\n    .set('text', text);\n};\n\nfunction escapeExtglobs(compiler) {\n  compiler.set('paren', function(node) {\n    var val = '';\n    visit(node, function(tok) {\n      if (tok.val) val += (/^\\W/.test(tok.val) ? '\\\\' : '') + tok.val;\n    });\n    return this.emit(val, node);\n  });\n\n  /**\n   * Visit `node` with the given `fn`\n   */\n\n  function visit(node, fn) {\n    return node.nodes ? mapVisit(node.nodes, fn) : fn(node);\n  }\n\n  /**\n   * Map visit over array of `nodes`.\n   */\n\n  function mapVisit(nodes, fn) {\n    var len = nodes.length;\n    var idx = -1;\n    while (++idx < len) {\n      visit(nodes[idx], fn);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}