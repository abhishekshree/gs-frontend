{"ast":null,"code":"'use strict';\n\nvar brackets = require('expand-brackets');\nvar define = require('define-property');\nvar utils = require('./utils');\n\n/**\n * Characters to use in text regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\nvar TEXT_REGEX = '([!@*?+]?\\\\(|\\\\)|[*?.+\\\\\\\\]|\\\\[:?(?=.*\\\\])|:?\\\\])+';\nvar not = utils.createRegex(TEXT_REGEX);\n\n/**\n * Extglob parsers\n */\n\nfunction parsers(extglob) {\n  extglob.state = extglob.state || {};\n\n  /**\n   * Use `expand-brackets` parsers\n   */\n\n  extglob.use(brackets.parsers);\n  extglob.parser.sets.paren = extglob.parser.sets.paren || [];\n  extglob.parser\n\n  /**\n   * Extglob open: \"*(\"\n   */.capture('paren.open', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^([!@*?+])?\\(/);\n    if (!m) return;\n    var prev = this.prev();\n    var prefix = m[1];\n    var val = m[0];\n    var open = pos({\n      type: 'paren.open',\n      parsed: parsed,\n      val: val\n    });\n    var node = pos({\n      type: 'paren',\n      prefix: prefix,\n      nodes: [open]\n    });\n\n    // if nested negation extglobs, just cancel them out to simplify\n    if (prefix === '!' && prev.type === 'paren' && prev.prefix === '!') {\n      prev.prefix = '@';\n      node.prefix = '@';\n    }\n    define(node, 'rest', this.input);\n    define(node, 'parsed', parsed);\n    define(node, 'parent', prev);\n    define(open, 'parent', node);\n    this.push('paren', node);\n    prev.nodes.push(node);\n  })\n\n  /**\n   * Extglob close: \")\"\n   */.capture('paren.close', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\)/);\n    if (!m) return;\n    var parent = this.pop('paren');\n    var node = pos({\n      type: 'paren.close',\n      rest: this.input,\n      parsed: parsed,\n      val: m[0]\n    });\n    if (!this.isType(parent, 'paren')) {\n      if (this.options.strict) {\n        throw new Error('missing opening paren: \"(\"');\n      }\n      node.escaped = true;\n      return node;\n    }\n    node.prefix = parent.prefix;\n    parent.nodes.push(node);\n    define(node, 'parent', parent);\n  })\n\n  /**\n   * Escape: \"\\\\.\"\n   */.capture('escape', function () {\n    var pos = this.position();\n    var m = this.match(/^\\\\(.)/);\n    if (!m) return;\n    return pos({\n      type: 'escape',\n      val: m[0],\n      ch: m[1]\n    });\n  })\n\n  /**\n   * Question marks: \"?\"\n   */.capture('qmark', function () {\n    var parsed = this.parsed;\n    var pos = this.position();\n    var m = this.match(/^\\?+(?!\\()/);\n    if (!m) return;\n    extglob.state.metachar = true;\n    return pos({\n      type: 'qmark',\n      rest: this.input,\n      parsed: parsed,\n      val: m[0]\n    });\n  })\n\n  /**\n   * Character parsers\n   */.capture('star', /^\\*(?!\\()/).capture('plus', /^\\+(?!\\()/).capture('dot', /^\\./).capture('text', not);\n}\n;\n\n/**\n * Expose text regex string\n */\n\nmodule.exports.TEXT_REGEX = TEXT_REGEX;\n\n/**\n * Extglob parsers\n */\n\nmodule.exports = parsers;","map":{"version":3,"names":["brackets","require","define","utils","TEXT_REGEX","not","createRegex","parsers","extglob","state","use","parser","sets","paren","capture","parsed","pos","position","m","match","prev","prefix","val","open","type","node","nodes","input","push","parent","pop","rest","isType","options","strict","Error","escaped","ch","metachar","module","exports"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/extglob/lib/parsers.js"],"sourcesContent":["'use strict';\n\nvar brackets = require('expand-brackets');\nvar define = require('define-property');\nvar utils = require('./utils');\n\n/**\n * Characters to use in text regex (we want to \"not\" match\n * characters that are matched by other parsers)\n */\n\nvar TEXT_REGEX = '([!@*?+]?\\\\(|\\\\)|[*?.+\\\\\\\\]|\\\\[:?(?=.*\\\\])|:?\\\\])+';\nvar not = utils.createRegex(TEXT_REGEX);\n\n/**\n * Extglob parsers\n */\n\nfunction parsers(extglob) {\n  extglob.state = extglob.state || {};\n\n  /**\n   * Use `expand-brackets` parsers\n   */\n\n  extglob.use(brackets.parsers);\n  extglob.parser.sets.paren = extglob.parser.sets.paren || [];\n  extglob.parser\n\n    /**\n     * Extglob open: \"*(\"\n     */\n\n    .capture('paren.open', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^([!@*?+])?\\(/);\n      if (!m) return;\n\n      var prev = this.prev();\n      var prefix = m[1];\n      var val = m[0];\n\n      var open = pos({\n        type: 'paren.open',\n        parsed: parsed,\n        val: val\n      });\n\n      var node = pos({\n        type: 'paren',\n        prefix: prefix,\n        nodes: [open]\n      });\n\n      // if nested negation extglobs, just cancel them out to simplify\n      if (prefix === '!' && prev.type === 'paren' && prev.prefix === '!') {\n        prev.prefix = '@';\n        node.prefix = '@';\n      }\n\n      define(node, 'rest', this.input);\n      define(node, 'parsed', parsed);\n      define(node, 'parent', prev);\n      define(open, 'parent', node);\n\n      this.push('paren', node);\n      prev.nodes.push(node);\n    })\n\n    /**\n     * Extglob close: \")\"\n     */\n\n    .capture('paren.close', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^\\)/);\n      if (!m) return;\n\n      var parent = this.pop('paren');\n      var node = pos({\n        type: 'paren.close',\n        rest: this.input,\n        parsed: parsed,\n        val: m[0]\n      });\n\n      if (!this.isType(parent, 'paren')) {\n        if (this.options.strict) {\n          throw new Error('missing opening paren: \"(\"');\n        }\n        node.escaped = true;\n        return node;\n      }\n\n      node.prefix = parent.prefix;\n      parent.nodes.push(node);\n      define(node, 'parent', parent);\n    })\n\n    /**\n     * Escape: \"\\\\.\"\n     */\n\n    .capture('escape', function() {\n      var pos = this.position();\n      var m = this.match(/^\\\\(.)/);\n      if (!m) return;\n\n      return pos({\n        type: 'escape',\n        val: m[0],\n        ch: m[1]\n      });\n    })\n\n    /**\n     * Question marks: \"?\"\n     */\n\n    .capture('qmark', function() {\n      var parsed = this.parsed;\n      var pos = this.position();\n      var m = this.match(/^\\?+(?!\\()/);\n      if (!m) return;\n      extglob.state.metachar = true;\n      return pos({\n        type: 'qmark',\n        rest: this.input,\n        parsed: parsed,\n        val: m[0]\n      });\n    })\n\n    /**\n     * Character parsers\n     */\n\n    .capture('star', /^\\*(?!\\()/)\n    .capture('plus', /^\\+(?!\\()/)\n    .capture('dot', /^\\./)\n    .capture('text', not);\n};\n\n/**\n * Expose text regex string\n */\n\nmodule.exports.TEXT_REGEX = TEXT_REGEX;\n\n/**\n * Extglob parsers\n */\n\nmodule.exports = parsers;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}