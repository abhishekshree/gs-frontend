{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n  return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);\n}\nSourceMapConsumer.fromSourceMap = function (aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n};\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this.__generatedMappings;\n  }\n});\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this.__originalMappings;\n  }\n});\nSourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n  var c = aStr.charAt(index);\n  return c === \";\" || c === \",\";\n};\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  throw new Error(\"Subclasses must implement _parseMappings\");\n};\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n  var context = aContext || null;\n  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n  var mappings;\n  switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n  }\n  var sourceRoot = this.sourceRoot;\n  mappings.map(function (mapping) {\n    var source = mapping.source === null ? null : this._sources.at(mapping.source);\n    if (source != null && sourceRoot != null) {\n      source = util.join(sourceRoot, source);\n    }\n    return {\n      source: source,\n      generatedLine: mapping.generatedLine,\n      generatedColumn: mapping.generatedColumn,\n      originalLine: mapping.originalLine,\n      originalColumn: mapping.originalColumn,\n      name: mapping.name === null ? null : this._names.at(mapping.name)\n    };\n  }, this).forEach(aCallback, context);\n};\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n  var line = util.getArg(aArgs, 'line');\n\n  // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n  // returns the index of the closest mapping less than the needle. By\n  // setting needle.originalColumn to 0, we thus find the last mapping for\n  // the given line, provided such a mapping exists.\n  var needle = {\n    source: util.getArg(aArgs, 'source'),\n    originalLine: line,\n    originalColumn: util.getArg(aArgs, 'column', 0)\n  };\n  if (this.sourceRoot != null) {\n    needle.source = util.relative(this.sourceRoot, needle.source);\n  }\n  if (!this._sources.has(needle.source)) {\n    return [];\n  }\n  needle.source = this._sources.indexOf(needle.source);\n  var mappings = [];\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n    if (aArgs.column === undefined) {\n      var originalLine = mapping.originalLine;\n\n      // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we found. Since\n      // mappings are sorted, this is guaranteed to find all mappings for\n      // the line we found.\n      while (mapping && mapping.originalLine === originalLine) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    } else {\n      var originalColumn = mapping.originalColumn;\n\n      // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we were searching for.\n      // Since mappings are sorted, this is guaranteed to find all mappings for\n      // the line we are searching for.\n      while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    }\n  }\n  return mappings;\n};\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n  sources = sources.map(String)\n  // Some source maps produce relative source paths like \"./foo.js\" instead of\n  // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n  // See bugzil.la/1090768.\n  .map(util.normalize)\n  // Always ensure that absolute sources are internally stored relative to\n  // the source root, if the source root is absolute. Not doing this would\n  // be particularly problematic when the source root is a prefix of the\n  // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n  .map(function (source) {\n    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n  });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {\n  var smc = Object.create(BasicSourceMapConsumer.prototype);\n  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n  smc.sourceRoot = aSourceMap._sourceRoot;\n  smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n  smc.file = aSourceMap._file;\n\n  // Because we are modifying the entries (by converting string sources and\n  // names to indices into the sources and names ArraySets), we have to make\n  // a copy of the entry or else bad things happen. Shared mutable state\n  // strikes again! See github issue #191.\n\n  var generatedMappings = aSourceMap._mappings.toArray().slice();\n  var destGeneratedMappings = smc.__generatedMappings = [];\n  var destOriginalMappings = smc.__originalMappings = [];\n  for (var i = 0, length = generatedMappings.length; i < length; i++) {\n    var srcMapping = generatedMappings[i];\n    var destMapping = new Mapping();\n    destMapping.generatedLine = srcMapping.generatedLine;\n    destMapping.generatedColumn = srcMapping.generatedColumn;\n    if (srcMapping.source) {\n      destMapping.source = sources.indexOf(srcMapping.source);\n      destMapping.originalLine = srcMapping.originalLine;\n      destMapping.originalColumn = srcMapping.originalColumn;\n      if (srcMapping.name) {\n        destMapping.name = names.indexOf(srcMapping.name);\n      }\n      destOriginalMappings.push(destMapping);\n    }\n    destGeneratedMappings.push(destMapping);\n  }\n  quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n  return smc;\n};\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  var generatedLine = 1;\n  var previousGeneratedColumn = 0;\n  var previousOriginalLine = 0;\n  var previousOriginalColumn = 0;\n  var previousSource = 0;\n  var previousName = 0;\n  var length = aStr.length;\n  var index = 0;\n  var cachedSegments = {};\n  var temp = {};\n  var originalMappings = [];\n  var generatedMappings = [];\n  var mapping, str, segment, end, value;\n  while (index < length) {\n    if (aStr.charAt(index) === ';') {\n      generatedLine++;\n      index++;\n      previousGeneratedColumn = 0;\n    } else if (aStr.charAt(index) === ',') {\n      index++;\n    } else {\n      mapping = new Mapping();\n      mapping.generatedLine = generatedLine;\n\n      // Because each offset is encoded relative to the previous one,\n      // many segments often have the same encoding. We can exploit this\n      // fact by caching the parsed variable length fields of each segment,\n      // allowing us to avoid a second parse if we encounter the same\n      // segment again.\n      for (end = index; end < length; end++) {\n        if (this._charIsMappingSeparator(aStr, end)) {\n          break;\n        }\n      }\n      str = aStr.slice(index, end);\n      segment = cachedSegments[str];\n      if (segment) {\n        index += str.length;\n      } else {\n        segment = [];\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n        cachedSegments[str] = segment;\n      }\n\n      // Generated column.\n      mapping.generatedColumn = previousGeneratedColumn + segment[0];\n      previousGeneratedColumn = mapping.generatedColumn;\n      if (segment.length > 1) {\n        // Original source.\n        mapping.source = previousSource + segment[1];\n        previousSource += segment[1];\n\n        // Original line.\n        mapping.originalLine = previousOriginalLine + segment[2];\n        previousOriginalLine = mapping.originalLine;\n        // Lines are stored 0-based\n        mapping.originalLine += 1;\n\n        // Original column.\n        mapping.originalColumn = previousOriginalColumn + segment[3];\n        previousOriginalColumn = mapping.originalColumn;\n        if (segment.length > 4) {\n          // Original name.\n          mapping.name = previousName + segment[4];\n          previousName += segment[4];\n        }\n      }\n      generatedMappings.push(mapping);\n      if (typeof mapping.originalLine === 'number') {\n        originalMappings.push(mapping);\n      }\n    }\n  }\n  quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n  this.__generatedMappings = generatedMappings;\n  quickSort(originalMappings, util.compareByOriginalPositions);\n  this.__originalMappings = originalMappings;\n};\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n  // To return the position we are searching for, we must first find the\n  // mapping for the given position and then return the opposite position it\n  // points to. Because the mappings are sorted, we can use binary search to\n  // find the best mapping.\n\n  if (aNeedle[aLineName] <= 0) {\n    throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);\n  }\n  if (aNeedle[aColumnName] < 0) {\n    throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);\n  }\n  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n};\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n  for (var index = 0; index < this._generatedMappings.length; ++index) {\n    var mapping = this._generatedMappings[index];\n\n    // Mappings do not contain a field for the last generated columnt. We\n    // can come up with an optimistic estimate, however, by assuming that\n    // mappings are contiguous (i.e. given two consecutive mappings, the\n    // first mapping ends where the second one starts).\n    if (index + 1 < this._generatedMappings.length) {\n      var nextMapping = this._generatedMappings[index + 1];\n      if (mapping.generatedLine === nextMapping.generatedLine) {\n        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n        continue;\n      }\n    }\n\n    // The last mapping for each line spans the entire line.\n    mapping.lastGeneratedColumn = Infinity;\n  }\n};\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n  var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n  if (index >= 0) {\n    var mapping = this._generatedMappings[index];\n    if (mapping.generatedLine === needle.generatedLine) {\n      var source = util.getArg(mapping, 'source', null);\n      if (source !== null) {\n        source = this._sources.at(source);\n        if (this.sourceRoot != null) {\n          source = util.join(this.sourceRoot, source);\n        }\n      }\n      var name = util.getArg(mapping, 'name', null);\n      if (name !== null) {\n        name = this._names.at(name);\n      }\n      return {\n        source: source,\n        line: util.getArg(mapping, 'originalLine', null),\n        column: util.getArg(mapping, 'originalColumn', null),\n        name: name\n      };\n    }\n  }\n  return {\n    source: null,\n    line: null,\n    column: null,\n    name: null\n  };\n};\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n  if (!this.sourcesContent) {\n    return false;\n  }\n  return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n    return sc == null;\n  });\n};\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  if (!this.sourcesContent) {\n    return null;\n  }\n  if (this.sourceRoot != null) {\n    aSource = util.relative(this.sourceRoot, aSource);\n  }\n  if (this._sources.has(aSource)) {\n    return this.sourcesContent[this._sources.indexOf(aSource)];\n  }\n  var url;\n  if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n    // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n    // many users. We can help them out when they expect file:// URIs to\n    // behave like it would if they were running a local HTTP server. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n    var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n    if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n    }\n    if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + aSource)) {\n      return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n    }\n  }\n\n  // This function is used recursively from\n  // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n  // don't want to throw if we can't find the source - we just want to\n  // return null, so we provide a flag to exit gracefully.\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n};\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n  var source = util.getArg(aArgs, 'source');\n  if (this.sourceRoot != null) {\n    source = util.relative(this.sourceRoot, source);\n  }\n  if (!this._sources.has(source)) {\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n  source = this._sources.indexOf(source);\n  var needle = {\n    source: source,\n    originalLine: util.getArg(aArgs, 'line'),\n    originalColumn: util.getArg(aArgs, 'column')\n  };\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n    if (mapping.source === needle.source) {\n      return {\n        line: util.getArg(mapping, 'generatedLine', null),\n        column: util.getArg(mapping, 'generatedColumn', null),\n        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n      };\n    }\n  }\n  return {\n    line: null,\n    column: null,\n    lastColumn: null\n  };\n};\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    };\n  });\n}\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n\n  // Find the section containing the generated position we're trying to map\n  // to an original position.\n  var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {\n    var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n    if (cmp) {\n      return cmp;\n    }\n    return needle.generatedColumn - section.generatedOffset.generatedColumn;\n  });\n  var section = this._sections[sectionIndex];\n  if (!section) {\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n  return section.consumer.originalPositionFor({\n    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n    column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n    bias: aArgs.bias\n  });\n};\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n  return this._sections.every(function (s) {\n    return s.consumer.hasContentsOfAllSources();\n  });\n};\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var content = section.consumer.sourceContentFor(aSource, true);\n    if (content) {\n      return content;\n    }\n  }\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n};\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n\n    // Only consider this section if the requested source is in the list of\n    // sources of the consumer.\n    if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n      continue;\n    }\n    var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n    if (generatedPosition) {\n      var ret = {\n        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n      };\n      return ret;\n    }\n  }\n  return {\n    line: null,\n    column: null\n  };\n};\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  this.__generatedMappings = [];\n  this.__originalMappings = [];\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var sectionMappings = section.consumer._generatedMappings;\n    for (var j = 0; j < sectionMappings.length; j++) {\n      var mapping = sectionMappings[j];\n      var source = section.consumer._sources.at(mapping.source);\n      if (section.consumer.sourceRoot !== null) {\n        source = util.join(section.consumer.sourceRoot, source);\n      }\n      this._sources.add(source);\n      source = this._sources.indexOf(source);\n      var name = section.consumer._names.at(mapping.name);\n      this._names.add(name);\n      name = this._names.indexOf(name);\n\n      // The mappings coming from the consumer for the section have\n      // generated positions relative to the start of the section, so we\n      // need to offset them to be relative to the start of the concatenated\n      // generated file.\n      var adjustedMapping = {\n        source: source,\n        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: name\n      };\n      this.__generatedMappings.push(adjustedMapping);\n      if (typeof adjustedMapping.originalLine === 'number') {\n        this.__originalMappings.push(adjustedMapping);\n      }\n    }\n  }\n  quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n  quickSort(this.__originalMappings, util.compareByOriginalPositions);\n};\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;","map":{"version":3,"names":["util","require","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","sourceMap","JSON","parse","replace","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","prototype","_version","__generatedMappings","Object","defineProperty","get","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","SourceMapConsumer_charIsMappingSeparator","aStr","index","c","charAt","SourceMapConsumer_parseMappings","aSourceRoot","Error","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","SourceMapConsumer_eachMapping","aCallback","aContext","aOrder","context","order","mappings","_generatedMappings","_originalMappings","map","mapping","source","_sources","at","join","generatedLine","generatedColumn","originalLine","originalColumn","name","_names","forEach","allGeneratedPositionsFor","SourceMapConsumer_allGeneratedPositionsFor","aArgs","line","getArg","needle","relative","has","indexOf","_findMapping","compareByOriginalPositions","column","undefined","push","lastColumn","exports","version","sources","names","sourcesContent","file","String","normalize","isAbsolute","fromArray","create","consumer","SourceMapConsumer_fromSourceMap","smc","toArray","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","i","length","srcMapping","destMapping","Mapping","s","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","str","segment","end","value","decode","rest","compareByGeneratedPositionsDeflated","SourceMapConsumer_findMapping","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","SourceMapConsumer_computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","SourceMapConsumer_originalPositionFor","hasContentsOfAllSources","BasicSourceMapConsumer_hasContentsOfAllSources","size","some","sc","sourceContentFor","SourceMapConsumer_sourceContentFor","aSource","nullOnMissing","url","urlParse","fileUriAbsPath","scheme","path","generatedPositionFor","SourceMapConsumer_generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","j","IndexedSourceMapConsumer_originalPositionFor","sectionIndex","section","cmp","bias","IndexedSourceMapConsumer_hasContentsOfAllSources","every","IndexedSourceMapConsumer_sourceContentFor","content","IndexedSourceMapConsumer_generatedPositionFor","generatedPosition","ret","IndexedSourceMapConsumer_parseMappings","sectionMappings","add","adjustedMapping"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/snapdragon/node_modules/source-map/lib/source-map-consumer.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}