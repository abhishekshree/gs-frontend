{"ast":null,"code":"import _objectSpread from \"/home/krishnansh/Documents/WebDev/PS/tom-tom-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/krishnansh/Documents/WebDev/PS/tom-tom-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/krishnansh/Documents/WebDev/PS/tom-tom-app/src/Map.js\";\nimport React from 'react';\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport * as ttservices from \"@tomtom-international/web-sdk-services\";\nimport tt from \"@tomtom-international/web-sdk-maps\";\nimport { useEffect, useState, useRef } from \"react\";\n// import { fromSeconds } from \"from-seconds\";\nimport { api_key } from \"./constants.js\";\nfunction Map(_ref) {\n  var destinations = _ref.destinations,\n    zoom_level = _ref.zoom_level,\n    travel_mode = _ref.travel_mode;\n  var mapElement = useRef();\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    map = _useState2[0],\n    setMap = _useState2[1];\n  var _useState3 = useState(destinations),\n    _useState4 = _slicedToArray(_useState3, 2),\n    waypoints = _useState4[0],\n    setWayPoints = _useState4[1];\n  function create_marker(location) {\n    console.log(location);\n    var marker_el = document.createElement(\"div\");\n    marker_el.className = 'marker-delivery';\n    // const popup = new tt.Popup({ offset: 20 }).setText(location.name);\n    var marker = new tt.Marker({\n      element: marker_el,\n      anchor: \"bottom\"\n    }).setLngLat([location.lng, location.lat]).addTo(map);\n    return marker;\n  }\n  var URL = \"https://api.tomtom.com/routing/waypointoptimization/1?key=\".concat(api_key);\n  var optimize_routes = function optimize_routes() {\n    var data = {\n      waypoints: waypoints.map(function (location) {\n        return {\n          point: {\n            latitude: location.lat,\n            longitude: location.lng\n          }\n        };\n      }),\n      options: {\n        travelMode: travel_mode,\n        vehicleMaxSpeed: 0,\n        vehicleCommercial: true,\n        vehicleLoadType: [\"otherHazmatGeneral\"],\n        traffic: \"live\",\n        departAt: \"now\",\n        outputExtensions: [\"travelTimes\", \"routeLengths\"],\n        waypointConstraints: {\n          originIndex: 0,\n          destinationIndex: 0\n        }\n      }\n    };\n    fetch(URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json;charset=UTF-8\"\n      },\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var optimized_locations = data.summary.legSummaries.map(function (summary) {\n        return _objectSpread({}, waypoints[summary.originIndex], summary);\n      });\n      console.log(optimized_locations);\n      optimized_locations.forEach(function (location, index) {\n        var start_time = new Date(location.departureTime).toLocaleString();\n        var arrival_time = new Date(location.arrivalTime).toLocaleString();\n        var distance_in_seconds = location.travelTimeInSeconds;\n        var start_at = location.originIndex;\n        var end_at = location.destinationIndex;\n        var popup = new tt.Popup({\n          offset: 50\n        }).setHTML(\"<div class=\\\"popup\\\">\\n                  <h1>Location \".concat(index, \"</h1>\\n                  <br />\\n                  <p>Current Point: \").concat(waypoints[start_at].name, \"</p>\\n                  <p>Departure Time: \").concat(start_time, \"</p>\\n                  <p>Next Stop: \").concat(waypoints[end_at].name, \"</p>\\n                  <p>Arrival Time:  \").concat(arrival_time, \"<p>\\n                  <p>Distance To next stop:  \").concat(location.lengthInMeters / 1000, \"(km)</p>\\n                  <p>Estimated Time To next stop:  \").concat(distance_in_seconds.hours, \" Hours, \").concat(distance_in_seconds.minutes, \" Minutes</p>\\n                  </div> \"));\n        create_marker(location).setPopup(popup);\n      });\n      create_route(optimized_locations);\n    });\n  };\n  var create_route = function create_route(locations) {\n    ttservices.services.calculateRoute({\n      key: api_key,\n      locations: locations\n    }).then(function (routeData) {\n      var features = routeData.toGeoJson().features;\n      features.forEach(function (feature, index) {\n        map.addLayer({\n          id: \"route\" + index,\n          type: \"line\",\n          source: {\n            type: \"geojson\",\n            data: feature\n          },\n          paint: {\n            \"line-color\": \"red\",\n            \"line-opacity\": 0.8,\n            \"line-width\": 6,\n            \"line-dasharray\": [1, 0, 1, 0]\n          }\n        });\n      });\n    });\n  };\n  useEffect(function () {\n    var map = tt.map({\n      key: api_key,\n      container: mapElement.current,\n      center: [77.5747463, 12.9140182],\n      zoom: zoom_level\n    });\n    map.addControl(new tt.FullscreenControl());\n    map.addControl(new tt.NavigationControl());\n    setMap(map);\n    return function () {\n      return map.remove();\n    };\n  }, []);\n  useEffect(function () {\n    if (map) {\n      map.on(\"load\", function () {\n        for (var d in waypoints) {\n          create_marker(waypoints[d], map);\n        }\n        var pts_covered = 0;\n        while (pts_covered < waypoints.length) {\n          create_route(waypoints.slice(pts_covered, Math.min(pts_covered + 150, waypoints.length)));\n          pts_covered += 150;\n        }\n      });\n    }\n  }, [map]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map_wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: mapElement,\n    className: \"mapDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }));\n}\nexport default Map;","map":{"version":3,"names":["React","ttservices","tt","useEffect","useState","useRef","api_key","Map","destinations","zoom_level","travel_mode","mapElement","map","setMap","waypoints","setWayPoints","create_marker","location","console","log","marker_el","document","createElement","className","marker","Marker","element","anchor","setLngLat","lng","lat","addTo","URL","optimize_routes","data","point","latitude","longitude","options","travelMode","vehicleMaxSpeed","vehicleCommercial","vehicleLoadType","traffic","departAt","outputExtensions","waypointConstraints","originIndex","destinationIndex","fetch","method","headers","body","JSON","stringify","then","response","json","optimized_locations","summary","legSummaries","forEach","index","start_time","Date","departureTime","toLocaleString","arrival_time","arrivalTime","distance_in_seconds","travelTimeInSeconds","start_at","end_at","popup","Popup","offset","setHTML","name","lengthInMeters","hours","minutes","setPopup","create_route","locations","services","calculateRoute","key","routeData","features","toGeoJson","feature","addLayer","id","type","source","paint","container","current","center","zoom","addControl","FullscreenControl","NavigationControl","remove","on","d","pts_covered","length","slice","Math","min"],"sources":["/home/krishnansh/Documents/WebDev/PS/tom-tom-app/src/Map.js"],"sourcesContent":["import React from 'react'\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport * as ttservices from \"@tomtom-international/web-sdk-services\";\nimport tt from \"@tomtom-international/web-sdk-maps\";\nimport { useEffect, useState, useRef } from \"react\";\n// import { fromSeconds } from \"from-seconds\";\nimport { api_key } from \"./constants.js\"\n\nfunction Map({ destinations, zoom_level, travel_mode }) {\n\n    const mapElement = useRef();\n    const [map, setMap] = useState(null);\n    const [waypoints,setWayPoints] = useState(destinations);\n\n    function create_marker(location) {\n        console.log(location);\n        const marker_el = document.createElement(\"div\");\n        marker_el.className = 'marker-delivery';\n        // const popup = new tt.Popup({ offset: 20 }).setText(location.name);\n        const marker = new tt.Marker({ element: marker_el, anchor: \"bottom\" })\n        .setLngLat([location.lng, location.lat])\n        .addTo(map);\n\n        return marker;\n    }\n    let URL = `https://api.tomtom.com/routing/waypointoptimization/1?key=${api_key}`;\n    const optimize_routes = () => {\n        const data = {\n            waypoints: waypoints.map((location) => {\n                return {\n                point: {\n                    latitude: location.lat,\n                    longitude: location.lng,\n                },\n                };\n            }),\n            options: {\n                travelMode: travel_mode,\n                vehicleMaxSpeed: 0,\n                vehicleCommercial: true,\n                vehicleLoadType: [\"otherHazmatGeneral\"],\n                traffic: \"live\",\n                departAt: \"now\",\n                outputExtensions: [\"travelTimes\", \"routeLengths\"],\n                waypointConstraints: {\n                originIndex: 0,\n                destinationIndex: 0,\n                },\n            },\n        };\n        fetch(URL, {\n        method: \"POST\",\n        headers: { \"Content-type\": \"application/json;charset=UTF-8\" },\n        body: JSON.stringify(data),\n        })\n        .then((response) => response.json())\n        .then((data) => {\n            const optimized_locations = data.summary.legSummaries.map((summary) => {\n                return { ...waypoints[summary.originIndex], ...summary };\n            });\n            console.log(optimized_locations);\n            optimized_locations.forEach((location, index) => {\n                const start_time = new Date(location.departureTime).toLocaleString();\n                const arrival_time = new Date(location.arrivalTime).toLocaleString();\n                const distance_in_seconds = location.travelTimeInSeconds\n                const start_at = location.originIndex;\n                const end_at = location.destinationIndex;\n                const popup = new tt.Popup({ offset: 50 }).setHTML(\n                  `<div class=\"popup\">\n                  <h1>Location ${index}</h1>\n                  <br />\n                  <p>Current Point: ${waypoints[start_at].name}</p>\n                  <p>Departure Time: ${start_time}</p>\n                  <p>Next Stop: ${waypoints[end_at].name}</p>\n                  <p>Arrival Time:  ${arrival_time}<p>\n                  <p>Distance To next stop:  ${location.lengthInMeters / 1000}(km)</p>\n                  <p>Estimated Time To next stop:  ${\n                    distance_in_seconds.hours\n                  } Hours, ${distance_in_seconds.minutes} Minutes</p>\n                  </div> `\n                );\n                create_marker(location).setPopup(popup);\n            })\n            create_route(optimized_locations);\n        })\n    };\n\n    const create_route = (locations) => {\n        ttservices.services\n            .calculateRoute({\n            key: api_key,\n            locations,\n            })\n            .then((routeData) => {\n            const features = routeData.toGeoJson().features;\n            features.forEach((feature, index) => {\n                map.addLayer({\n                id: \"route\" + index,\n                type: \"line\",\n                source: {\n                    type: \"geojson\",\n                    data: feature,\n                },\n                paint: {\n                    \"line-color\": `red`,\n                    \"line-opacity\": 0.8,\n                    \"line-width\": 6,\n                    \"line-dasharray\": [1, 0, 1, 0],\n                }\n                });\n            });\n            });\n    };\n\n    useEffect(() => {\n        let map = tt.map({\n        key: api_key,\n        container: mapElement.current,\n        center: [77.5747463,12.9140182],\n        zoom: zoom_level,\n        });\n        map.addControl(new tt.FullscreenControl());\n        map.addControl(new tt.NavigationControl());\n        setMap(map);\n        return () => map.remove();\n    }, []);\n    \n    useEffect(() => {\n        if (map) {\n          map.on(\"load\", () => {\n            for (let d in waypoints) {\n                create_marker(waypoints[d],map);\n            }\n            let pts_covered = 0;\n            while(pts_covered<waypoints.length){\n                create_route(waypoints.slice(pts_covered,Math.min(pts_covered+150,waypoints.length)))\n                pts_covered+=150\n            }\n          });\n        }\n      }, [map]);\n\n    return (\n      <div className=\"map_wrapper\">\n        <div ref={mapElement} className=\"mapDiv\" />\n      </div>\n    );\n  }\n  export default Map;"],"mappings":"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"},"metadata":{},"sourceType":"module"}