{"ast":null,"code":"'use strict';\n\nvar fo = require('../../file-operations');\nvar readStream = require('../../src/read-contents/read-stream');\nfunction writeStream(file, optResolver, onWritten) {\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file)\n  });\n  var opt = {\n    mode: file.stat.mode,\n    // TODO: need to test this\n    flags: flags\n  };\n\n  // TODO: is this the best API?\n  var outStream = fo.createWriteStream(file.path, opt, onFlush);\n  file.contents.once('error', onComplete);\n  outStream.once('error', onComplete);\n  outStream.once('finish', onComplete);\n\n  // TODO: should this use a clone?\n  file.contents.pipe(outStream);\n  function onComplete(streamErr) {\n    // Cleanup event handlers before closing\n    file.contents.removeListener('error', onComplete);\n    outStream.removeListener('error', onComplete);\n    outStream.removeListener('finish', onComplete);\n\n    // Need to guarantee the fd is closed before forwarding the error\n    outStream.once('close', onClose);\n    outStream.end();\n    function onClose(closeErr) {\n      onWritten(streamErr || closeErr);\n    }\n  }\n\n  // Cleanup\n  function onFlush(fd, callback) {\n    // TODO: removing this before readStream because it replaces the stream\n    file.contents.removeListener('error', onComplete);\n\n    // TODO: this is doing sync stuff & the callback seems unnecessary\n    // TODO: Replace the contents stream or use a clone?\n    readStream(file, complete);\n    function complete() {\n      if (typeof fd !== 'number') {\n        return callback();\n      }\n      fo.updateMetadata(fd, file, callback);\n    }\n  }\n}\nmodule.exports = writeStream;","map":{"version":3,"names":["fo","require","readStream","writeStream","file","optResolver","onWritten","flags","getFlags","overwrite","resolve","append","opt","mode","stat","outStream","createWriteStream","path","onFlush","contents","once","onComplete","pipe","streamErr","removeListener","onClose","end","closeErr","fd","callback","complete","updateMetadata","module","exports"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/vinyl-fs/lib/dest/write-contents/write-stream.js"],"sourcesContent":["'use strict';\n\nvar fo = require('../../file-operations');\nvar readStream = require('../../src/read-contents/read-stream');\n\nfunction writeStream(file, optResolver, onWritten) {\n  var flags = fo.getFlags({\n    overwrite: optResolver.resolve('overwrite', file),\n    append: optResolver.resolve('append', file),\n  });\n  var opt = {\n    mode: file.stat.mode,\n    // TODO: need to test this\n    flags: flags,\n  };\n\n  // TODO: is this the best API?\n  var outStream = fo.createWriteStream(file.path, opt, onFlush);\n\n  file.contents.once('error', onComplete);\n  outStream.once('error', onComplete);\n  outStream.once('finish', onComplete);\n\n  // TODO: should this use a clone?\n  file.contents.pipe(outStream);\n\n  function onComplete(streamErr) {\n    // Cleanup event handlers before closing\n    file.contents.removeListener('error', onComplete);\n    outStream.removeListener('error', onComplete);\n    outStream.removeListener('finish', onComplete);\n\n    // Need to guarantee the fd is closed before forwarding the error\n    outStream.once('close', onClose);\n    outStream.end();\n\n    function onClose(closeErr) {\n      onWritten(streamErr || closeErr);\n    }\n  }\n\n  // Cleanup\n  function onFlush(fd, callback) {\n    // TODO: removing this before readStream because it replaces the stream\n    file.contents.removeListener('error', onComplete);\n\n    // TODO: this is doing sync stuff & the callback seems unnecessary\n    // TODO: Replace the contents stream or use a clone?\n    readStream(file, complete);\n\n    function complete() {\n      if (typeof fd !== 'number') {\n        return callback();\n      }\n\n      fo.updateMetadata(fd, file, callback);\n    }\n  }\n\n}\n\nmodule.exports = writeStream;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,EAAE,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACzC,IAAIC,UAAU,GAAGD,OAAO,CAAC,qCAAqC,CAAC;AAE/D,SAASE,WAAW,CAACC,IAAI,EAAEC,WAAW,EAAEC,SAAS,EAAE;EACjD,IAAIC,KAAK,GAAGP,EAAE,CAACQ,QAAQ,CAAC;IACtBC,SAAS,EAAEJ,WAAW,CAACK,OAAO,CAAC,WAAW,EAAEN,IAAI,CAAC;IACjDO,MAAM,EAAEN,WAAW,CAACK,OAAO,CAAC,QAAQ,EAAEN,IAAI;EAC5C,CAAC,CAAC;EACF,IAAIQ,GAAG,GAAG;IACRC,IAAI,EAAET,IAAI,CAACU,IAAI,CAACD,IAAI;IACpB;IACAN,KAAK,EAAEA;EACT,CAAC;;EAED;EACA,IAAIQ,SAAS,GAAGf,EAAE,CAACgB,iBAAiB,CAACZ,IAAI,CAACa,IAAI,EAAEL,GAAG,EAAEM,OAAO,CAAC;EAE7Dd,IAAI,CAACe,QAAQ,CAACC,IAAI,CAAC,OAAO,EAAEC,UAAU,CAAC;EACvCN,SAAS,CAACK,IAAI,CAAC,OAAO,EAAEC,UAAU,CAAC;EACnCN,SAAS,CAACK,IAAI,CAAC,QAAQ,EAAEC,UAAU,CAAC;;EAEpC;EACAjB,IAAI,CAACe,QAAQ,CAACG,IAAI,CAACP,SAAS,CAAC;EAE7B,SAASM,UAAU,CAACE,SAAS,EAAE;IAC7B;IACAnB,IAAI,CAACe,QAAQ,CAACK,cAAc,CAAC,OAAO,EAAEH,UAAU,CAAC;IACjDN,SAAS,CAACS,cAAc,CAAC,OAAO,EAAEH,UAAU,CAAC;IAC7CN,SAAS,CAACS,cAAc,CAAC,QAAQ,EAAEH,UAAU,CAAC;;IAE9C;IACAN,SAAS,CAACK,IAAI,CAAC,OAAO,EAAEK,OAAO,CAAC;IAChCV,SAAS,CAACW,GAAG,EAAE;IAEf,SAASD,OAAO,CAACE,QAAQ,EAAE;MACzBrB,SAAS,CAACiB,SAAS,IAAII,QAAQ,CAAC;IAClC;EACF;;EAEA;EACA,SAAST,OAAO,CAACU,EAAE,EAAEC,QAAQ,EAAE;IAC7B;IACAzB,IAAI,CAACe,QAAQ,CAACK,cAAc,CAAC,OAAO,EAAEH,UAAU,CAAC;;IAEjD;IACA;IACAnB,UAAU,CAACE,IAAI,EAAE0B,QAAQ,CAAC;IAE1B,SAASA,QAAQ,GAAG;MAClB,IAAI,OAAOF,EAAE,KAAK,QAAQ,EAAE;QAC1B,OAAOC,QAAQ,EAAE;MACnB;MAEA7B,EAAE,CAAC+B,cAAc,CAACH,EAAE,EAAExB,IAAI,EAAEyB,QAAQ,CAAC;IACvC;EACF;AAEF;AAEAG,MAAM,CAACC,OAAO,GAAG9B,WAAW"},"metadata":{},"sourceType":"script"}