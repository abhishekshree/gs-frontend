{"ast":null,"code":"/*!\n * copy-descriptor <https://github.com/jonschlinkert/copy-descriptor>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Copy a descriptor from one object to another.\n *\n * ```js\n * function App() {\n *   this.cache = {};\n * }\n * App.prototype.set = function(key, val) {\n *   this.cache[key] = val;\n *   return this;\n * };\n * Object.defineProperty(App.prototype, 'count', {\n *   get: function() {\n *     return Object.keys(this.cache).length;\n *   }\n * });\n *\n * copy(App.prototype, 'count', 'len');\n *\n * // create an instance\n * var app = new App();\n *\n * app.set('a', true);\n * app.set('b', true);\n * app.set('c', true);\n *\n * console.log(app.count);\n * //=> 3\n * console.log(app.len);\n * //=> 3\n * ```\n * @name copy\n * @param {Object} `receiver` The target object\n * @param {Object} `provider` The provider object\n * @param {String} `from` The key to copy on provider.\n * @param {String} `to` Optionally specify a new key name to use.\n * @return {Object}\n * @api public\n */\nmodule.exports = function copyDescriptor(receiver, provider, from, to) {\n  if (!isObject(provider) && typeof provider !== 'function') {\n    to = from;\n    from = provider;\n    provider = receiver;\n  }\n  if (!isObject(receiver) && typeof receiver !== 'function') {\n    throw new TypeError('expected the first argument to be an object');\n  }\n  if (!isObject(provider) && typeof provider !== 'function') {\n    throw new TypeError('expected provider to be an object');\n  }\n  if (typeof to !== 'string') {\n    to = from;\n  }\n  if (typeof from !== 'string') {\n    throw new TypeError('expected key to be a string');\n  }\n  if (!(from in provider)) {\n    throw new Error('property \"' + from + '\" does not exist');\n  }\n  var val = Object.getOwnPropertyDescriptor(provider, from);\n  if (val) Object.defineProperty(receiver, to, val);\n};\nfunction isObject(val) {\n  return {}.toString.call(val) === '[object Object]';\n}","map":{"version":3,"names":["module","exports","copyDescriptor","receiver","provider","from","to","isObject","TypeError","Error","val","Object","getOwnPropertyDescriptor","defineProperty","toString","call"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/copy-descriptor/index.js"],"sourcesContent":["/*!\n * copy-descriptor <https://github.com/jonschlinkert/copy-descriptor>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Copy a descriptor from one object to another.\n *\n * ```js\n * function App() {\n *   this.cache = {};\n * }\n * App.prototype.set = function(key, val) {\n *   this.cache[key] = val;\n *   return this;\n * };\n * Object.defineProperty(App.prototype, 'count', {\n *   get: function() {\n *     return Object.keys(this.cache).length;\n *   }\n * });\n *\n * copy(App.prototype, 'count', 'len');\n *\n * // create an instance\n * var app = new App();\n *\n * app.set('a', true);\n * app.set('b', true);\n * app.set('c', true);\n *\n * console.log(app.count);\n * //=> 3\n * console.log(app.len);\n * //=> 3\n * ```\n * @name copy\n * @param {Object} `receiver` The target object\n * @param {Object} `provider` The provider object\n * @param {String} `from` The key to copy on provider.\n * @param {String} `to` Optionally specify a new key name to use.\n * @return {Object}\n * @api public\n */\n\nmodule.exports = function copyDescriptor(receiver, provider, from, to) {\n  if (!isObject(provider) && typeof provider !== 'function') {\n    to = from;\n    from = provider;\n    provider = receiver;\n  }\n  if (!isObject(receiver) && typeof receiver !== 'function') {\n    throw new TypeError('expected the first argument to be an object');\n  }\n  if (!isObject(provider) && typeof provider !== 'function') {\n    throw new TypeError('expected provider to be an object');\n  }\n\n  if (typeof to !== 'string') {\n    to = from;\n  }\n  if (typeof from !== 'string') {\n    throw new TypeError('expected key to be a string');\n  }\n\n  if (!(from in provider)) {\n    throw new Error('property \"' + from + '\" does not exist');\n  }\n\n  var val = Object.getOwnPropertyDescriptor(provider, from);\n  if (val) Object.defineProperty(receiver, to, val);\n};\n\nfunction isObject(val) {\n  return {}.toString.call(val) === '[object Object]';\n}\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAO,GAAG,SAASC,cAAc,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,EAAE,EAAE;EACrE,IAAI,CAACC,QAAQ,CAACH,QAAQ,CAAC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IACzDE,EAAE,GAAGD,IAAI;IACTA,IAAI,GAAGD,QAAQ;IACfA,QAAQ,GAAGD,QAAQ;EACrB;EACA,IAAI,CAACI,QAAQ,CAACJ,QAAQ,CAAC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IACzD,MAAM,IAAIK,SAAS,CAAC,6CAA6C,CAAC;EACpE;EACA,IAAI,CAACD,QAAQ,CAACH,QAAQ,CAAC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IACzD,MAAM,IAAII,SAAS,CAAC,mCAAmC,CAAC;EAC1D;EAEA,IAAI,OAAOF,EAAE,KAAK,QAAQ,EAAE;IAC1BA,EAAE,GAAGD,IAAI;EACX;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIG,SAAS,CAAC,6BAA6B,CAAC;EACpD;EAEA,IAAI,EAAEH,IAAI,IAAID,QAAQ,CAAC,EAAE;IACvB,MAAM,IAAIK,KAAK,CAAC,YAAY,GAAGJ,IAAI,GAAG,kBAAkB,CAAC;EAC3D;EAEA,IAAIK,GAAG,GAAGC,MAAM,CAACC,wBAAwB,CAACR,QAAQ,EAAEC,IAAI,CAAC;EACzD,IAAIK,GAAG,EAAEC,MAAM,CAACE,cAAc,CAACV,QAAQ,EAAEG,EAAE,EAAEI,GAAG,CAAC;AACnD,CAAC;AAED,SAASH,QAAQ,CAACG,GAAG,EAAE;EACrB,OAAO,CAAC,CAAC,CAACI,QAAQ,CAACC,IAAI,CAACL,GAAG,CAAC,KAAK,iBAAiB;AACpD"},"metadata":{},"sourceType":"script"}