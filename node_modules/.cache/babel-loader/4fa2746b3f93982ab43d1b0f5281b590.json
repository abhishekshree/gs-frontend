{"ast":null,"code":"'use strict';\n\nvar assert = require('assert');\nvar filter = require('arr-filter');\nvar map = require('arr-map');\nvar flatten = require('arr-flatten');\nvar forEach = require('array-each');\nfunction noop() {}\nfunction getExtensions(lastArg) {\n  if (typeof lastArg !== 'function') {\n    return lastArg;\n  }\n}\nfunction filterSuccess(elem) {\n  return elem.state === 'success';\n}\nfunction filterError(elem) {\n  return elem.state === 'error';\n}\nfunction buildOnSettled(done) {\n  if (typeof done !== 'function') {\n    done = noop;\n  }\n  function onSettled(error, result) {\n    if (error) {\n      return done(error, null);\n    }\n    var settledErrors = filter(result, filterError);\n    var settledResults = filter(result, filterSuccess);\n    var errors = null;\n    if (settledErrors.length) {\n      errors = map(settledErrors, 'value');\n    }\n    var results = null;\n    if (settledResults.length) {\n      results = map(settledResults, 'value');\n    }\n    done(errors, results);\n  }\n  return onSettled;\n}\nfunction verifyArguments(args) {\n  args = flatten(args);\n  var lastIdx = args.length - 1;\n  assert.ok(args.length, 'A set of functions to combine is required');\n  forEach(args, function (arg, argIdx) {\n    var isFunction = typeof arg === 'function';\n    if (isFunction) {\n      return;\n    }\n    if (argIdx === lastIdx) {\n      // Last arg can be an object of extension points\n      return;\n    }\n    var msg = 'Only functions can be combined, got ' + typeof arg + ' for argument ' + argIdx;\n    assert.ok(isFunction, msg);\n  });\n  return args;\n}\nmodule.exports = {\n  getExtensions: getExtensions,\n  onSettled: buildOnSettled,\n  verifyArguments: verifyArguments\n};","map":{"version":3,"names":["assert","require","filter","map","flatten","forEach","noop","getExtensions","lastArg","filterSuccess","elem","state","filterError","buildOnSettled","done","onSettled","error","result","settledErrors","settledResults","errors","length","results","verifyArguments","args","lastIdx","ok","arg","argIdx","isFunction","msg","module","exports"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/bach/lib/helpers.js"],"sourcesContent":["'use strict';\n\nvar assert = require('assert');\n\nvar filter = require('arr-filter');\nvar map = require('arr-map');\nvar flatten = require('arr-flatten');\nvar forEach = require('array-each');\n\nfunction noop() {}\n\nfunction getExtensions(lastArg) {\n  if (typeof lastArg !== 'function') {\n    return lastArg;\n  }\n}\n\nfunction filterSuccess(elem) {\n  return elem.state === 'success';\n}\n\nfunction filterError(elem) {\n  return elem.state === 'error';\n}\n\nfunction buildOnSettled(done) {\n  if (typeof done !== 'function') {\n    done = noop;\n  }\n\n  function onSettled(error, result) {\n    if (error) {\n      return done(error, null);\n    }\n\n    var settledErrors = filter(result, filterError);\n    var settledResults = filter(result, filterSuccess);\n\n    var errors = null;\n    if (settledErrors.length) {\n      errors = map(settledErrors, 'value');\n    }\n\n    var results = null;\n    if (settledResults.length) {\n      results = map(settledResults, 'value');\n    }\n\n    done(errors, results);\n  }\n\n  return onSettled;\n}\n\nfunction verifyArguments(args) {\n  args = flatten(args);\n  var lastIdx = args.length - 1;\n\n  assert.ok(args.length, 'A set of functions to combine is required');\n\n  forEach(args, function(arg, argIdx) {\n    var isFunction = typeof arg === 'function';\n    if (isFunction) {\n      return;\n    }\n\n    if (argIdx === lastIdx) {\n      // Last arg can be an object of extension points\n      return;\n    }\n\n    var msg = 'Only functions can be combined, got ' + typeof arg +\n      ' for argument ' + argIdx;\n    assert.ok(isFunction, msg);\n  });\n\n  return args;\n}\n\nmodule.exports = {\n  getExtensions: getExtensions,\n  onSettled: buildOnSettled,\n  verifyArguments: verifyArguments,\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9B,IAAIC,MAAM,GAAGD,OAAO,CAAC,YAAY,CAAC;AAClC,IAAIE,GAAG,GAAGF,OAAO,CAAC,SAAS,CAAC;AAC5B,IAAIG,OAAO,GAAGH,OAAO,CAAC,aAAa,CAAC;AACpC,IAAII,OAAO,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAEnC,SAASK,IAAI,GAAG,CAAC;AAEjB,SAASC,aAAa,CAACC,OAAO,EAAE;EAC9B,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;IACjC,OAAOA,OAAO;EAChB;AACF;AAEA,SAASC,aAAa,CAACC,IAAI,EAAE;EAC3B,OAAOA,IAAI,CAACC,KAAK,KAAK,SAAS;AACjC;AAEA,SAASC,WAAW,CAACF,IAAI,EAAE;EACzB,OAAOA,IAAI,CAACC,KAAK,KAAK,OAAO;AAC/B;AAEA,SAASE,cAAc,CAACC,IAAI,EAAE;EAC5B,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;IAC9BA,IAAI,GAAGR,IAAI;EACb;EAEA,SAASS,SAAS,CAACC,KAAK,EAAEC,MAAM,EAAE;IAChC,IAAID,KAAK,EAAE;MACT,OAAOF,IAAI,CAACE,KAAK,EAAE,IAAI,CAAC;IAC1B;IAEA,IAAIE,aAAa,GAAGhB,MAAM,CAACe,MAAM,EAAEL,WAAW,CAAC;IAC/C,IAAIO,cAAc,GAAGjB,MAAM,CAACe,MAAM,EAAER,aAAa,CAAC;IAElD,IAAIW,MAAM,GAAG,IAAI;IACjB,IAAIF,aAAa,CAACG,MAAM,EAAE;MACxBD,MAAM,GAAGjB,GAAG,CAACe,aAAa,EAAE,OAAO,CAAC;IACtC;IAEA,IAAII,OAAO,GAAG,IAAI;IAClB,IAAIH,cAAc,CAACE,MAAM,EAAE;MACzBC,OAAO,GAAGnB,GAAG,CAACgB,cAAc,EAAE,OAAO,CAAC;IACxC;IAEAL,IAAI,CAACM,MAAM,EAAEE,OAAO,CAAC;EACvB;EAEA,OAAOP,SAAS;AAClB;AAEA,SAASQ,eAAe,CAACC,IAAI,EAAE;EAC7BA,IAAI,GAAGpB,OAAO,CAACoB,IAAI,CAAC;EACpB,IAAIC,OAAO,GAAGD,IAAI,CAACH,MAAM,GAAG,CAAC;EAE7BrB,MAAM,CAAC0B,EAAE,CAACF,IAAI,CAACH,MAAM,EAAE,2CAA2C,CAAC;EAEnEhB,OAAO,CAACmB,IAAI,EAAE,UAASG,GAAG,EAAEC,MAAM,EAAE;IAClC,IAAIC,UAAU,GAAG,OAAOF,GAAG,KAAK,UAAU;IAC1C,IAAIE,UAAU,EAAE;MACd;IACF;IAEA,IAAID,MAAM,KAAKH,OAAO,EAAE;MACtB;MACA;IACF;IAEA,IAAIK,GAAG,GAAG,sCAAsC,GAAG,OAAOH,GAAG,GAC3D,gBAAgB,GAAGC,MAAM;IAC3B5B,MAAM,CAAC0B,EAAE,CAACG,UAAU,EAAEC,GAAG,CAAC;EAC5B,CAAC,CAAC;EAEF,OAAON,IAAI;AACb;AAEAO,MAAM,CAACC,OAAO,GAAG;EACfzB,aAAa,EAAEA,aAAa;EAC5BQ,SAAS,EAAEF,cAAc;EACzBU,eAAe,EAAEA;AACnB,CAAC"},"metadata":{},"sourceType":"script"}