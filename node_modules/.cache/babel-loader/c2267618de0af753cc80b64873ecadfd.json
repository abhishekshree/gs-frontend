{"ast":null,"code":"'use strict';\n\n/**\n * Module dependencies\n */\nvar Snapdragon = require('snapdragon');\nvar define = require('define-property');\nvar extend = require('extend-shallow');\n\n/**\n * Local dependencies\n */\n\nvar compilers = require('./compilers');\nvar parsers = require('./parsers');\n\n/**\n * Customize Snapdragon parser and renderer\n */\n\nfunction Extglob(options) {\n  this.options = extend({\n    source: 'extglob'\n  }, options);\n  this.snapdragon = this.options.snapdragon || new Snapdragon(this.options);\n  this.snapdragon.patterns = this.snapdragon.patterns || {};\n  this.compiler = this.snapdragon.compiler;\n  this.parser = this.snapdragon.parser;\n  compilers(this.snapdragon);\n  parsers(this.snapdragon);\n\n  /**\n   * Override Snapdragon `.parse` method\n   */\n\n  define(this.snapdragon, 'parse', function (str, options) {\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\n    parsed.input = str;\n\n    // escape unmatched brace/bracket/parens\n    var last = this.parser.stack.pop();\n    if (last && this.options.strict !== true) {\n      var node = last.nodes[0];\n      node.val = '\\\\' + node.val;\n      var sibling = node.parent.nodes[1];\n      if (sibling.type === 'star') {\n        sibling.loose = true;\n      }\n    }\n\n    // add non-enumerable parser reference\n    define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n\n  /**\n   * Decorate `.parse` method\n   */\n\n  define(this, 'parse', function (ast, options) {\n    return this.snapdragon.parse.apply(this.snapdragon, arguments);\n  });\n\n  /**\n   * Decorate `.compile` method\n   */\n\n  define(this, 'compile', function (ast, options) {\n    return this.snapdragon.compile.apply(this.snapdragon, arguments);\n  });\n}\n\n/**\n * Expose `Extglob`\n */\n\nmodule.exports = Extglob;","map":{"version":3,"names":["Snapdragon","require","define","extend","compilers","parsers","Extglob","options","source","snapdragon","patterns","compiler","parser","str","parsed","prototype","parse","apply","arguments","input","last","stack","pop","strict","node","nodes","val","sibling","parent","type","loose","ast","compile","module","exports"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/extglob/lib/extglob.js"],"sourcesContent":["'use strict';\n\n/**\n * Module dependencies\n */\n\nvar Snapdragon = require('snapdragon');\nvar define = require('define-property');\nvar extend = require('extend-shallow');\n\n/**\n * Local dependencies\n */\n\nvar compilers = require('./compilers');\nvar parsers = require('./parsers');\n\n/**\n * Customize Snapdragon parser and renderer\n */\n\nfunction Extglob(options) {\n  this.options = extend({source: 'extglob'}, options);\n  this.snapdragon = this.options.snapdragon || new Snapdragon(this.options);\n  this.snapdragon.patterns = this.snapdragon.patterns || {};\n  this.compiler = this.snapdragon.compiler;\n  this.parser = this.snapdragon.parser;\n\n  compilers(this.snapdragon);\n  parsers(this.snapdragon);\n\n  /**\n   * Override Snapdragon `.parse` method\n   */\n\n  define(this.snapdragon, 'parse', function(str, options) {\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\n    parsed.input = str;\n\n    // escape unmatched brace/bracket/parens\n    var last = this.parser.stack.pop();\n    if (last && this.options.strict !== true) {\n      var node = last.nodes[0];\n      node.val = '\\\\' + node.val;\n      var sibling = node.parent.nodes[1];\n      if (sibling.type === 'star') {\n        sibling.loose = true;\n      }\n    }\n\n    // add non-enumerable parser reference\n    define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n\n  /**\n   * Decorate `.parse` method\n   */\n\n  define(this, 'parse', function(ast, options) {\n    return this.snapdragon.parse.apply(this.snapdragon, arguments);\n  });\n\n  /**\n   * Decorate `.compile` method\n   */\n\n  define(this, 'compile', function(ast, options) {\n    return this.snapdragon.compile.apply(this.snapdragon, arguments);\n  });\n\n}\n\n/**\n * Expose `Extglob`\n */\n\nmodule.exports = Extglob;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACtC,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACvC,IAAIE,MAAM,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAEtC;AACA;AACA;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAa,CAAC;AACtC,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAW,CAAC;;AAElC;AACA;AACA;;AAEA,SAASK,OAAO,CAACC,OAAO,EAAE;EACxB,IAAI,CAACA,OAAO,GAAGJ,MAAM,CAAC;IAACK,MAAM,EAAE;EAAS,CAAC,EAAED,OAAO,CAAC;EACnD,IAAI,CAACE,UAAU,GAAG,IAAI,CAACF,OAAO,CAACE,UAAU,IAAI,IAAIT,UAAU,CAAC,IAAI,CAACO,OAAO,CAAC;EACzE,IAAI,CAACE,UAAU,CAACC,QAAQ,GAAG,IAAI,CAACD,UAAU,CAACC,QAAQ,IAAI,CAAC,CAAC;EACzD,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACF,UAAU,CAACE,QAAQ;EACxC,IAAI,CAACC,MAAM,GAAG,IAAI,CAACH,UAAU,CAACG,MAAM;EAEpCR,SAAS,CAAC,IAAI,CAACK,UAAU,CAAC;EAC1BJ,OAAO,CAAC,IAAI,CAACI,UAAU,CAAC;;EAExB;AACF;AACA;;EAEEP,MAAM,CAAC,IAAI,CAACO,UAAU,EAAE,OAAO,EAAE,UAASI,GAAG,EAAEN,OAAO,EAAE;IACtD,IAAIO,MAAM,GAAGd,UAAU,CAACe,SAAS,CAACC,KAAK,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC9DJ,MAAM,CAACK,KAAK,GAAGN,GAAG;;IAElB;IACA,IAAIO,IAAI,GAAG,IAAI,CAACR,MAAM,CAACS,KAAK,CAACC,GAAG,EAAE;IAClC,IAAIF,IAAI,IAAI,IAAI,CAACb,OAAO,CAACgB,MAAM,KAAK,IAAI,EAAE;MACxC,IAAIC,IAAI,GAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC;MACxBD,IAAI,CAACE,GAAG,GAAG,IAAI,GAAGF,IAAI,CAACE,GAAG;MAC1B,IAAIC,OAAO,GAAGH,IAAI,CAACI,MAAM,CAACH,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIE,OAAO,CAACE,IAAI,KAAK,MAAM,EAAE;QAC3BF,OAAO,CAACG,KAAK,GAAG,IAAI;MACtB;IACF;;IAEA;IACA5B,MAAM,CAACY,MAAM,EAAE,QAAQ,EAAE,IAAI,CAACF,MAAM,CAAC;IACrC,OAAOE,MAAM;EACf,CAAC,CAAC;;EAEF;AACF;AACA;;EAEEZ,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,UAAS6B,GAAG,EAAExB,OAAO,EAAE;IAC3C,OAAO,IAAI,CAACE,UAAU,CAACO,KAAK,CAACC,KAAK,CAAC,IAAI,CAACR,UAAU,EAAES,SAAS,CAAC;EAChE,CAAC,CAAC;;EAEF;AACF;AACA;;EAEEhB,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,UAAS6B,GAAG,EAAExB,OAAO,EAAE;IAC7C,OAAO,IAAI,CAACE,UAAU,CAACuB,OAAO,CAACf,KAAK,CAAC,IAAI,CAACR,UAAU,EAAES,SAAS,CAAC;EAClE,CAAC,CAAC;AAEJ;;AAEA;AACA;AACA;;AAEAe,MAAM,CAACC,OAAO,GAAG5B,OAAO"},"metadata":{},"sourceType":"script"}