{"ast":null,"code":"'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\nvar fs = require('fs');\nvar sysPath = require('path');\nvar asyncEach = require('async-each');\nvar anymatch = require('anymatch');\nvar globParent = require('glob-parent');\nvar isGlob = require('is-glob');\nvar isAbsolute = require('path-is-absolute');\nvar inherits = require('inherits');\nvar braces = require('braces');\nvar normalizePath = require('normalize-path');\nvar upath = require('upath');\nvar NodeFsHandler = require('./lib/nodefs-handler');\nvar FsEventsHandler = require('./lib/fsevents-handler');\nvar arrify = function (value) {\n  if (value == null) return [];\n  return Array.isArray(value) ? value : [value];\n};\nvar flatten = function (list, result) {\n  if (result == null) result = [];\n  list.forEach(function (item) {\n    if (Array.isArray(item)) {\n      flatten(item, result);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n// Little isString util for use in Array#every.\nvar isString = function (thing) {\n  return typeof thing === 'string';\n};\n\n// Public: Main class.\n// Watches files & directories for changes.\n//\n// * _opts - object, chokidar options hash\n//\n// Emitted events:\n// `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`\n//\n// Examples\n//\n//  var watcher = new FSWatcher()\n//    .add(directories)\n//    .on('add', path => console.log('File', path, 'was added'))\n//    .on('change', path => console.log('File', path, 'was changed'))\n//    .on('unlink', path => console.log('File', path, 'was removed'))\n//    .on('all', (event, path) => console.log(path, ' emitted ', event))\n//\nfunction FSWatcher(_opts) {\n  EventEmitter.call(this);\n  var opts = {};\n  // in case _opts that is passed in is a frozen object\n  if (_opts) for (var opt in _opts) opts[opt] = _opts[opt];\n  this._watched = Object.create(null);\n  this._closers = Object.create(null);\n  this._ignoredPaths = Object.create(null);\n  Object.defineProperty(this, '_globIgnored', {\n    get: function () {\n      return Object.keys(this._ignoredPaths);\n    }\n  });\n  this.closed = false;\n  this._throttled = Object.create(null);\n  this._symlinkPaths = Object.create(null);\n  function undef(key) {\n    return opts[key] === undefined;\n  }\n\n  // Set up default options.\n  if (undef('persistent')) opts.persistent = true;\n  if (undef('ignoreInitial')) opts.ignoreInitial = false;\n  if (undef('ignorePermissionErrors')) opts.ignorePermissionErrors = false;\n  if (undef('interval')) opts.interval = 100;\n  if (undef('binaryInterval')) opts.binaryInterval = 300;\n  if (undef('disableGlobbing')) opts.disableGlobbing = false;\n  this.enableBinaryInterval = opts.binaryInterval !== opts.interval;\n\n  // Enable fsevents on OS X when polling isn't explicitly enabled.\n  if (undef('useFsEvents')) opts.useFsEvents = !opts.usePolling;\n\n  // If we can't use fsevents, ensure the options reflect it's disabled.\n  if (!FsEventsHandler.canUse()) opts.useFsEvents = false;\n\n  // Use polling on Mac if not using fsevents.\n  // Other platforms use non-polling fs.watch.\n  if (undef('usePolling') && !opts.useFsEvents) {\n    opts.usePolling = process.platform === 'darwin';\n  }\n\n  // Global override (useful for end-developers that need to force polling for all\n  // instances of chokidar, regardless of usage/dependency depth)\n  var envPoll = process.env.CHOKIDAR_USEPOLLING;\n  if (envPoll !== undefined) {\n    var envLower = envPoll.toLowerCase();\n    if (envLower === 'false' || envLower === '0') {\n      opts.usePolling = false;\n    } else if (envLower === 'true' || envLower === '1') {\n      opts.usePolling = true;\n    } else {\n      opts.usePolling = !!envLower;\n    }\n  }\n  var envInterval = process.env.CHOKIDAR_INTERVAL;\n  if (envInterval) {\n    opts.interval = parseInt(envInterval);\n  }\n\n  // Editor atomic write normalization enabled by default with fs.watch\n  if (undef('atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;\n  if (opts.atomic) this._pendingUnlinks = Object.create(null);\n  if (undef('followSymlinks')) opts.followSymlinks = true;\n  if (undef('awaitWriteFinish')) opts.awaitWriteFinish = false;\n  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};\n  var awf = opts.awaitWriteFinish;\n  if (awf) {\n    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;\n    if (!awf.pollInterval) awf.pollInterval = 100;\n    this._pendingWrites = Object.create(null);\n  }\n  if (opts.ignored) opts.ignored = arrify(opts.ignored);\n  this._isntIgnored = function (path, stat) {\n    return !this._isIgnored(path, stat);\n  }.bind(this);\n  var readyCalls = 0;\n  this._emitReady = function () {\n    if (++readyCalls >= this._readyCount) {\n      this._emitReady = Function.prototype;\n      this._readyEmitted = true;\n      // use process.nextTick to allow time for listener to be bound\n      process.nextTick(this.emit.bind(this, 'ready'));\n    }\n  }.bind(this);\n  this.options = opts;\n\n  // You’re frozen when your heart’s not open.\n  Object.freeze(opts);\n}\ninherits(FSWatcher, EventEmitter);\n\n// Common helpers\n// --------------\n\n// Private method: Normalize and emit events\n//\n// * event     - string, type of event\n// * path      - string, file or directory path\n// * val[1..3] - arguments to be passed with event\n//\n// Returns the error if defined, otherwise the value of the\n// FSWatcher instance's `closed` flag\nFSWatcher.prototype._emit = function (event, path, val1, val2, val3) {\n  if (this.options.cwd) path = sysPath.relative(this.options.cwd, path);\n  var args = [event, path];\n  if (val3 !== undefined) args.push(val1, val2, val3);else if (val2 !== undefined) args.push(val1, val2);else if (val1 !== undefined) args.push(val1);\n  var awf = this.options.awaitWriteFinish;\n  if (awf && this._pendingWrites[path]) {\n    this._pendingWrites[path].lastChange = new Date();\n    return this;\n  }\n  if (this.options.atomic) {\n    if (event === 'unlink') {\n      this._pendingUnlinks[path] = args;\n      setTimeout(function () {\n        Object.keys(this._pendingUnlinks).forEach(function (path) {\n          this.emit.apply(this, this._pendingUnlinks[path]);\n          this.emit.apply(this, ['all'].concat(this._pendingUnlinks[path]));\n          delete this._pendingUnlinks[path];\n        }.bind(this));\n      }.bind(this), typeof this.options.atomic === \"number\" ? this.options.atomic : 100);\n      return this;\n    } else if (event === 'add' && this._pendingUnlinks[path]) {\n      event = args[0] = 'change';\n      delete this._pendingUnlinks[path];\n    }\n  }\n  var emitEvent = function () {\n    this.emit.apply(this, args);\n    if (event !== 'error') this.emit.apply(this, ['all'].concat(args));\n  }.bind(this);\n  if (awf && (event === 'add' || event === 'change') && this._readyEmitted) {\n    var awfEmit = function (err, stats) {\n      if (err) {\n        event = args[0] = 'error';\n        args[1] = err;\n        emitEvent();\n      } else if (stats) {\n        // if stats doesn't exist the file must have been deleted\n        if (args.length > 2) {\n          args[2] = stats;\n        } else {\n          args.push(stats);\n        }\n        emitEvent();\n      }\n    };\n    this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);\n    return this;\n  }\n  if (event === 'change') {\n    if (!this._throttle('change', path, 50)) return this;\n  }\n  if (this.options.alwaysStat && val1 === undefined && (event === 'add' || event === 'addDir' || event === 'change')) {\n    var fullPath = this.options.cwd ? sysPath.join(this.options.cwd, path) : path;\n    fs.stat(fullPath, function (error, stats) {\n      // Suppress event when fs.stat fails, to avoid sending undefined 'stat'\n      if (error || !stats) return;\n      args.push(stats);\n      emitEvent();\n    });\n  } else {\n    emitEvent();\n  }\n  return this;\n};\n\n// Private method: Common handler for errors\n//\n// * error  - object, Error instance\n//\n// Returns the error if defined, otherwise the value of the\n// FSWatcher instance's `closed` flag\nFSWatcher.prototype._handleError = function (error) {\n  var code = error && error.code;\n  var ipe = this.options.ignorePermissionErrors;\n  if (error && code !== 'ENOENT' && code !== 'ENOTDIR' && (!ipe || code !== 'EPERM' && code !== 'EACCES')) this.emit('error', error);\n  return error || this.closed;\n};\n\n// Private method: Helper utility for throttling\n//\n// * action  - string, type of action being throttled\n// * path    - string, path being acted upon\n// * timeout - int, duration of time to suppress duplicate actions\n//\n// Returns throttle tracking object or false if action should be suppressed\nFSWatcher.prototype._throttle = function (action, path, timeout) {\n  if (!(action in this._throttled)) {\n    this._throttled[action] = Object.create(null);\n  }\n  var throttled = this._throttled[action];\n  if (path in throttled) {\n    throttled[path].count++;\n    return false;\n  }\n  function clear() {\n    var count = throttled[path] ? throttled[path].count : 0;\n    delete throttled[path];\n    clearTimeout(timeoutObject);\n    return count;\n  }\n  var timeoutObject = setTimeout(clear, timeout);\n  throttled[path] = {\n    timeoutObject: timeoutObject,\n    clear: clear,\n    count: 0\n  };\n  return throttled[path];\n};\n\n// Private method: Awaits write operation to finish\n//\n// * path    - string, path being acted upon\n// * threshold - int, time in milliseconds a file size must be fixed before\n//                    acknowledging write operation is finished\n// * awfEmit - function, to be called when ready for event to be emitted\n// Polls a newly created file for size variations. When files size does not\n// change for 'threshold' milliseconds calls callback.\nFSWatcher.prototype._awaitWriteFinish = function (path, threshold, event, awfEmit) {\n  var timeoutHandler;\n  var fullPath = path;\n  if (this.options.cwd && !isAbsolute(path)) {\n    fullPath = sysPath.join(this.options.cwd, path);\n  }\n  var now = new Date();\n  var awaitWriteFinish = function (prevStat) {\n    fs.stat(fullPath, function (err, curStat) {\n      if (err || !(path in this._pendingWrites)) {\n        if (err && err.code !== 'ENOENT') awfEmit(err);\n        return;\n      }\n      var now = new Date();\n      if (prevStat && curStat.size != prevStat.size) {\n        this._pendingWrites[path].lastChange = now;\n      }\n      if (now - this._pendingWrites[path].lastChange >= threshold) {\n        delete this._pendingWrites[path];\n        awfEmit(null, curStat);\n      } else {\n        timeoutHandler = setTimeout(awaitWriteFinish.bind(this, curStat), this.options.awaitWriteFinish.pollInterval);\n      }\n    }.bind(this));\n  }.bind(this);\n  if (!(path in this._pendingWrites)) {\n    this._pendingWrites[path] = {\n      lastChange: now,\n      cancelWait: function () {\n        delete this._pendingWrites[path];\n        clearTimeout(timeoutHandler);\n        return event;\n      }.bind(this)\n    };\n    timeoutHandler = setTimeout(awaitWriteFinish.bind(this), this.options.awaitWriteFinish.pollInterval);\n  }\n};\n\n// Private method: Determines whether user has asked to ignore this path\n//\n// * path  - string, path to file or directory\n// * stats - object, result of fs.stat\n//\n// Returns boolean\nvar dotRe = /\\..*\\.(sw[px])$|\\~$|\\.subl.*\\.tmp/;\nFSWatcher.prototype._isIgnored = function (path, stats) {\n  if (this.options.atomic && dotRe.test(path)) return true;\n  if (!this._userIgnored) {\n    var cwd = this.options.cwd;\n    var ignored = this.options.ignored;\n    if (cwd && ignored) {\n      ignored = ignored.map(function (path) {\n        if (typeof path !== 'string') return path;\n        return upath.normalize(isAbsolute(path) ? path : sysPath.join(cwd, path));\n      });\n    }\n    var paths = arrify(ignored).filter(function (path) {\n      return typeof path === 'string' && !isGlob(path);\n    }).map(function (path) {\n      return path + '/**';\n    });\n    this._userIgnored = anymatch(this._globIgnored.concat(ignored).concat(paths));\n  }\n  return this._userIgnored([path, stats]);\n};\n\n// Private method: Provides a set of common helpers and properties relating to\n// symlink and glob handling\n//\n// * path - string, file, directory, or glob pattern being watched\n// * depth - int, at any depth > 0, this isn't a glob\n//\n// Returns object containing helpers for this path\nvar replacerRe = /^\\.[\\/\\\\]/;\nFSWatcher.prototype._getWatchHelpers = function (path, depth) {\n  path = path.replace(replacerRe, '');\n  var watchPath = depth || this.options.disableGlobbing || !isGlob(path) ? path : globParent(path);\n  var fullWatchPath = sysPath.resolve(watchPath);\n  var hasGlob = watchPath !== path;\n  var globFilter = hasGlob ? anymatch(path) : false;\n  var follow = this.options.followSymlinks;\n  var globSymlink = hasGlob && follow ? null : false;\n  var checkGlobSymlink = function (entry) {\n    // only need to resolve once\n    // first entry should always have entry.parentDir === ''\n    if (globSymlink == null) {\n      globSymlink = entry.fullParentDir === fullWatchPath ? false : {\n        realPath: entry.fullParentDir,\n        linkPath: fullWatchPath\n      };\n    }\n    if (globSymlink) {\n      return entry.fullPath.replace(globSymlink.realPath, globSymlink.linkPath);\n    }\n    return entry.fullPath;\n  };\n  var entryPath = function (entry) {\n    return sysPath.join(watchPath, sysPath.relative(watchPath, checkGlobSymlink(entry)));\n  };\n  var filterPath = function (entry) {\n    if (entry.stat && entry.stat.isSymbolicLink()) return filterDir(entry);\n    var resolvedPath = entryPath(entry);\n    return (!hasGlob || globFilter(resolvedPath)) && this._isntIgnored(resolvedPath, entry.stat) && (this.options.ignorePermissionErrors || this._hasReadPermissions(entry.stat));\n  }.bind(this);\n  var getDirParts = function (path) {\n    if (!hasGlob) return false;\n    var parts = [];\n    var expandedPath = braces.expand(path);\n    expandedPath.forEach(function (path) {\n      parts.push(sysPath.relative(watchPath, path).split(/[\\/\\\\]/));\n    });\n    return parts;\n  };\n  var dirParts = getDirParts(path);\n  if (dirParts) {\n    dirParts.forEach(function (parts) {\n      if (parts.length > 1) parts.pop();\n    });\n  }\n  var unmatchedGlob;\n  var filterDir = function (entry) {\n    if (hasGlob) {\n      var entryParts = getDirParts(checkGlobSymlink(entry));\n      var globstar = false;\n      unmatchedGlob = !dirParts.some(function (parts) {\n        return parts.every(function (part, i) {\n          if (part === '**') globstar = true;\n          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i]);\n        });\n      });\n    }\n    return !unmatchedGlob && this._isntIgnored(entryPath(entry), entry.stat);\n  }.bind(this);\n  return {\n    followSymlinks: follow,\n    statMethod: follow ? 'stat' : 'lstat',\n    path: path,\n    watchPath: watchPath,\n    entryPath: entryPath,\n    hasGlob: hasGlob,\n    globFilter: globFilter,\n    filterPath: filterPath,\n    filterDir: filterDir\n  };\n};\n\n// Directory helpers\n// -----------------\n\n// Private method: Provides directory tracking objects\n//\n// * directory - string, path of the directory\n//\n// Returns the directory's tracking object\nFSWatcher.prototype._getWatchedDir = function (directory) {\n  var dir = sysPath.resolve(directory);\n  var watcherRemove = this._remove.bind(this);\n  if (!(dir in this._watched)) this._watched[dir] = {\n    _items: Object.create(null),\n    add: function (item) {\n      if (item !== '.' && item !== '..') this._items[item] = true;\n    },\n    remove: function (item) {\n      delete this._items[item];\n      if (!this.children().length) {\n        fs.readdir(dir, function (err) {\n          if (err) watcherRemove(sysPath.dirname(dir), sysPath.basename(dir));\n        });\n      }\n    },\n    has: function (item) {\n      return item in this._items;\n    },\n    children: function () {\n      return Object.keys(this._items);\n    }\n  };\n  return this._watched[dir];\n};\n\n// File helpers\n// ------------\n\n// Private method: Check for read permissions\n// Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405\n//\n// * stats - object, result of fs.stat\n//\n// Returns boolean\nFSWatcher.prototype._hasReadPermissions = function (stats) {\n  return Boolean(4 & parseInt(((stats && stats.mode) & 0x1ff).toString(8)[0], 10));\n};\n\n// Private method: Handles emitting unlink events for\n// files and directories, and via recursion, for\n// files and directories within directories that are unlinked\n//\n// * directory - string, directory within which the following item is located\n// * item      - string, base path of item/directory\n//\n// Returns nothing\nFSWatcher.prototype._remove = function (directory, item) {\n  // if what is being deleted is a directory, get that directory's paths\n  // for recursive deleting and cleaning of watched object\n  // if it is not a directory, nestedDirectoryChildren will be empty array\n  var path = sysPath.join(directory, item);\n  var fullPath = sysPath.resolve(path);\n  var isDirectory = this._watched[path] || this._watched[fullPath];\n\n  // prevent duplicate handling in case of arriving here nearly simultaneously\n  // via multiple paths (such as _handleFile and _handleDir)\n  if (!this._throttle('remove', path, 100)) return;\n\n  // if the only watched file is removed, watch for its return\n  var watchedDirs = Object.keys(this._watched);\n  if (!isDirectory && !this.options.useFsEvents && watchedDirs.length === 1) {\n    this.add(directory, item, true);\n  }\n\n  // This will create a new entry in the watched object in either case\n  // so we got to do the directory check beforehand\n  var nestedDirectoryChildren = this._getWatchedDir(path).children();\n\n  // Recursively remove children directories / files.\n  nestedDirectoryChildren.forEach(function (nestedItem) {\n    this._remove(path, nestedItem);\n  }, this);\n\n  // Check if item was on the watched list and remove it\n  var parent = this._getWatchedDir(directory);\n  var wasTracked = parent.has(item);\n  parent.remove(item);\n\n  // If we wait for this file to be fully written, cancel the wait.\n  var relPath = path;\n  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);\n  if (this.options.awaitWriteFinish && this._pendingWrites[relPath]) {\n    var event = this._pendingWrites[relPath].cancelWait();\n    if (event === 'add') return;\n  }\n\n  // The Entry will either be a directory that just got removed\n  // or a bogus entry to a file, in either case we have to remove it\n  delete this._watched[path];\n  delete this._watched[fullPath];\n  var eventName = isDirectory ? 'unlinkDir' : 'unlink';\n  if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);\n\n  // Avoid conflicts if we later create another file with the same name\n  if (!this.options.useFsEvents) {\n    this._closePath(path);\n  }\n};\nFSWatcher.prototype._closePath = function (path) {\n  if (!this._closers[path]) return;\n  this._closers[path].forEach(function (closer) {\n    closer();\n  });\n  delete this._closers[path];\n  this._getWatchedDir(sysPath.dirname(path)).remove(sysPath.basename(path));\n};\n\n// Public method: Adds paths to be watched on an existing FSWatcher instance\n\n// * paths     - string or array of strings, file/directory paths and/or globs\n// * _origAdd  - private boolean, for handling non-existent paths to be watched\n// * _internal - private boolean, indicates a non-user add\n\n// Returns an instance of FSWatcher for chaining.\nFSWatcher.prototype.add = function (paths, _origAdd, _internal) {\n  var disableGlobbing = this.options.disableGlobbing;\n  var cwd = this.options.cwd;\n  this.closed = false;\n  paths = flatten(arrify(paths));\n  if (!paths.every(isString)) {\n    throw new TypeError('Non-string provided as watch path: ' + paths);\n  }\n  if (cwd) paths = paths.map(function (path) {\n    var absPath;\n    if (isAbsolute(path)) {\n      absPath = path;\n    } else if (path[0] === '!') {\n      absPath = '!' + sysPath.join(cwd, path.substring(1));\n    } else {\n      absPath = sysPath.join(cwd, path);\n    }\n\n    // Check `path` instead of `absPath` because the cwd portion can't be a glob\n    if (disableGlobbing || !isGlob(path)) {\n      return absPath;\n    } else {\n      return normalizePath(absPath);\n    }\n  });\n\n  // set aside negated glob strings\n  paths = paths.filter(function (path) {\n    if (path[0] === '!') {\n      this._ignoredPaths[path.substring(1)] = true;\n    } else {\n      // if a path is being added that was previously ignored, stop ignoring it\n      delete this._ignoredPaths[path];\n      delete this._ignoredPaths[path + '/**'];\n\n      // reset the cached userIgnored anymatch fn\n      // to make ignoredPaths changes effective\n      this._userIgnored = null;\n      return true;\n    }\n  }, this);\n  if (this.options.useFsEvents && FsEventsHandler.canUse()) {\n    if (!this._readyCount) this._readyCount = paths.length;\n    if (this.options.persistent) this._readyCount *= 2;\n    paths.forEach(this._addToFsEvents, this);\n  } else {\n    if (!this._readyCount) this._readyCount = 0;\n    this._readyCount += paths.length;\n    asyncEach(paths, function (path, next) {\n      this._addToNodeFs(path, !_internal, 0, 0, _origAdd, function (err, res) {\n        if (res) this._emitReady();\n        next(err, res);\n      }.bind(this));\n    }.bind(this), function (error, results) {\n      results.forEach(function (item) {\n        if (!item || this.closed) return;\n        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));\n      }, this);\n    }.bind(this));\n  }\n  return this;\n};\n\n// Public method: Close watchers or start ignoring events from specified paths.\n\n// * paths     - string or array of strings, file/directory paths and/or globs\n\n// Returns instance of FSWatcher for chaining.\nFSWatcher.prototype.unwatch = function (paths) {\n  if (this.closed) return this;\n  paths = flatten(arrify(paths));\n  paths.forEach(function (path) {\n    // convert to absolute path unless relative path already matches\n    if (!isAbsolute(path) && !this._closers[path]) {\n      if (this.options.cwd) path = sysPath.join(this.options.cwd, path);\n      path = sysPath.resolve(path);\n    }\n    this._closePath(path);\n    this._ignoredPaths[path] = true;\n    if (path in this._watched) {\n      this._ignoredPaths[path + '/**'] = true;\n    }\n\n    // reset the cached userIgnored anymatch fn\n    // to make ignoredPaths changes effective\n    this._userIgnored = null;\n  }, this);\n  return this;\n};\n\n// Public method: Close watchers and remove all listeners from watched paths.\n\n// Returns instance of FSWatcher for chaining.\nFSWatcher.prototype.close = function () {\n  if (this.closed) return this;\n  this.closed = true;\n  Object.keys(this._closers).forEach(function (watchPath) {\n    this._closers[watchPath].forEach(function (closer) {\n      closer();\n    });\n    delete this._closers[watchPath];\n  }, this);\n  this._watched = Object.create(null);\n  this.removeAllListeners();\n  return this;\n};\n\n// Public method: Expose list of watched paths\n\n// Returns object w/ dir paths as keys and arrays of contained paths as values.\nFSWatcher.prototype.getWatched = function () {\n  var watchList = {};\n  Object.keys(this._watched).forEach(function (dir) {\n    var key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;\n    watchList[key || '.'] = Object.keys(this._watched[dir]._items).sort();\n  }.bind(this));\n  return watchList;\n};\n\n// Attach watch handler prototype methods\nfunction importHandler(handler) {\n  Object.keys(handler.prototype).forEach(function (method) {\n    FSWatcher.prototype[method] = handler.prototype[method];\n  });\n}\nimportHandler(NodeFsHandler);\nif (FsEventsHandler.canUse()) importHandler(FsEventsHandler);\n\n// Export FSWatcher class\nexports.FSWatcher = FSWatcher;\n\n// Public function: Instantiates watcher with paths to be tracked.\n\n// * paths     - string or array of strings, file/directory paths and/or globs\n// * options   - object, chokidar options\n\n// Returns an instance of FSWatcher for chaining.\nexports.watch = function (paths, options) {\n  return new FSWatcher(options).add(paths);\n};","map":{"version":3,"names":["EventEmitter","require","fs","sysPath","asyncEach","anymatch","globParent","isGlob","isAbsolute","inherits","braces","normalizePath","upath","NodeFsHandler","FsEventsHandler","arrify","value","Array","isArray","flatten","list","result","forEach","item","push","isString","thing","FSWatcher","_opts","call","opts","opt","_watched","Object","create","_closers","_ignoredPaths","defineProperty","get","keys","closed","_throttled","_symlinkPaths","undef","key","undefined","persistent","ignoreInitial","ignorePermissionErrors","interval","binaryInterval","disableGlobbing","enableBinaryInterval","useFsEvents","usePolling","canUse","process","platform","envPoll","env","CHOKIDAR_USEPOLLING","envLower","toLowerCase","envInterval","CHOKIDAR_INTERVAL","parseInt","atomic","_pendingUnlinks","followSymlinks","awaitWriteFinish","awf","stabilityThreshold","pollInterval","_pendingWrites","ignored","_isntIgnored","path","stat","_isIgnored","bind","readyCalls","_emitReady","_readyCount","Function","prototype","_readyEmitted","nextTick","emit","options","freeze","_emit","event","val1","val2","val3","cwd","relative","args","lastChange","Date","setTimeout","apply","concat","emitEvent","awfEmit","err","stats","length","_awaitWriteFinish","_throttle","alwaysStat","fullPath","join","error","_handleError","code","ipe","action","timeout","throttled","count","clear","clearTimeout","timeoutObject","threshold","timeoutHandler","now","prevStat","curStat","size","cancelWait","dotRe","test","_userIgnored","map","normalize","paths","filter","_globIgnored","replacerRe","_getWatchHelpers","depth","replace","watchPath","fullWatchPath","resolve","hasGlob","globFilter","follow","globSymlink","checkGlobSymlink","entry","fullParentDir","realPath","linkPath","entryPath","filterPath","isSymbolicLink","filterDir","resolvedPath","_hasReadPermissions","getDirParts","parts","expandedPath","expand","split","dirParts","pop","unmatchedGlob","entryParts","globstar","some","every","part","i","statMethod","_getWatchedDir","directory","dir","watcherRemove","_remove","_items","add","remove","children","readdir","dirname","basename","has","Boolean","mode","toString","isDirectory","watchedDirs","nestedDirectoryChildren","nestedItem","parent","wasTracked","relPath","eventName","_closePath","closer","_origAdd","_internal","TypeError","absPath","substring","_addToFsEvents","next","_addToNodeFs","res","results","unwatch","close","removeAllListeners","getWatched","watchList","sort","importHandler","handler","method","exports","watch"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/chokidar/index.js"],"sourcesContent":["'use strict';\nvar EventEmitter = require('events').EventEmitter;\nvar fs = require('fs');\nvar sysPath = require('path');\nvar asyncEach = require('async-each');\nvar anymatch = require('anymatch');\nvar globParent = require('glob-parent');\nvar isGlob = require('is-glob');\nvar isAbsolute = require('path-is-absolute');\nvar inherits = require('inherits');\nvar braces = require('braces');\nvar normalizePath = require('normalize-path');\nvar upath = require('upath');\n\nvar NodeFsHandler = require('./lib/nodefs-handler');\nvar FsEventsHandler = require('./lib/fsevents-handler');\n\nvar arrify = function(value) {\n  if (value == null) return [];\n  return Array.isArray(value) ? value : [value];\n};\n\nvar flatten = function(list, result) {\n  if (result == null) result = [];\n  list.forEach(function(item) {\n    if (Array.isArray(item)) {\n      flatten(item, result);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\n// Little isString util for use in Array#every.\nvar isString = function(thing) {\n  return typeof thing === 'string';\n};\n\n// Public: Main class.\n// Watches files & directories for changes.\n//\n// * _opts - object, chokidar options hash\n//\n// Emitted events:\n// `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`\n//\n// Examples\n//\n//  var watcher = new FSWatcher()\n//    .add(directories)\n//    .on('add', path => console.log('File', path, 'was added'))\n//    .on('change', path => console.log('File', path, 'was changed'))\n//    .on('unlink', path => console.log('File', path, 'was removed'))\n//    .on('all', (event, path) => console.log(path, ' emitted ', event))\n//\nfunction FSWatcher(_opts) {\n  EventEmitter.call(this);\n  var opts = {};\n  // in case _opts that is passed in is a frozen object\n  if (_opts) for (var opt in _opts) opts[opt] = _opts[opt];\n  this._watched = Object.create(null);\n  this._closers = Object.create(null);\n  this._ignoredPaths = Object.create(null);\n  Object.defineProperty(this, '_globIgnored', {\n    get: function() { return Object.keys(this._ignoredPaths); }\n  });\n  this.closed = false;\n  this._throttled = Object.create(null);\n  this._symlinkPaths = Object.create(null);\n\n  function undef(key) {\n    return opts[key] === undefined;\n  }\n\n  // Set up default options.\n  if (undef('persistent')) opts.persistent = true;\n  if (undef('ignoreInitial')) opts.ignoreInitial = false;\n  if (undef('ignorePermissionErrors')) opts.ignorePermissionErrors = false;\n  if (undef('interval')) opts.interval = 100;\n  if (undef('binaryInterval')) opts.binaryInterval = 300;\n  if (undef('disableGlobbing')) opts.disableGlobbing = false;\n  this.enableBinaryInterval = opts.binaryInterval !== opts.interval;\n\n  // Enable fsevents on OS X when polling isn't explicitly enabled.\n  if (undef('useFsEvents')) opts.useFsEvents = !opts.usePolling;\n\n  // If we can't use fsevents, ensure the options reflect it's disabled.\n  if (!FsEventsHandler.canUse()) opts.useFsEvents = false;\n\n  // Use polling on Mac if not using fsevents.\n  // Other platforms use non-polling fs.watch.\n  if (undef('usePolling') && !opts.useFsEvents) {\n    opts.usePolling = process.platform === 'darwin';\n  }\n\n  // Global override (useful for end-developers that need to force polling for all\n  // instances of chokidar, regardless of usage/dependency depth)\n  var envPoll = process.env.CHOKIDAR_USEPOLLING;\n  if (envPoll !== undefined) {\n    var envLower = envPoll.toLowerCase();\n\n    if (envLower === 'false' || envLower === '0') {\n      opts.usePolling = false;\n    } else if (envLower === 'true' || envLower === '1') {\n      opts.usePolling = true;\n    } else {\n      opts.usePolling = !!envLower\n    }\n  }\n  var envInterval = process.env.CHOKIDAR_INTERVAL;\n  if (envInterval) {\n    opts.interval = parseInt(envInterval);\n  }\n\n  // Editor atomic write normalization enabled by default with fs.watch\n  if (undef('atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;\n  if (opts.atomic) this._pendingUnlinks = Object.create(null);\n\n  if (undef('followSymlinks')) opts.followSymlinks = true;\n\n  if (undef('awaitWriteFinish')) opts.awaitWriteFinish = false;\n  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};\n  var awf = opts.awaitWriteFinish;\n  if (awf) {\n    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;\n    if (!awf.pollInterval) awf.pollInterval = 100;\n\n    this._pendingWrites = Object.create(null);\n  }\n  if (opts.ignored) opts.ignored = arrify(opts.ignored);\n\n  this._isntIgnored = function(path, stat) {\n    return !this._isIgnored(path, stat);\n  }.bind(this);\n\n  var readyCalls = 0;\n  this._emitReady = function() {\n    if (++readyCalls >= this._readyCount) {\n      this._emitReady = Function.prototype;\n      this._readyEmitted = true;\n      // use process.nextTick to allow time for listener to be bound\n      process.nextTick(this.emit.bind(this, 'ready'));\n    }\n  }.bind(this);\n\n  this.options = opts;\n\n  // You’re frozen when your heart’s not open.\n  Object.freeze(opts);\n}\n\ninherits(FSWatcher, EventEmitter);\n\n// Common helpers\n// --------------\n\n// Private method: Normalize and emit events\n//\n// * event     - string, type of event\n// * path      - string, file or directory path\n// * val[1..3] - arguments to be passed with event\n//\n// Returns the error if defined, otherwise the value of the\n// FSWatcher instance's `closed` flag\nFSWatcher.prototype._emit = function(event, path, val1, val2, val3) {\n  if (this.options.cwd) path = sysPath.relative(this.options.cwd, path);\n  var args = [event, path];\n  if (val3 !== undefined) args.push(val1, val2, val3);\n  else if (val2 !== undefined) args.push(val1, val2);\n  else if (val1 !== undefined) args.push(val1);\n\n  var awf = this.options.awaitWriteFinish;\n  if (awf && this._pendingWrites[path]) {\n    this._pendingWrites[path].lastChange = new Date();\n    return this;\n  }\n\n  if (this.options.atomic) {\n    if (event === 'unlink') {\n      this._pendingUnlinks[path] = args;\n      setTimeout(function() {\n        Object.keys(this._pendingUnlinks).forEach(function(path) {\n          this.emit.apply(this, this._pendingUnlinks[path]);\n          this.emit.apply(this, ['all'].concat(this._pendingUnlinks[path]));\n          delete this._pendingUnlinks[path];\n        }.bind(this));\n      }.bind(this), typeof this.options.atomic === \"number\"\n        ? this.options.atomic\n        : 100);\n      return this;\n    } else if (event === 'add' && this._pendingUnlinks[path]) {\n      event = args[0] = 'change';\n      delete this._pendingUnlinks[path];\n    }\n  }\n\n  var emitEvent = function() {\n    this.emit.apply(this, args);\n    if (event !== 'error') this.emit.apply(this, ['all'].concat(args));\n  }.bind(this);\n\n  if (awf && (event === 'add' || event === 'change') && this._readyEmitted) {\n    var awfEmit = function(err, stats) {\n      if (err) {\n        event = args[0] = 'error';\n        args[1] = err;\n        emitEvent();\n      } else if (stats) {\n        // if stats doesn't exist the file must have been deleted\n        if (args.length > 2) {\n          args[2] = stats;\n        } else {\n          args.push(stats);\n        }\n        emitEvent();\n      }\n    };\n\n    this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);\n    return this;\n  }\n\n  if (event === 'change') {\n    if (!this._throttle('change', path, 50)) return this;\n  }\n\n  if (\n    this.options.alwaysStat && val1 === undefined &&\n    (event === 'add' || event === 'addDir' || event === 'change')\n  ) {\n    var fullPath = this.options.cwd ? sysPath.join(this.options.cwd, path) : path;\n    fs.stat(fullPath, function(error, stats) {\n      // Suppress event when fs.stat fails, to avoid sending undefined 'stat'\n      if (error || !stats) return;\n\n      args.push(stats);\n      emitEvent();\n    });\n  } else {\n    emitEvent();\n  }\n\n  return this;\n};\n\n// Private method: Common handler for errors\n//\n// * error  - object, Error instance\n//\n// Returns the error if defined, otherwise the value of the\n// FSWatcher instance's `closed` flag\nFSWatcher.prototype._handleError = function(error) {\n  var code = error && error.code;\n  var ipe = this.options.ignorePermissionErrors;\n  if (error &&\n    code !== 'ENOENT' &&\n    code !== 'ENOTDIR' &&\n    (!ipe || (code !== 'EPERM' && code !== 'EACCES'))\n  ) this.emit('error', error);\n  return error || this.closed;\n};\n\n// Private method: Helper utility for throttling\n//\n// * action  - string, type of action being throttled\n// * path    - string, path being acted upon\n// * timeout - int, duration of time to suppress duplicate actions\n//\n// Returns throttle tracking object or false if action should be suppressed\nFSWatcher.prototype._throttle = function(action, path, timeout) {\n  if (!(action in this._throttled)) {\n    this._throttled[action] = Object.create(null);\n  }\n  var throttled = this._throttled[action];\n  if (path in throttled) {\n    throttled[path].count++;\n    return false;\n  }\n  function clear() {\n    var count = throttled[path] ? throttled[path].count : 0;\n    delete throttled[path];\n    clearTimeout(timeoutObject);\n    return count;\n  }\n  var timeoutObject = setTimeout(clear, timeout);\n  throttled[path] = {timeoutObject: timeoutObject, clear: clear, count: 0};\n  return throttled[path];\n};\n\n// Private method: Awaits write operation to finish\n//\n// * path    - string, path being acted upon\n// * threshold - int, time in milliseconds a file size must be fixed before\n//                    acknowledging write operation is finished\n// * awfEmit - function, to be called when ready for event to be emitted\n// Polls a newly created file for size variations. When files size does not\n// change for 'threshold' milliseconds calls callback.\nFSWatcher.prototype._awaitWriteFinish = function(path, threshold, event, awfEmit) {\n  var timeoutHandler;\n\n  var fullPath = path;\n  if (this.options.cwd && !isAbsolute(path)) {\n    fullPath = sysPath.join(this.options.cwd, path);\n  }\n\n  var now = new Date();\n\n  var awaitWriteFinish = (function (prevStat) {\n    fs.stat(fullPath, function(err, curStat) {\n      if (err || !(path in this._pendingWrites)) {\n        if (err && err.code !== 'ENOENT') awfEmit(err);\n        return;\n      }\n\n      var now = new Date();\n\n      if (prevStat && curStat.size != prevStat.size) {\n        this._pendingWrites[path].lastChange = now;\n      }\n\n      if (now - this._pendingWrites[path].lastChange >= threshold) {\n        delete this._pendingWrites[path];\n        awfEmit(null, curStat);\n      } else {\n        timeoutHandler = setTimeout(\n          awaitWriteFinish.bind(this, curStat),\n          this.options.awaitWriteFinish.pollInterval\n        );\n      }\n    }.bind(this));\n  }.bind(this));\n\n  if (!(path in this._pendingWrites)) {\n    this._pendingWrites[path] = {\n      lastChange: now,\n      cancelWait: function() {\n        delete this._pendingWrites[path];\n        clearTimeout(timeoutHandler);\n        return event;\n      }.bind(this)\n    };\n    timeoutHandler = setTimeout(\n      awaitWriteFinish.bind(this),\n      this.options.awaitWriteFinish.pollInterval\n    );\n  }\n};\n\n// Private method: Determines whether user has asked to ignore this path\n//\n// * path  - string, path to file or directory\n// * stats - object, result of fs.stat\n//\n// Returns boolean\nvar dotRe = /\\..*\\.(sw[px])$|\\~$|\\.subl.*\\.tmp/;\nFSWatcher.prototype._isIgnored = function(path, stats) {\n  if (this.options.atomic && dotRe.test(path)) return true;\n\n  if (!this._userIgnored) {\n    var cwd = this.options.cwd;\n    var ignored = this.options.ignored;\n    if (cwd && ignored) {\n      ignored = ignored.map(function (path) {\n        if (typeof path !== 'string') return path;\n        return upath.normalize(isAbsolute(path) ? path : sysPath.join(cwd, path));\n      });\n    }\n    var paths = arrify(ignored)\n      .filter(function(path) {\n        return typeof path === 'string' && !isGlob(path);\n      }).map(function(path) {\n        return path + '/**';\n      });\n    this._userIgnored = anymatch(\n      this._globIgnored.concat(ignored).concat(paths)\n    );\n  }\n\n  return this._userIgnored([path, stats]);\n};\n\n// Private method: Provides a set of common helpers and properties relating to\n// symlink and glob handling\n//\n// * path - string, file, directory, or glob pattern being watched\n// * depth - int, at any depth > 0, this isn't a glob\n//\n// Returns object containing helpers for this path\nvar replacerRe = /^\\.[\\/\\\\]/;\nFSWatcher.prototype._getWatchHelpers = function(path, depth) {\n  path = path.replace(replacerRe, '');\n  var watchPath = depth || this.options.disableGlobbing || !isGlob(path) ? path : globParent(path);\n  var fullWatchPath = sysPath.resolve(watchPath);\n  var hasGlob = watchPath !== path;\n  var globFilter = hasGlob ? anymatch(path) : false;\n  var follow = this.options.followSymlinks;\n  var globSymlink = hasGlob && follow ? null : false;\n\n  var checkGlobSymlink = function(entry) {\n    // only need to resolve once\n    // first entry should always have entry.parentDir === ''\n    if (globSymlink == null) {\n      globSymlink = entry.fullParentDir === fullWatchPath ? false : {\n        realPath: entry.fullParentDir,\n        linkPath: fullWatchPath\n      };\n    }\n\n    if (globSymlink) {\n      return entry.fullPath.replace(globSymlink.realPath, globSymlink.linkPath);\n    }\n\n    return entry.fullPath;\n  };\n\n  var entryPath = function(entry) {\n    return sysPath.join(watchPath,\n      sysPath.relative(watchPath, checkGlobSymlink(entry))\n    );\n  };\n\n  var filterPath = function(entry) {\n    if (entry.stat && entry.stat.isSymbolicLink()) return filterDir(entry);\n    var resolvedPath = entryPath(entry);\n    return (!hasGlob || globFilter(resolvedPath)) &&\n      this._isntIgnored(resolvedPath, entry.stat) &&\n      (this.options.ignorePermissionErrors ||\n        this._hasReadPermissions(entry.stat));\n  }.bind(this);\n\n  var getDirParts = function(path) {\n    if (!hasGlob) return false;\n    var parts = [];\n    var expandedPath = braces.expand(path);\n    expandedPath.forEach(function(path) {\n      parts.push(sysPath.relative(watchPath, path).split(/[\\/\\\\]/));\n    });\n    return parts;\n  };\n\n  var dirParts = getDirParts(path);\n  if (dirParts) {\n    dirParts.forEach(function(parts) {\n      if (parts.length > 1) parts.pop();\n    });\n  }\n  var unmatchedGlob;\n\n  var filterDir = function(entry) {\n    if (hasGlob) {\n      var entryParts = getDirParts(checkGlobSymlink(entry));\n      var globstar = false;\n      unmatchedGlob = !dirParts.some(function(parts) {\n        return parts.every(function(part, i) {\n          if (part === '**') globstar = true;\n          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i]);\n        });\n      });\n    }\n    return !unmatchedGlob && this._isntIgnored(entryPath(entry), entry.stat);\n  }.bind(this);\n\n  return {\n    followSymlinks: follow,\n    statMethod: follow ? 'stat' : 'lstat',\n    path: path,\n    watchPath: watchPath,\n    entryPath: entryPath,\n    hasGlob: hasGlob,\n    globFilter: globFilter,\n    filterPath: filterPath,\n    filterDir: filterDir\n  };\n};\n\n// Directory helpers\n// -----------------\n\n// Private method: Provides directory tracking objects\n//\n// * directory - string, path of the directory\n//\n// Returns the directory's tracking object\nFSWatcher.prototype._getWatchedDir = function(directory) {\n  var dir = sysPath.resolve(directory);\n  var watcherRemove = this._remove.bind(this);\n  if (!(dir in this._watched)) this._watched[dir] = {\n    _items: Object.create(null),\n    add: function(item) {\n      if (item !== '.' && item !== '..') this._items[item] = true;\n    },\n    remove: function(item) {\n      delete this._items[item];\n      if (!this.children().length) {\n        fs.readdir(dir, function(err) {\n          if (err) watcherRemove(sysPath.dirname(dir), sysPath.basename(dir));\n        });\n      }\n    },\n    has: function(item) {return item in this._items;},\n    children: function() {return Object.keys(this._items);}\n  };\n  return this._watched[dir];\n};\n\n// File helpers\n// ------------\n\n// Private method: Check for read permissions\n// Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405\n//\n// * stats - object, result of fs.stat\n//\n// Returns boolean\nFSWatcher.prototype._hasReadPermissions = function(stats) {\n  return Boolean(4 & parseInt(((stats && stats.mode) & 0x1ff).toString(8)[0], 10));\n};\n\n// Private method: Handles emitting unlink events for\n// files and directories, and via recursion, for\n// files and directories within directories that are unlinked\n//\n// * directory - string, directory within which the following item is located\n// * item      - string, base path of item/directory\n//\n// Returns nothing\nFSWatcher.prototype._remove = function(directory, item) {\n  // if what is being deleted is a directory, get that directory's paths\n  // for recursive deleting and cleaning of watched object\n  // if it is not a directory, nestedDirectoryChildren will be empty array\n  var path = sysPath.join(directory, item);\n  var fullPath = sysPath.resolve(path);\n  var isDirectory = this._watched[path] || this._watched[fullPath];\n\n  // prevent duplicate handling in case of arriving here nearly simultaneously\n  // via multiple paths (such as _handleFile and _handleDir)\n  if (!this._throttle('remove', path, 100)) return;\n\n  // if the only watched file is removed, watch for its return\n  var watchedDirs = Object.keys(this._watched);\n  if (!isDirectory && !this.options.useFsEvents && watchedDirs.length === 1) {\n    this.add(directory, item, true);\n  }\n\n  // This will create a new entry in the watched object in either case\n  // so we got to do the directory check beforehand\n  var nestedDirectoryChildren = this._getWatchedDir(path).children();\n\n  // Recursively remove children directories / files.\n  nestedDirectoryChildren.forEach(function(nestedItem) {\n    this._remove(path, nestedItem);\n  }, this);\n\n  // Check if item was on the watched list and remove it\n  var parent = this._getWatchedDir(directory);\n  var wasTracked = parent.has(item);\n  parent.remove(item);\n\n  // If we wait for this file to be fully written, cancel the wait.\n  var relPath = path;\n  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);\n  if (this.options.awaitWriteFinish && this._pendingWrites[relPath]) {\n    var event = this._pendingWrites[relPath].cancelWait();\n    if (event === 'add') return;\n  }\n\n  // The Entry will either be a directory that just got removed\n  // or a bogus entry to a file, in either case we have to remove it\n  delete this._watched[path];\n  delete this._watched[fullPath];\n  var eventName = isDirectory ? 'unlinkDir' : 'unlink';\n  if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);\n\n  // Avoid conflicts if we later create another file with the same name\n  if (!this.options.useFsEvents) {\n    this._closePath(path);\n  }\n};\n\nFSWatcher.prototype._closePath = function(path) {\n  if (!this._closers[path]) return;\n  this._closers[path].forEach(function(closer) {\n    closer();\n  });\n  delete this._closers[path];\n  this._getWatchedDir(sysPath.dirname(path)).remove(sysPath.basename(path));\n}\n\n// Public method: Adds paths to be watched on an existing FSWatcher instance\n\n// * paths     - string or array of strings, file/directory paths and/or globs\n// * _origAdd  - private boolean, for handling non-existent paths to be watched\n// * _internal - private boolean, indicates a non-user add\n\n// Returns an instance of FSWatcher for chaining.\nFSWatcher.prototype.add = function(paths, _origAdd, _internal) {\n  var disableGlobbing = this.options.disableGlobbing;\n  var cwd = this.options.cwd;\n  this.closed = false;\n  paths = flatten(arrify(paths));\n\n  if (!paths.every(isString)) {\n    throw new TypeError('Non-string provided as watch path: ' + paths);\n  }\n\n  if (cwd) paths = paths.map(function(path) {\n    var absPath;\n    if (isAbsolute(path)) {\n      absPath = path;\n    } else if (path[0] === '!') {\n      absPath = '!' + sysPath.join(cwd, path.substring(1));\n    } else {\n      absPath = sysPath.join(cwd, path);\n    }\n\n    // Check `path` instead of `absPath` because the cwd portion can't be a glob\n    if (disableGlobbing || !isGlob(path)) {\n      return absPath;\n    } else {\n      return normalizePath(absPath);\n    }\n  });\n\n  // set aside negated glob strings\n  paths = paths.filter(function(path) {\n    if (path[0] === '!') {\n      this._ignoredPaths[path.substring(1)] = true;\n    } else {\n      // if a path is being added that was previously ignored, stop ignoring it\n      delete this._ignoredPaths[path];\n      delete this._ignoredPaths[path + '/**'];\n\n      // reset the cached userIgnored anymatch fn\n      // to make ignoredPaths changes effective\n      this._userIgnored = null;\n\n      return true;\n    }\n  }, this);\n\n  if (this.options.useFsEvents && FsEventsHandler.canUse()) {\n    if (!this._readyCount) this._readyCount = paths.length;\n    if (this.options.persistent) this._readyCount *= 2;\n    paths.forEach(this._addToFsEvents, this);\n  } else {\n    if (!this._readyCount) this._readyCount = 0;\n    this._readyCount += paths.length;\n    asyncEach(paths, function(path, next) {\n      this._addToNodeFs(path, !_internal, 0, 0, _origAdd, function(err, res) {\n        if (res) this._emitReady();\n        next(err, res);\n      }.bind(this));\n    }.bind(this), function(error, results) {\n      results.forEach(function(item) {\n        if (!item || this.closed) return;\n        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));\n      }, this);\n    }.bind(this));\n  }\n\n  return this;\n};\n\n// Public method: Close watchers or start ignoring events from specified paths.\n\n// * paths     - string or array of strings, file/directory paths and/or globs\n\n// Returns instance of FSWatcher for chaining.\nFSWatcher.prototype.unwatch = function(paths) {\n  if (this.closed) return this;\n  paths = flatten(arrify(paths));\n\n  paths.forEach(function(path) {\n    // convert to absolute path unless relative path already matches\n    if (!isAbsolute(path) && !this._closers[path]) {\n      if (this.options.cwd) path = sysPath.join(this.options.cwd, path);\n      path = sysPath.resolve(path);\n    }\n\n    this._closePath(path);\n\n    this._ignoredPaths[path] = true;\n    if (path in this._watched) {\n      this._ignoredPaths[path + '/**'] = true;\n    }\n\n    // reset the cached userIgnored anymatch fn\n    // to make ignoredPaths changes effective\n    this._userIgnored = null;\n  }, this);\n\n  return this;\n};\n\n// Public method: Close watchers and remove all listeners from watched paths.\n\n// Returns instance of FSWatcher for chaining.\nFSWatcher.prototype.close = function() {\n  if (this.closed) return this;\n\n  this.closed = true;\n  Object.keys(this._closers).forEach(function(watchPath) {\n    this._closers[watchPath].forEach(function(closer) {\n      closer();\n    });\n    delete this._closers[watchPath];\n  }, this);\n  this._watched = Object.create(null);\n\n  this.removeAllListeners();\n  return this;\n};\n\n// Public method: Expose list of watched paths\n\n// Returns object w/ dir paths as keys and arrays of contained paths as values.\nFSWatcher.prototype.getWatched = function() {\n  var watchList = {};\n  Object.keys(this._watched).forEach(function(dir) {\n    var key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;\n    watchList[key || '.'] = Object.keys(this._watched[dir]._items).sort();\n  }.bind(this));\n  return watchList;\n};\n\n// Attach watch handler prototype methods\nfunction importHandler(handler) {\n  Object.keys(handler.prototype).forEach(function(method) {\n    FSWatcher.prototype[method] = handler.prototype[method];\n  });\n}\nimportHandler(NodeFsHandler);\nif (FsEventsHandler.canUse()) importHandler(FsEventsHandler);\n\n// Export FSWatcher class\nexports.FSWatcher = FSWatcher;\n\n// Public function: Instantiates watcher with paths to be tracked.\n\n// * paths     - string or array of strings, file/directory paths and/or globs\n// * options   - object, chokidar options\n\n// Returns an instance of FSWatcher for chaining.\nexports.watch = function(paths, options) {\n  return new FSWatcher(options).add(paths);\n};\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,YAAY;AACjD,IAAIE,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIE,OAAO,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC7B,IAAIG,SAAS,GAAGH,OAAO,CAAC,YAAY,CAAC;AACrC,IAAII,QAAQ,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAClC,IAAIK,UAAU,GAAGL,OAAO,CAAC,aAAa,CAAC;AACvC,IAAIM,MAAM,GAAGN,OAAO,CAAC,SAAS,CAAC;AAC/B,IAAIO,UAAU,GAAGP,OAAO,CAAC,kBAAkB,CAAC;AAC5C,IAAIQ,QAAQ,GAAGR,OAAO,CAAC,UAAU,CAAC;AAClC,IAAIS,MAAM,GAAGT,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIU,aAAa,GAAGV,OAAO,CAAC,gBAAgB,CAAC;AAC7C,IAAIW,KAAK,GAAGX,OAAO,CAAC,OAAO,CAAC;AAE5B,IAAIY,aAAa,GAAGZ,OAAO,CAAC,sBAAsB,CAAC;AACnD,IAAIa,eAAe,GAAGb,OAAO,CAAC,wBAAwB,CAAC;AAEvD,IAAIc,MAAM,GAAG,UAASC,KAAK,EAAE;EAC3B,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAO,EAAE;EAC5B,OAAOC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;AAC/C,CAAC;AAED,IAAIG,OAAO,GAAG,UAASC,IAAI,EAAEC,MAAM,EAAE;EACnC,IAAIA,MAAM,IAAI,IAAI,EAAEA,MAAM,GAAG,EAAE;EAC/BD,IAAI,CAACE,OAAO,CAAC,UAASC,IAAI,EAAE;IAC1B,IAAIN,KAAK,CAACC,OAAO,CAACK,IAAI,CAAC,EAAE;MACvBJ,OAAO,CAACI,IAAI,EAAEF,MAAM,CAAC;IACvB,CAAC,MAAM;MACLA,MAAM,CAACG,IAAI,CAACD,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;EACF,OAAOF,MAAM;AACf,CAAC;;AAED;AACA,IAAII,QAAQ,GAAG,UAASC,KAAK,EAAE;EAC7B,OAAO,OAAOA,KAAK,KAAK,QAAQ;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,KAAK,EAAE;EACxB5B,YAAY,CAAC6B,IAAI,CAAC,IAAI,CAAC;EACvB,IAAIC,IAAI,GAAG,CAAC,CAAC;EACb;EACA,IAAIF,KAAK,EAAE,KAAK,IAAIG,GAAG,IAAIH,KAAK,EAAEE,IAAI,CAACC,GAAG,CAAC,GAAGH,KAAK,CAACG,GAAG,CAAC;EACxD,IAAI,CAACC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACnC,IAAI,CAACC,QAAQ,GAAGF,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACnC,IAAI,CAACE,aAAa,GAAGH,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACxCD,MAAM,CAACI,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;IAC1CC,GAAG,EAAE,YAAW;MAAE,OAAOL,MAAM,CAACM,IAAI,CAAC,IAAI,CAACH,aAAa,CAAC;IAAE;EAC5D,CAAC,CAAC;EACF,IAAI,CAACI,MAAM,GAAG,KAAK;EACnB,IAAI,CAACC,UAAU,GAAGR,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACrC,IAAI,CAACQ,aAAa,GAAGT,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAExC,SAASS,KAAK,CAACC,GAAG,EAAE;IAClB,OAAOd,IAAI,CAACc,GAAG,CAAC,KAAKC,SAAS;EAChC;;EAEA;EACA,IAAIF,KAAK,CAAC,YAAY,CAAC,EAAEb,IAAI,CAACgB,UAAU,GAAG,IAAI;EAC/C,IAAIH,KAAK,CAAC,eAAe,CAAC,EAAEb,IAAI,CAACiB,aAAa,GAAG,KAAK;EACtD,IAAIJ,KAAK,CAAC,wBAAwB,CAAC,EAAEb,IAAI,CAACkB,sBAAsB,GAAG,KAAK;EACxE,IAAIL,KAAK,CAAC,UAAU,CAAC,EAAEb,IAAI,CAACmB,QAAQ,GAAG,GAAG;EAC1C,IAAIN,KAAK,CAAC,gBAAgB,CAAC,EAAEb,IAAI,CAACoB,cAAc,GAAG,GAAG;EACtD,IAAIP,KAAK,CAAC,iBAAiB,CAAC,EAAEb,IAAI,CAACqB,eAAe,GAAG,KAAK;EAC1D,IAAI,CAACC,oBAAoB,GAAGtB,IAAI,CAACoB,cAAc,KAAKpB,IAAI,CAACmB,QAAQ;;EAEjE;EACA,IAAIN,KAAK,CAAC,aAAa,CAAC,EAAEb,IAAI,CAACuB,WAAW,GAAG,CAACvB,IAAI,CAACwB,UAAU;;EAE7D;EACA,IAAI,CAACxC,eAAe,CAACyC,MAAM,EAAE,EAAEzB,IAAI,CAACuB,WAAW,GAAG,KAAK;;EAEvD;EACA;EACA,IAAIV,KAAK,CAAC,YAAY,CAAC,IAAI,CAACb,IAAI,CAACuB,WAAW,EAAE;IAC5CvB,IAAI,CAACwB,UAAU,GAAGE,OAAO,CAACC,QAAQ,KAAK,QAAQ;EACjD;;EAEA;EACA;EACA,IAAIC,OAAO,GAAGF,OAAO,CAACG,GAAG,CAACC,mBAAmB;EAC7C,IAAIF,OAAO,KAAKb,SAAS,EAAE;IACzB,IAAIgB,QAAQ,GAAGH,OAAO,CAACI,WAAW,EAAE;IAEpC,IAAID,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,GAAG,EAAE;MAC5C/B,IAAI,CAACwB,UAAU,GAAG,KAAK;IACzB,CAAC,MAAM,IAAIO,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,GAAG,EAAE;MAClD/B,IAAI,CAACwB,UAAU,GAAG,IAAI;IACxB,CAAC,MAAM;MACLxB,IAAI,CAACwB,UAAU,GAAG,CAAC,CAACO,QAAQ;IAC9B;EACF;EACA,IAAIE,WAAW,GAAGP,OAAO,CAACG,GAAG,CAACK,iBAAiB;EAC/C,IAAID,WAAW,EAAE;IACfjC,IAAI,CAACmB,QAAQ,GAAGgB,QAAQ,CAACF,WAAW,CAAC;EACvC;;EAEA;EACA,IAAIpB,KAAK,CAAC,QAAQ,CAAC,EAAEb,IAAI,CAACoC,MAAM,GAAG,CAACpC,IAAI,CAACwB,UAAU,IAAI,CAACxB,IAAI,CAACuB,WAAW;EACxE,IAAIvB,IAAI,CAACoC,MAAM,EAAE,IAAI,CAACC,eAAe,GAAGlC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAE3D,IAAIS,KAAK,CAAC,gBAAgB,CAAC,EAAEb,IAAI,CAACsC,cAAc,GAAG,IAAI;EAEvD,IAAIzB,KAAK,CAAC,kBAAkB,CAAC,EAAEb,IAAI,CAACuC,gBAAgB,GAAG,KAAK;EAC5D,IAAIvC,IAAI,CAACuC,gBAAgB,KAAK,IAAI,EAAEvC,IAAI,CAACuC,gBAAgB,GAAG,CAAC,CAAC;EAC9D,IAAIC,GAAG,GAAGxC,IAAI,CAACuC,gBAAgB;EAC/B,IAAIC,GAAG,EAAE;IACP,IAAI,CAACA,GAAG,CAACC,kBAAkB,EAAED,GAAG,CAACC,kBAAkB,GAAG,IAAI;IAC1D,IAAI,CAACD,GAAG,CAACE,YAAY,EAAEF,GAAG,CAACE,YAAY,GAAG,GAAG;IAE7C,IAAI,CAACC,cAAc,GAAGxC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC3C;EACA,IAAIJ,IAAI,CAAC4C,OAAO,EAAE5C,IAAI,CAAC4C,OAAO,GAAG3D,MAAM,CAACe,IAAI,CAAC4C,OAAO,CAAC;EAErD,IAAI,CAACC,YAAY,GAAG,UAASC,IAAI,EAAEC,IAAI,EAAE;IACvC,OAAO,CAAC,IAAI,CAACC,UAAU,CAACF,IAAI,EAAEC,IAAI,CAAC;EACrC,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;EAEZ,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAI,CAACC,UAAU,GAAG,YAAW;IAC3B,IAAI,EAAED,UAAU,IAAI,IAAI,CAACE,WAAW,EAAE;MACpC,IAAI,CAACD,UAAU,GAAGE,QAAQ,CAACC,SAAS;MACpC,IAAI,CAACC,aAAa,GAAG,IAAI;MACzB;MACA7B,OAAO,CAAC8B,QAAQ,CAAC,IAAI,CAACC,IAAI,CAACR,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjD;EACF,CAAC,CAACA,IAAI,CAAC,IAAI,CAAC;EAEZ,IAAI,CAACS,OAAO,GAAG1D,IAAI;;EAEnB;EACAG,MAAM,CAACwD,MAAM,CAAC3D,IAAI,CAAC;AACrB;AAEArB,QAAQ,CAACkB,SAAS,EAAE3B,YAAY,CAAC;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA2B,SAAS,CAACyD,SAAS,CAACM,KAAK,GAAG,UAASC,KAAK,EAAEf,IAAI,EAAEgB,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAClE,IAAI,IAAI,CAACN,OAAO,CAACO,GAAG,EAAEnB,IAAI,GAAGzE,OAAO,CAAC6F,QAAQ,CAAC,IAAI,CAACR,OAAO,CAACO,GAAG,EAAEnB,IAAI,CAAC;EACrE,IAAIqB,IAAI,GAAG,CAACN,KAAK,EAAEf,IAAI,CAAC;EACxB,IAAIkB,IAAI,KAAKjD,SAAS,EAAEoD,IAAI,CAACzE,IAAI,CAACoE,IAAI,EAAEC,IAAI,EAAEC,IAAI,CAAC,CAAC,KAC/C,IAAID,IAAI,KAAKhD,SAAS,EAAEoD,IAAI,CAACzE,IAAI,CAACoE,IAAI,EAAEC,IAAI,CAAC,CAAC,KAC9C,IAAID,IAAI,KAAK/C,SAAS,EAAEoD,IAAI,CAACzE,IAAI,CAACoE,IAAI,CAAC;EAE5C,IAAItB,GAAG,GAAG,IAAI,CAACkB,OAAO,CAACnB,gBAAgB;EACvC,IAAIC,GAAG,IAAI,IAAI,CAACG,cAAc,CAACG,IAAI,CAAC,EAAE;IACpC,IAAI,CAACH,cAAc,CAACG,IAAI,CAAC,CAACsB,UAAU,GAAG,IAAIC,IAAI,EAAE;IACjD,OAAO,IAAI;EACb;EAEA,IAAI,IAAI,CAACX,OAAO,CAACtB,MAAM,EAAE;IACvB,IAAIyB,KAAK,KAAK,QAAQ,EAAE;MACtB,IAAI,CAACxB,eAAe,CAACS,IAAI,CAAC,GAAGqB,IAAI;MACjCG,UAAU,CAAC,YAAW;QACpBnE,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC4B,eAAe,CAAC,CAAC7C,OAAO,CAAC,UAASsD,IAAI,EAAE;UACvD,IAAI,CAACW,IAAI,CAACc,KAAK,CAAC,IAAI,EAAE,IAAI,CAAClC,eAAe,CAACS,IAAI,CAAC,CAAC;UACjD,IAAI,CAACW,IAAI,CAACc,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAACC,MAAM,CAAC,IAAI,CAACnC,eAAe,CAACS,IAAI,CAAC,CAAC,CAAC;UACjE,OAAO,IAAI,CAACT,eAAe,CAACS,IAAI,CAAC;QACnC,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC;MACf,CAAC,CAACA,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,CAACS,OAAO,CAACtB,MAAM,KAAK,QAAQ,GACjD,IAAI,CAACsB,OAAO,CAACtB,MAAM,GACnB,GAAG,CAAC;MACR,OAAO,IAAI;IACb,CAAC,MAAM,IAAIyB,KAAK,KAAK,KAAK,IAAI,IAAI,CAACxB,eAAe,CAACS,IAAI,CAAC,EAAE;MACxDe,KAAK,GAAGM,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ;MAC1B,OAAO,IAAI,CAAC9B,eAAe,CAACS,IAAI,CAAC;IACnC;EACF;EAEA,IAAI2B,SAAS,GAAG,YAAW;IACzB,IAAI,CAAChB,IAAI,CAACc,KAAK,CAAC,IAAI,EAAEJ,IAAI,CAAC;IAC3B,IAAIN,KAAK,KAAK,OAAO,EAAE,IAAI,CAACJ,IAAI,CAACc,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAACC,MAAM,CAACL,IAAI,CAAC,CAAC;EACpE,CAAC,CAAClB,IAAI,CAAC,IAAI,CAAC;EAEZ,IAAIT,GAAG,KAAKqB,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,QAAQ,CAAC,IAAI,IAAI,CAACN,aAAa,EAAE;IACxE,IAAImB,OAAO,GAAG,UAASC,GAAG,EAAEC,KAAK,EAAE;MACjC,IAAID,GAAG,EAAE;QACPd,KAAK,GAAGM,IAAI,CAAC,CAAC,CAAC,GAAG,OAAO;QACzBA,IAAI,CAAC,CAAC,CAAC,GAAGQ,GAAG;QACbF,SAAS,EAAE;MACb,CAAC,MAAM,IAAIG,KAAK,EAAE;QAChB;QACA,IAAIT,IAAI,CAACU,MAAM,GAAG,CAAC,EAAE;UACnBV,IAAI,CAAC,CAAC,CAAC,GAAGS,KAAK;QACjB,CAAC,MAAM;UACLT,IAAI,CAACzE,IAAI,CAACkF,KAAK,CAAC;QAClB;QACAH,SAAS,EAAE;MACb;IACF,CAAC;IAED,IAAI,CAACK,iBAAiB,CAAChC,IAAI,EAAEN,GAAG,CAACC,kBAAkB,EAAEoB,KAAK,EAAEa,OAAO,CAAC;IACpE,OAAO,IAAI;EACb;EAEA,IAAIb,KAAK,KAAK,QAAQ,EAAE;IACtB,IAAI,CAAC,IAAI,CAACkB,SAAS,CAAC,QAAQ,EAAEjC,IAAI,EAAE,EAAE,CAAC,EAAE,OAAO,IAAI;EACtD;EAEA,IACE,IAAI,CAACY,OAAO,CAACsB,UAAU,IAAIlB,IAAI,KAAK/C,SAAS,KAC5C8C,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,QAAQ,CAAC,EAC7D;IACA,IAAIoB,QAAQ,GAAG,IAAI,CAACvB,OAAO,CAACO,GAAG,GAAG5F,OAAO,CAAC6G,IAAI,CAAC,IAAI,CAACxB,OAAO,CAACO,GAAG,EAAEnB,IAAI,CAAC,GAAGA,IAAI;IAC7E1E,EAAE,CAAC2E,IAAI,CAACkC,QAAQ,EAAE,UAASE,KAAK,EAAEP,KAAK,EAAE;MACvC;MACA,IAAIO,KAAK,IAAI,CAACP,KAAK,EAAE;MAErBT,IAAI,CAACzE,IAAI,CAACkF,KAAK,CAAC;MAChBH,SAAS,EAAE;IACb,CAAC,CAAC;EACJ,CAAC,MAAM;IACLA,SAAS,EAAE;EACb;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA5E,SAAS,CAACyD,SAAS,CAAC8B,YAAY,GAAG,UAASD,KAAK,EAAE;EACjD,IAAIE,IAAI,GAAGF,KAAK,IAAIA,KAAK,CAACE,IAAI;EAC9B,IAAIC,GAAG,GAAG,IAAI,CAAC5B,OAAO,CAACxC,sBAAsB;EAC7C,IAAIiE,KAAK,IACPE,IAAI,KAAK,QAAQ,IACjBA,IAAI,KAAK,SAAS,KACjB,CAACC,GAAG,IAAKD,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAS,CAAC,EACjD,IAAI,CAAC5B,IAAI,CAAC,OAAO,EAAE0B,KAAK,CAAC;EAC3B,OAAOA,KAAK,IAAI,IAAI,CAACzE,MAAM;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,SAAS,CAACyD,SAAS,CAACyB,SAAS,GAAG,UAASQ,MAAM,EAAEzC,IAAI,EAAE0C,OAAO,EAAE;EAC9D,IAAI,EAAED,MAAM,IAAI,IAAI,CAAC5E,UAAU,CAAC,EAAE;IAChC,IAAI,CAACA,UAAU,CAAC4E,MAAM,CAAC,GAAGpF,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC/C;EACA,IAAIqF,SAAS,GAAG,IAAI,CAAC9E,UAAU,CAAC4E,MAAM,CAAC;EACvC,IAAIzC,IAAI,IAAI2C,SAAS,EAAE;IACrBA,SAAS,CAAC3C,IAAI,CAAC,CAAC4C,KAAK,EAAE;IACvB,OAAO,KAAK;EACd;EACA,SAASC,KAAK,GAAG;IACf,IAAID,KAAK,GAAGD,SAAS,CAAC3C,IAAI,CAAC,GAAG2C,SAAS,CAAC3C,IAAI,CAAC,CAAC4C,KAAK,GAAG,CAAC;IACvD,OAAOD,SAAS,CAAC3C,IAAI,CAAC;IACtB8C,YAAY,CAACC,aAAa,CAAC;IAC3B,OAAOH,KAAK;EACd;EACA,IAAIG,aAAa,GAAGvB,UAAU,CAACqB,KAAK,EAAEH,OAAO,CAAC;EAC9CC,SAAS,CAAC3C,IAAI,CAAC,GAAG;IAAC+C,aAAa,EAAEA,aAAa;IAAEF,KAAK,EAAEA,KAAK;IAAED,KAAK,EAAE;EAAC,CAAC;EACxE,OAAOD,SAAS,CAAC3C,IAAI,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjD,SAAS,CAACyD,SAAS,CAACwB,iBAAiB,GAAG,UAAShC,IAAI,EAAEgD,SAAS,EAAEjC,KAAK,EAAEa,OAAO,EAAE;EAChF,IAAIqB,cAAc;EAElB,IAAId,QAAQ,GAAGnC,IAAI;EACnB,IAAI,IAAI,CAACY,OAAO,CAACO,GAAG,IAAI,CAACvF,UAAU,CAACoE,IAAI,CAAC,EAAE;IACzCmC,QAAQ,GAAG5G,OAAO,CAAC6G,IAAI,CAAC,IAAI,CAACxB,OAAO,CAACO,GAAG,EAAEnB,IAAI,CAAC;EACjD;EAEA,IAAIkD,GAAG,GAAG,IAAI3B,IAAI,EAAE;EAEpB,IAAI9B,gBAAgB,GAAI,UAAU0D,QAAQ,EAAE;IAC1C7H,EAAE,CAAC2E,IAAI,CAACkC,QAAQ,EAAE,UAASN,GAAG,EAAEuB,OAAO,EAAE;MACvC,IAAIvB,GAAG,IAAI,EAAE7B,IAAI,IAAI,IAAI,CAACH,cAAc,CAAC,EAAE;QACzC,IAAIgC,GAAG,IAAIA,GAAG,CAACU,IAAI,KAAK,QAAQ,EAAEX,OAAO,CAACC,GAAG,CAAC;QAC9C;MACF;MAEA,IAAIqB,GAAG,GAAG,IAAI3B,IAAI,EAAE;MAEpB,IAAI4B,QAAQ,IAAIC,OAAO,CAACC,IAAI,IAAIF,QAAQ,CAACE,IAAI,EAAE;QAC7C,IAAI,CAACxD,cAAc,CAACG,IAAI,CAAC,CAACsB,UAAU,GAAG4B,GAAG;MAC5C;MAEA,IAAIA,GAAG,GAAG,IAAI,CAACrD,cAAc,CAACG,IAAI,CAAC,CAACsB,UAAU,IAAI0B,SAAS,EAAE;QAC3D,OAAO,IAAI,CAACnD,cAAc,CAACG,IAAI,CAAC;QAChC4B,OAAO,CAAC,IAAI,EAAEwB,OAAO,CAAC;MACxB,CAAC,MAAM;QACLH,cAAc,GAAGzB,UAAU,CACzB/B,gBAAgB,CAACU,IAAI,CAAC,IAAI,EAAEiD,OAAO,CAAC,EACpC,IAAI,CAACxC,OAAO,CAACnB,gBAAgB,CAACG,YAAY,CAC3C;MACH;IACF,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;EACf,CAAC,CAACA,IAAI,CAAC,IAAI,CAAE;EAEb,IAAI,EAAEH,IAAI,IAAI,IAAI,CAACH,cAAc,CAAC,EAAE;IAClC,IAAI,CAACA,cAAc,CAACG,IAAI,CAAC,GAAG;MAC1BsB,UAAU,EAAE4B,GAAG;MACfI,UAAU,EAAE,YAAW;QACrB,OAAO,IAAI,CAACzD,cAAc,CAACG,IAAI,CAAC;QAChC8C,YAAY,CAACG,cAAc,CAAC;QAC5B,OAAOlC,KAAK;MACd,CAAC,CAACZ,IAAI,CAAC,IAAI;IACb,CAAC;IACD8C,cAAc,GAAGzB,UAAU,CACzB/B,gBAAgB,CAACU,IAAI,CAAC,IAAI,CAAC,EAC3B,IAAI,CAACS,OAAO,CAACnB,gBAAgB,CAACG,YAAY,CAC3C;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,IAAI2D,KAAK,GAAG,mCAAmC;AAC/CxG,SAAS,CAACyD,SAAS,CAACN,UAAU,GAAG,UAASF,IAAI,EAAE8B,KAAK,EAAE;EACrD,IAAI,IAAI,CAAClB,OAAO,CAACtB,MAAM,IAAIiE,KAAK,CAACC,IAAI,CAACxD,IAAI,CAAC,EAAE,OAAO,IAAI;EAExD,IAAI,CAAC,IAAI,CAACyD,YAAY,EAAE;IACtB,IAAItC,GAAG,GAAG,IAAI,CAACP,OAAO,CAACO,GAAG;IAC1B,IAAIrB,OAAO,GAAG,IAAI,CAACc,OAAO,CAACd,OAAO;IAClC,IAAIqB,GAAG,IAAIrB,OAAO,EAAE;MAClBA,OAAO,GAAGA,OAAO,CAAC4D,GAAG,CAAC,UAAU1D,IAAI,EAAE;QACpC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE,OAAOA,IAAI;QACzC,OAAOhE,KAAK,CAAC2H,SAAS,CAAC/H,UAAU,CAACoE,IAAI,CAAC,GAAGA,IAAI,GAAGzE,OAAO,CAAC6G,IAAI,CAACjB,GAAG,EAAEnB,IAAI,CAAC,CAAC;MAC3E,CAAC,CAAC;IACJ;IACA,IAAI4D,KAAK,GAAGzH,MAAM,CAAC2D,OAAO,CAAC,CACxB+D,MAAM,CAAC,UAAS7D,IAAI,EAAE;MACrB,OAAO,OAAOA,IAAI,KAAK,QAAQ,IAAI,CAACrE,MAAM,CAACqE,IAAI,CAAC;IAClD,CAAC,CAAC,CAAC0D,GAAG,CAAC,UAAS1D,IAAI,EAAE;MACpB,OAAOA,IAAI,GAAG,KAAK;IACrB,CAAC,CAAC;IACJ,IAAI,CAACyD,YAAY,GAAGhI,QAAQ,CAC1B,IAAI,CAACqI,YAAY,CAACpC,MAAM,CAAC5B,OAAO,CAAC,CAAC4B,MAAM,CAACkC,KAAK,CAAC,CAChD;EACH;EAEA,OAAO,IAAI,CAACH,YAAY,CAAC,CAACzD,IAAI,EAAE8B,KAAK,CAAC,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIiC,UAAU,GAAG,WAAW;AAC5BhH,SAAS,CAACyD,SAAS,CAACwD,gBAAgB,GAAG,UAAShE,IAAI,EAAEiE,KAAK,EAAE;EAC3DjE,IAAI,GAAGA,IAAI,CAACkE,OAAO,CAACH,UAAU,EAAE,EAAE,CAAC;EACnC,IAAII,SAAS,GAAGF,KAAK,IAAI,IAAI,CAACrD,OAAO,CAACrC,eAAe,IAAI,CAAC5C,MAAM,CAACqE,IAAI,CAAC,GAAGA,IAAI,GAAGtE,UAAU,CAACsE,IAAI,CAAC;EAChG,IAAIoE,aAAa,GAAG7I,OAAO,CAAC8I,OAAO,CAACF,SAAS,CAAC;EAC9C,IAAIG,OAAO,GAAGH,SAAS,KAAKnE,IAAI;EAChC,IAAIuE,UAAU,GAAGD,OAAO,GAAG7I,QAAQ,CAACuE,IAAI,CAAC,GAAG,KAAK;EACjD,IAAIwE,MAAM,GAAG,IAAI,CAAC5D,OAAO,CAACpB,cAAc;EACxC,IAAIiF,WAAW,GAAGH,OAAO,IAAIE,MAAM,GAAG,IAAI,GAAG,KAAK;EAElD,IAAIE,gBAAgB,GAAG,UAASC,KAAK,EAAE;IACrC;IACA;IACA,IAAIF,WAAW,IAAI,IAAI,EAAE;MACvBA,WAAW,GAAGE,KAAK,CAACC,aAAa,KAAKR,aAAa,GAAG,KAAK,GAAG;QAC5DS,QAAQ,EAAEF,KAAK,CAACC,aAAa;QAC7BE,QAAQ,EAAEV;MACZ,CAAC;IACH;IAEA,IAAIK,WAAW,EAAE;MACf,OAAOE,KAAK,CAACxC,QAAQ,CAAC+B,OAAO,CAACO,WAAW,CAACI,QAAQ,EAAEJ,WAAW,CAACK,QAAQ,CAAC;IAC3E;IAEA,OAAOH,KAAK,CAACxC,QAAQ;EACvB,CAAC;EAED,IAAI4C,SAAS,GAAG,UAASJ,KAAK,EAAE;IAC9B,OAAOpJ,OAAO,CAAC6G,IAAI,CAAC+B,SAAS,EAC3B5I,OAAO,CAAC6F,QAAQ,CAAC+C,SAAS,EAAEO,gBAAgB,CAACC,KAAK,CAAC,CAAC,CACrD;EACH,CAAC;EAED,IAAIK,UAAU,GAAG,UAASL,KAAK,EAAE;IAC/B,IAAIA,KAAK,CAAC1E,IAAI,IAAI0E,KAAK,CAAC1E,IAAI,CAACgF,cAAc,EAAE,EAAE,OAAOC,SAAS,CAACP,KAAK,CAAC;IACtE,IAAIQ,YAAY,GAAGJ,SAAS,CAACJ,KAAK,CAAC;IACnC,OAAO,CAAC,CAACL,OAAO,IAAIC,UAAU,CAACY,YAAY,CAAC,KAC1C,IAAI,CAACpF,YAAY,CAACoF,YAAY,EAAER,KAAK,CAAC1E,IAAI,CAAC,KAC1C,IAAI,CAACW,OAAO,CAACxC,sBAAsB,IAClC,IAAI,CAACgH,mBAAmB,CAACT,KAAK,CAAC1E,IAAI,CAAC,CAAC;EAC3C,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;EAEZ,IAAIkF,WAAW,GAAG,UAASrF,IAAI,EAAE;IAC/B,IAAI,CAACsE,OAAO,EAAE,OAAO,KAAK;IAC1B,IAAIgB,KAAK,GAAG,EAAE;IACd,IAAIC,YAAY,GAAGzJ,MAAM,CAAC0J,MAAM,CAACxF,IAAI,CAAC;IACtCuF,YAAY,CAAC7I,OAAO,CAAC,UAASsD,IAAI,EAAE;MAClCsF,KAAK,CAAC1I,IAAI,CAACrB,OAAO,CAAC6F,QAAQ,CAAC+C,SAAS,EAAEnE,IAAI,CAAC,CAACyF,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC/D,CAAC,CAAC;IACF,OAAOH,KAAK;EACd,CAAC;EAED,IAAII,QAAQ,GAAGL,WAAW,CAACrF,IAAI,CAAC;EAChC,IAAI0F,QAAQ,EAAE;IACZA,QAAQ,CAAChJ,OAAO,CAAC,UAAS4I,KAAK,EAAE;MAC/B,IAAIA,KAAK,CAACvD,MAAM,GAAG,CAAC,EAAEuD,KAAK,CAACK,GAAG,EAAE;IACnC,CAAC,CAAC;EACJ;EACA,IAAIC,aAAa;EAEjB,IAAIV,SAAS,GAAG,UAASP,KAAK,EAAE;IAC9B,IAAIL,OAAO,EAAE;MACX,IAAIuB,UAAU,GAAGR,WAAW,CAACX,gBAAgB,CAACC,KAAK,CAAC,CAAC;MACrD,IAAImB,QAAQ,GAAG,KAAK;MACpBF,aAAa,GAAG,CAACF,QAAQ,CAACK,IAAI,CAAC,UAAST,KAAK,EAAE;QAC7C,OAAOA,KAAK,CAACU,KAAK,CAAC,UAASC,IAAI,EAAEC,CAAC,EAAE;UACnC,IAAID,IAAI,KAAK,IAAI,EAAEH,QAAQ,GAAG,IAAI;UAClC,OAAOA,QAAQ,IAAI,CAACD,UAAU,CAAC,CAAC,CAAC,CAACK,CAAC,CAAC,IAAIzK,QAAQ,CAACwK,IAAI,EAAEJ,UAAU,CAAC,CAAC,CAAC,CAACK,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;IACA,OAAO,CAACN,aAAa,IAAI,IAAI,CAAC7F,YAAY,CAACgF,SAAS,CAACJ,KAAK,CAAC,EAAEA,KAAK,CAAC1E,IAAI,CAAC;EAC1E,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;EAEZ,OAAO;IACLX,cAAc,EAAEgF,MAAM;IACtB2B,UAAU,EAAE3B,MAAM,GAAG,MAAM,GAAG,OAAO;IACrCxE,IAAI,EAAEA,IAAI;IACVmE,SAAS,EAAEA,SAAS;IACpBY,SAAS,EAAEA,SAAS;IACpBT,OAAO,EAAEA,OAAO;IAChBC,UAAU,EAAEA,UAAU;IACtBS,UAAU,EAAEA,UAAU;IACtBE,SAAS,EAAEA;EACb,CAAC;AACH,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAnI,SAAS,CAACyD,SAAS,CAAC4F,cAAc,GAAG,UAASC,SAAS,EAAE;EACvD,IAAIC,GAAG,GAAG/K,OAAO,CAAC8I,OAAO,CAACgC,SAAS,CAAC;EACpC,IAAIE,aAAa,GAAG,IAAI,CAACC,OAAO,CAACrG,IAAI,CAAC,IAAI,CAAC;EAC3C,IAAI,EAAEmG,GAAG,IAAI,IAAI,CAAClJ,QAAQ,CAAC,EAAE,IAAI,CAACA,QAAQ,CAACkJ,GAAG,CAAC,GAAG;IAChDG,MAAM,EAAEpJ,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC3BoJ,GAAG,EAAE,UAAS/J,IAAI,EAAE;MAClB,IAAIA,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,IAAI,EAAE,IAAI,CAAC8J,MAAM,CAAC9J,IAAI,CAAC,GAAG,IAAI;IAC7D,CAAC;IACDgK,MAAM,EAAE,UAAShK,IAAI,EAAE;MACrB,OAAO,IAAI,CAAC8J,MAAM,CAAC9J,IAAI,CAAC;MACxB,IAAI,CAAC,IAAI,CAACiK,QAAQ,EAAE,CAAC7E,MAAM,EAAE;QAC3BzG,EAAE,CAACuL,OAAO,CAACP,GAAG,EAAE,UAASzE,GAAG,EAAE;UAC5B,IAAIA,GAAG,EAAE0E,aAAa,CAAChL,OAAO,CAACuL,OAAO,CAACR,GAAG,CAAC,EAAE/K,OAAO,CAACwL,QAAQ,CAACT,GAAG,CAAC,CAAC;QACrE,CAAC,CAAC;MACJ;IACF,CAAC;IACDU,GAAG,EAAE,UAASrK,IAAI,EAAE;MAAC,OAAOA,IAAI,IAAI,IAAI,CAAC8J,MAAM;IAAC,CAAC;IACjDG,QAAQ,EAAE,YAAW;MAAC,OAAOvJ,MAAM,CAACM,IAAI,CAAC,IAAI,CAAC8I,MAAM,CAAC;IAAC;EACxD,CAAC;EACD,OAAO,IAAI,CAACrJ,QAAQ,CAACkJ,GAAG,CAAC;AAC3B,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAvJ,SAAS,CAACyD,SAAS,CAAC4E,mBAAmB,GAAG,UAAStD,KAAK,EAAE;EACxD,OAAOmF,OAAO,CAAC,CAAC,GAAG5H,QAAQ,CAAC,CAAC,CAACyC,KAAK,IAAIA,KAAK,CAACoF,IAAI,IAAI,KAAK,EAAEC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAClF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACApK,SAAS,CAACyD,SAAS,CAACgG,OAAO,GAAG,UAASH,SAAS,EAAE1J,IAAI,EAAE;EACtD;EACA;EACA;EACA,IAAIqD,IAAI,GAAGzE,OAAO,CAAC6G,IAAI,CAACiE,SAAS,EAAE1J,IAAI,CAAC;EACxC,IAAIwF,QAAQ,GAAG5G,OAAO,CAAC8I,OAAO,CAACrE,IAAI,CAAC;EACpC,IAAIoH,WAAW,GAAG,IAAI,CAAChK,QAAQ,CAAC4C,IAAI,CAAC,IAAI,IAAI,CAAC5C,QAAQ,CAAC+E,QAAQ,CAAC;;EAEhE;EACA;EACA,IAAI,CAAC,IAAI,CAACF,SAAS,CAAC,QAAQ,EAAEjC,IAAI,EAAE,GAAG,CAAC,EAAE;;EAE1C;EACA,IAAIqH,WAAW,GAAGhK,MAAM,CAACM,IAAI,CAAC,IAAI,CAACP,QAAQ,CAAC;EAC5C,IAAI,CAACgK,WAAW,IAAI,CAAC,IAAI,CAACxG,OAAO,CAACnC,WAAW,IAAI4I,WAAW,CAACtF,MAAM,KAAK,CAAC,EAAE;IACzE,IAAI,CAAC2E,GAAG,CAACL,SAAS,EAAE1J,IAAI,EAAE,IAAI,CAAC;EACjC;;EAEA;EACA;EACA,IAAI2K,uBAAuB,GAAG,IAAI,CAAClB,cAAc,CAACpG,IAAI,CAAC,CAAC4G,QAAQ,EAAE;;EAElE;EACAU,uBAAuB,CAAC5K,OAAO,CAAC,UAAS6K,UAAU,EAAE;IACnD,IAAI,CAACf,OAAO,CAACxG,IAAI,EAAEuH,UAAU,CAAC;EAChC,CAAC,EAAE,IAAI,CAAC;;EAER;EACA,IAAIC,MAAM,GAAG,IAAI,CAACpB,cAAc,CAACC,SAAS,CAAC;EAC3C,IAAIoB,UAAU,GAAGD,MAAM,CAACR,GAAG,CAACrK,IAAI,CAAC;EACjC6K,MAAM,CAACb,MAAM,CAAChK,IAAI,CAAC;;EAEnB;EACA,IAAI+K,OAAO,GAAG1H,IAAI;EAClB,IAAI,IAAI,CAACY,OAAO,CAACO,GAAG,EAAEuG,OAAO,GAAGnM,OAAO,CAAC6F,QAAQ,CAAC,IAAI,CAACR,OAAO,CAACO,GAAG,EAAEnB,IAAI,CAAC;EACxE,IAAI,IAAI,CAACY,OAAO,CAACnB,gBAAgB,IAAI,IAAI,CAACI,cAAc,CAAC6H,OAAO,CAAC,EAAE;IACjE,IAAI3G,KAAK,GAAG,IAAI,CAAClB,cAAc,CAAC6H,OAAO,CAAC,CAACpE,UAAU,EAAE;IACrD,IAAIvC,KAAK,KAAK,KAAK,EAAE;EACvB;;EAEA;EACA;EACA,OAAO,IAAI,CAAC3D,QAAQ,CAAC4C,IAAI,CAAC;EAC1B,OAAO,IAAI,CAAC5C,QAAQ,CAAC+E,QAAQ,CAAC;EAC9B,IAAIwF,SAAS,GAAGP,WAAW,GAAG,WAAW,GAAG,QAAQ;EACpD,IAAIK,UAAU,IAAI,CAAC,IAAI,CAACvH,UAAU,CAACF,IAAI,CAAC,EAAE,IAAI,CAACc,KAAK,CAAC6G,SAAS,EAAE3H,IAAI,CAAC;;EAErE;EACA,IAAI,CAAC,IAAI,CAACY,OAAO,CAACnC,WAAW,EAAE;IAC7B,IAAI,CAACmJ,UAAU,CAAC5H,IAAI,CAAC;EACvB;AACF,CAAC;AAEDjD,SAAS,CAACyD,SAAS,CAACoH,UAAU,GAAG,UAAS5H,IAAI,EAAE;EAC9C,IAAI,CAAC,IAAI,CAACzC,QAAQ,CAACyC,IAAI,CAAC,EAAE;EAC1B,IAAI,CAACzC,QAAQ,CAACyC,IAAI,CAAC,CAACtD,OAAO,CAAC,UAASmL,MAAM,EAAE;IAC3CA,MAAM,EAAE;EACV,CAAC,CAAC;EACF,OAAO,IAAI,CAACtK,QAAQ,CAACyC,IAAI,CAAC;EAC1B,IAAI,CAACoG,cAAc,CAAC7K,OAAO,CAACuL,OAAO,CAAC9G,IAAI,CAAC,CAAC,CAAC2G,MAAM,CAACpL,OAAO,CAACwL,QAAQ,CAAC/G,IAAI,CAAC,CAAC;AAC3E,CAAC;;AAED;;AAEA;AACA;AACA;;AAEA;AACAjD,SAAS,CAACyD,SAAS,CAACkG,GAAG,GAAG,UAAS9C,KAAK,EAAEkE,QAAQ,EAAEC,SAAS,EAAE;EAC7D,IAAIxJ,eAAe,GAAG,IAAI,CAACqC,OAAO,CAACrC,eAAe;EAClD,IAAI4C,GAAG,GAAG,IAAI,CAACP,OAAO,CAACO,GAAG;EAC1B,IAAI,CAACvD,MAAM,GAAG,KAAK;EACnBgG,KAAK,GAAGrH,OAAO,CAACJ,MAAM,CAACyH,KAAK,CAAC,CAAC;EAE9B,IAAI,CAACA,KAAK,CAACoC,KAAK,CAACnJ,QAAQ,CAAC,EAAE;IAC1B,MAAM,IAAImL,SAAS,CAAC,qCAAqC,GAAGpE,KAAK,CAAC;EACpE;EAEA,IAAIzC,GAAG,EAAEyC,KAAK,GAAGA,KAAK,CAACF,GAAG,CAAC,UAAS1D,IAAI,EAAE;IACxC,IAAIiI,OAAO;IACX,IAAIrM,UAAU,CAACoE,IAAI,CAAC,EAAE;MACpBiI,OAAO,GAAGjI,IAAI;IAChB,CAAC,MAAM,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC1BiI,OAAO,GAAG,GAAG,GAAG1M,OAAO,CAAC6G,IAAI,CAACjB,GAAG,EAAEnB,IAAI,CAACkI,SAAS,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC,MAAM;MACLD,OAAO,GAAG1M,OAAO,CAAC6G,IAAI,CAACjB,GAAG,EAAEnB,IAAI,CAAC;IACnC;;IAEA;IACA,IAAIzB,eAAe,IAAI,CAAC5C,MAAM,CAACqE,IAAI,CAAC,EAAE;MACpC,OAAOiI,OAAO;IAChB,CAAC,MAAM;MACL,OAAOlM,aAAa,CAACkM,OAAO,CAAC;IAC/B;EACF,CAAC,CAAC;;EAEF;EACArE,KAAK,GAAGA,KAAK,CAACC,MAAM,CAAC,UAAS7D,IAAI,EAAE;IAClC,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACnB,IAAI,CAACxC,aAAa,CAACwC,IAAI,CAACkI,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;IAC9C,CAAC,MAAM;MACL;MACA,OAAO,IAAI,CAAC1K,aAAa,CAACwC,IAAI,CAAC;MAC/B,OAAO,IAAI,CAACxC,aAAa,CAACwC,IAAI,GAAG,KAAK,CAAC;;MAEvC;MACA;MACA,IAAI,CAACyD,YAAY,GAAG,IAAI;MAExB,OAAO,IAAI;IACb;EACF,CAAC,EAAE,IAAI,CAAC;EAER,IAAI,IAAI,CAAC7C,OAAO,CAACnC,WAAW,IAAIvC,eAAe,CAACyC,MAAM,EAAE,EAAE;IACxD,IAAI,CAAC,IAAI,CAAC2B,WAAW,EAAE,IAAI,CAACA,WAAW,GAAGsD,KAAK,CAAC7B,MAAM;IACtD,IAAI,IAAI,CAACnB,OAAO,CAAC1C,UAAU,EAAE,IAAI,CAACoC,WAAW,IAAI,CAAC;IAClDsD,KAAK,CAAClH,OAAO,CAAC,IAAI,CAACyL,cAAc,EAAE,IAAI,CAAC;EAC1C,CAAC,MAAM;IACL,IAAI,CAAC,IAAI,CAAC7H,WAAW,EAAE,IAAI,CAACA,WAAW,GAAG,CAAC;IAC3C,IAAI,CAACA,WAAW,IAAIsD,KAAK,CAAC7B,MAAM;IAChCvG,SAAS,CAACoI,KAAK,EAAE,UAAS5D,IAAI,EAAEoI,IAAI,EAAE;MACpC,IAAI,CAACC,YAAY,CAACrI,IAAI,EAAE,CAAC+H,SAAS,EAAE,CAAC,EAAE,CAAC,EAAED,QAAQ,EAAE,UAASjG,GAAG,EAAEyG,GAAG,EAAE;QACrE,IAAIA,GAAG,EAAE,IAAI,CAACjI,UAAU,EAAE;QAC1B+H,IAAI,CAACvG,GAAG,EAAEyG,GAAG,CAAC;MAChB,CAAC,CAACnI,IAAI,CAAC,IAAI,CAAC,CAAC;IACf,CAAC,CAACA,IAAI,CAAC,IAAI,CAAC,EAAE,UAASkC,KAAK,EAAEkG,OAAO,EAAE;MACrCA,OAAO,CAAC7L,OAAO,CAAC,UAASC,IAAI,EAAE;QAC7B,IAAI,CAACA,IAAI,IAAI,IAAI,CAACiB,MAAM,EAAE;QAC1B,IAAI,CAAC8I,GAAG,CAACnL,OAAO,CAACuL,OAAO,CAACnK,IAAI,CAAC,EAAEpB,OAAO,CAACwL,QAAQ,CAACe,QAAQ,IAAInL,IAAI,CAAC,CAAC;MACrE,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAACwD,IAAI,CAAC,IAAI,CAAC,CAAC;EACf;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;;AAEA;;AAEA;AACApD,SAAS,CAACyD,SAAS,CAACgI,OAAO,GAAG,UAAS5E,KAAK,EAAE;EAC5C,IAAI,IAAI,CAAChG,MAAM,EAAE,OAAO,IAAI;EAC5BgG,KAAK,GAAGrH,OAAO,CAACJ,MAAM,CAACyH,KAAK,CAAC,CAAC;EAE9BA,KAAK,CAAClH,OAAO,CAAC,UAASsD,IAAI,EAAE;IAC3B;IACA,IAAI,CAACpE,UAAU,CAACoE,IAAI,CAAC,IAAI,CAAC,IAAI,CAACzC,QAAQ,CAACyC,IAAI,CAAC,EAAE;MAC7C,IAAI,IAAI,CAACY,OAAO,CAACO,GAAG,EAAEnB,IAAI,GAAGzE,OAAO,CAAC6G,IAAI,CAAC,IAAI,CAACxB,OAAO,CAACO,GAAG,EAAEnB,IAAI,CAAC;MACjEA,IAAI,GAAGzE,OAAO,CAAC8I,OAAO,CAACrE,IAAI,CAAC;IAC9B;IAEA,IAAI,CAAC4H,UAAU,CAAC5H,IAAI,CAAC;IAErB,IAAI,CAACxC,aAAa,CAACwC,IAAI,CAAC,GAAG,IAAI;IAC/B,IAAIA,IAAI,IAAI,IAAI,CAAC5C,QAAQ,EAAE;MACzB,IAAI,CAACI,aAAa,CAACwC,IAAI,GAAG,KAAK,CAAC,GAAG,IAAI;IACzC;;IAEA;IACA;IACA,IAAI,CAACyD,YAAY,GAAG,IAAI;EAC1B,CAAC,EAAE,IAAI,CAAC;EAER,OAAO,IAAI;AACb,CAAC;;AAED;;AAEA;AACA1G,SAAS,CAACyD,SAAS,CAACiI,KAAK,GAAG,YAAW;EACrC,IAAI,IAAI,CAAC7K,MAAM,EAAE,OAAO,IAAI;EAE5B,IAAI,CAACA,MAAM,GAAG,IAAI;EAClBP,MAAM,CAACM,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAAC,CAACb,OAAO,CAAC,UAASyH,SAAS,EAAE;IACrD,IAAI,CAAC5G,QAAQ,CAAC4G,SAAS,CAAC,CAACzH,OAAO,CAAC,UAASmL,MAAM,EAAE;MAChDA,MAAM,EAAE;IACV,CAAC,CAAC;IACF,OAAO,IAAI,CAACtK,QAAQ,CAAC4G,SAAS,CAAC;EACjC,CAAC,EAAE,IAAI,CAAC;EACR,IAAI,CAAC/G,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAEnC,IAAI,CAACoL,kBAAkB,EAAE;EACzB,OAAO,IAAI;AACb,CAAC;;AAED;;AAEA;AACA3L,SAAS,CAACyD,SAAS,CAACmI,UAAU,GAAG,YAAW;EAC1C,IAAIC,SAAS,GAAG,CAAC,CAAC;EAClBvL,MAAM,CAACM,IAAI,CAAC,IAAI,CAACP,QAAQ,CAAC,CAACV,OAAO,CAAC,UAAS4J,GAAG,EAAE;IAC/C,IAAItI,GAAG,GAAG,IAAI,CAAC4C,OAAO,CAACO,GAAG,GAAG5F,OAAO,CAAC6F,QAAQ,CAAC,IAAI,CAACR,OAAO,CAACO,GAAG,EAAEmF,GAAG,CAAC,GAAGA,GAAG;IAC1EsC,SAAS,CAAC5K,GAAG,IAAI,GAAG,CAAC,GAAGX,MAAM,CAACM,IAAI,CAAC,IAAI,CAACP,QAAQ,CAACkJ,GAAG,CAAC,CAACG,MAAM,CAAC,CAACoC,IAAI,EAAE;EACvE,CAAC,CAAC1I,IAAI,CAAC,IAAI,CAAC,CAAC;EACb,OAAOyI,SAAS;AAClB,CAAC;;AAED;AACA,SAASE,aAAa,CAACC,OAAO,EAAE;EAC9B1L,MAAM,CAACM,IAAI,CAACoL,OAAO,CAACvI,SAAS,CAAC,CAAC9D,OAAO,CAAC,UAASsM,MAAM,EAAE;IACtDjM,SAAS,CAACyD,SAAS,CAACwI,MAAM,CAAC,GAAGD,OAAO,CAACvI,SAAS,CAACwI,MAAM,CAAC;EACzD,CAAC,CAAC;AACJ;AACAF,aAAa,CAAC7M,aAAa,CAAC;AAC5B,IAAIC,eAAe,CAACyC,MAAM,EAAE,EAAEmK,aAAa,CAAC5M,eAAe,CAAC;;AAE5D;AACA+M,OAAO,CAAClM,SAAS,GAAGA,SAAS;;AAE7B;;AAEA;AACA;;AAEA;AACAkM,OAAO,CAACC,KAAK,GAAG,UAAStF,KAAK,EAAEhD,OAAO,EAAE;EACvC,OAAO,IAAI7D,SAAS,CAAC6D,OAAO,CAAC,CAAC8F,GAAG,CAAC9C,KAAK,CAAC;AAC1C,CAAC"},"metadata":{},"sourceType":"script"}