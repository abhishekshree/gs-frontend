{"ast":null,"code":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar define = require('define-property');\nvar utils = require('./utils');\n\n/**\n * Expose `mixin()`.\n * This code is based on `source-maps-support.js` in reworkcss/css\n * https://github.com/reworkcss/css/blob/master/lib/stringify/source-map-support.js\n * Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n */\n\nmodule.exports = mixin;\n\n/**\n * Mixin source map support into `compiler`.\n *\n * @param {Object} `compiler`\n * @api public\n */\n\nfunction mixin(compiler) {\n  define(compiler, '_comment', compiler.comment);\n  compiler.map = new utils.SourceMap.SourceMapGenerator();\n  compiler.position = {\n    line: 1,\n    column: 1\n  };\n  compiler.content = {};\n  compiler.files = {};\n  for (var key in exports) {\n    define(compiler, key, exports[key]);\n  }\n}\n\n/**\n * Update position.\n *\n * @param {String} str\n */\n\nexports.updatePosition = function (str) {\n  var lines = str.match(/\\n/g);\n  if (lines) this.position.line += lines.length;\n  var i = str.lastIndexOf('\\n');\n  this.position.column = ~i ? str.length - i : this.position.column + str.length;\n};\n\n/**\n * Emit `str` with `position`.\n *\n * @param {String} str\n * @param {Object} [pos]\n * @return {String}\n */\n\nexports.emit = function (str, node) {\n  var position = node.position || {};\n  var source = position.source;\n  if (source) {\n    if (position.filepath) {\n      source = utils.unixify(position.filepath);\n    }\n    this.map.addMapping({\n      source: source,\n      generated: {\n        line: this.position.line,\n        column: Math.max(this.position.column - 1, 0)\n      },\n      original: {\n        line: position.start.line,\n        column: position.start.column - 1\n      }\n    });\n    if (position.content) {\n      this.addContent(source, position);\n    }\n    if (position.filepath) {\n      this.addFile(source, position);\n    }\n    this.updatePosition(str);\n    this.output += str;\n  }\n  return str;\n};\n\n/**\n * Adds a file to the source map output if it has not already been added\n * @param {String} `file`\n * @param {Object} `pos`\n */\n\nexports.addFile = function (file, position) {\n  if (typeof position.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.files, file)) return;\n  this.files[file] = position.content;\n};\n\n/**\n * Adds a content source to the source map output if it has not already been added\n * @param {String} `source`\n * @param {Object} `position`\n */\n\nexports.addContent = function (source, position) {\n  if (typeof position.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.content, source)) return;\n  this.map.setSourceContent(source, position.content);\n};\n\n/**\n * Applies any original source maps to the output and embeds the source file\n * contents in the source map.\n */\n\nexports.applySourceMaps = function () {\n  Object.keys(this.files).forEach(function (file) {\n    var content = this.files[file];\n    this.map.setSourceContent(file, content);\n    if (this.options.inputSourcemaps === true) {\n      var originalMap = utils.sourceMapResolve.resolveSync(content, file, fs.readFileSync);\n      if (originalMap) {\n        var map = new utils.SourceMap.SourceMapConsumer(originalMap.map);\n        var relativeTo = originalMap.sourcesRelativeTo;\n        this.map.applySourceMap(map, file, utils.unixify(path.dirname(relativeTo)));\n      }\n    }\n  }, this);\n};\n\n/**\n * Process comments, drops sourceMap comments.\n * @param {Object} node\n */\n\nexports.comment = function (node) {\n  if (/^# sourceMappingURL=/.test(node.comment)) {\n    return this.emit('', node.position);\n  }\n  return this._comment(node);\n};","map":{"version":3,"names":["fs","require","path","define","utils","module","exports","mixin","compiler","comment","map","SourceMap","SourceMapGenerator","position","line","column","content","files","key","updatePosition","str","lines","match","length","i","lastIndexOf","emit","node","source","filepath","unixify","addMapping","generated","Math","max","original","start","addContent","addFile","output","file","Object","prototype","hasOwnProperty","call","setSourceContent","applySourceMaps","keys","forEach","options","inputSourcemaps","originalMap","sourceMapResolve","resolveSync","readFileSync","SourceMapConsumer","relativeTo","sourcesRelativeTo","applySourceMap","dirname","test","_comment"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/node_modules/snapdragon/lib/source-maps.js"],"sourcesContent":["'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar define = require('define-property');\nvar utils = require('./utils');\n\n/**\n * Expose `mixin()`.\n * This code is based on `source-maps-support.js` in reworkcss/css\n * https://github.com/reworkcss/css/blob/master/lib/stringify/source-map-support.js\n * Copyright (c) 2012 TJ Holowaychuk <tj@vision-media.ca>\n */\n\nmodule.exports = mixin;\n\n/**\n * Mixin source map support into `compiler`.\n *\n * @param {Object} `compiler`\n * @api public\n */\n\nfunction mixin(compiler) {\n  define(compiler, '_comment', compiler.comment);\n  compiler.map = new utils.SourceMap.SourceMapGenerator();\n  compiler.position = { line: 1, column: 1 };\n  compiler.content = {};\n  compiler.files = {};\n\n  for (var key in exports) {\n    define(compiler, key, exports[key]);\n  }\n}\n\n/**\n * Update position.\n *\n * @param {String} str\n */\n\nexports.updatePosition = function(str) {\n  var lines = str.match(/\\n/g);\n  if (lines) this.position.line += lines.length;\n  var i = str.lastIndexOf('\\n');\n  this.position.column = ~i ? str.length - i : this.position.column + str.length;\n};\n\n/**\n * Emit `str` with `position`.\n *\n * @param {String} str\n * @param {Object} [pos]\n * @return {String}\n */\n\nexports.emit = function(str, node) {\n  var position = node.position || {};\n  var source = position.source;\n  if (source) {\n    if (position.filepath) {\n      source = utils.unixify(position.filepath);\n    }\n\n    this.map.addMapping({\n      source: source,\n      generated: {\n        line: this.position.line,\n        column: Math.max(this.position.column - 1, 0)\n      },\n      original: {\n        line: position.start.line,\n        column: position.start.column - 1\n      }\n    });\n\n    if (position.content) {\n      this.addContent(source, position);\n    }\n    if (position.filepath) {\n      this.addFile(source, position);\n    }\n\n    this.updatePosition(str);\n    this.output += str;\n  }\n  return str;\n};\n\n/**\n * Adds a file to the source map output if it has not already been added\n * @param {String} `file`\n * @param {Object} `pos`\n */\n\nexports.addFile = function(file, position) {\n  if (typeof position.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.files, file)) return;\n  this.files[file] = position.content;\n};\n\n/**\n * Adds a content source to the source map output if it has not already been added\n * @param {String} `source`\n * @param {Object} `position`\n */\n\nexports.addContent = function(source, position) {\n  if (typeof position.content !== 'string') return;\n  if (Object.prototype.hasOwnProperty.call(this.content, source)) return;\n  this.map.setSourceContent(source, position.content);\n};\n\n/**\n * Applies any original source maps to the output and embeds the source file\n * contents in the source map.\n */\n\nexports.applySourceMaps = function() {\n  Object.keys(this.files).forEach(function(file) {\n    var content = this.files[file];\n    this.map.setSourceContent(file, content);\n\n    if (this.options.inputSourcemaps === true) {\n      var originalMap = utils.sourceMapResolve.resolveSync(content, file, fs.readFileSync);\n      if (originalMap) {\n        var map = new utils.SourceMap.SourceMapConsumer(originalMap.map);\n        var relativeTo = originalMap.sourcesRelativeTo;\n        this.map.applySourceMap(map, file, utils.unixify(path.dirname(relativeTo)));\n      }\n    }\n  }, this);\n};\n\n/**\n * Process comments, drops sourceMap comments.\n * @param {Object} node\n */\n\nexports.comment = function(node) {\n  if (/^# sourceMappingURL=/.test(node.comment)) {\n    return this.emit('', node.position);\n  }\n  return this._comment(node);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}