{"ast":null,"code":"var _jsxFileName = \"/home/krishnansh/Documents/WebDev/PS/notus-react-main/src/views/driver/Map.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport * as ttservices from \"@tomtom-international/web-sdk-services\";\nimport tt from \"@tomtom-international/web-sdk-maps\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { api_key } from \"constants.js\";\nimport \"../../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map(_ref) {\n  _s();\n  let {\n    currLocation,\n    deliveryLocation,\n    destinations,\n    zoom_level,\n    travel_mode,\n    completedDest\n  } = _ref;\n  const mapElement = useRef();\n  const [map, setMap] = useState(null);\n  const [waypoints, setWayPoints] = useState(destinations);\n  function create_delivery_marker(location) {\n    const marker_el = document.createElement(\"div\");\n    marker_el.className = 'marker-delivery';\n    marker_el.id = deliveryLocation.locationId;\n    // const popup = new tt.Popup({ offset: 20 }).setText(location.name);\n    const marker = new tt.Marker({\n      element: marker_el,\n      anchor: \"bottom\"\n    }).setLngLat([location.lng, location.lat]).addTo(map);\n    return marker;\n  }\n  function create_driver_marker(location) {\n    const marker_el = document.createElement(\"div\");\n    marker_el.className = 'marker-driver';\n    const marker = new tt.Marker({\n      element: marker_el,\n      anchor: \"bottom\"\n    }).setLngLat([location.lng, location.lat]).addTo(map);\n    return marker;\n  }\n  function createRoute() {\n    const routeOptions = {\n      key: api_key,\n      locations: [[currLocation.lng, currLocation.lat], [deliveryLocation.lng, deliveryLocation.lat]],\n      travelMode: travel_mode,\n      vehicleCommercial: true,\n      vehicleHeading: 0\n    };\n    ttservices.services.calculateRoute(routeOptions).then(response => {\n      var geojson = response.toGeoJson();\n      map.addLayer({\n        id: \"route\" + deliveryLocation.locationId,\n        type: \"line\",\n        source: {\n          type: \"geojson\",\n          data: geojson\n        },\n        paint: {\n          \"line-color\": \"#0f8ae2\",\n          \"line-width\": 8\n        }\n      });\n      var bounds = new tt.LngLatBounds();\n      geojson.features[0].geometry.coordinates.forEach(function (point) {\n        bounds.extend(tt.LngLat.convert(point)); // creates a bounding area\n      });\n\n      map.fitBounds(bounds, {\n        duration: 300,\n        padding: 50,\n        maxZoom: 14\n      }); // zooms the map to the searched route\n      console.log(\"creating driver route\");\n    });\n  }\n  const handleDeleteRoute = routeId => {\n    var _document$getElementB;\n    map === null || map === void 0 ? void 0 : map.removeLayer([\"route\" + routeId]);\n    (_document$getElementB = document.getElementById(routeId === null || routeId === void 0 ? void 0 : routeId.toString())) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.remove();\n    console.log(routeId);\n  };\n  useEffect(() => {\n    var _completedDest, _completedDest2;\n    if (completedDest.length > 0) console.log(\"completed Destinations ->\", (_completedDest = completedDest[completedDest.length - 1]) === null || _completedDest === void 0 ? void 0 : _completedDest.locationId);\n    handleDeleteRoute((_completedDest2 = completedDest[completedDest.length - 1]) === null || _completedDest2 === void 0 ? void 0 : _completedDest2.locationId);\n  }, [completedDest]);\n  useEffect(() => {\n    let map = tt.map({\n      key: api_key,\n      container: mapElement.current,\n      center: [77.5747463, 12.9140182],\n      zoom: zoom_level\n    });\n    map.addControl(new tt.FullscreenControl());\n    map.addControl(new tt.NavigationControl());\n    setMap(map);\n    return () => map.remove();\n  }, []);\n  useEffect(() => {\n    if (map) {\n      console.log(deliveryLocation);\n      createRoute();\n      create_driver_marker(currLocation, map);\n      create_delivery_marker(deliveryLocation, map);\n    } else {\n      console.log(\"error loading map\"); //Add better error handling function\n    }\n  }, [map, currLocation, deliveryLocation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map_wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapElement,\n      style: {\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 7\n  }, this);\n}\n_s(Map, \"14nUUuCuylpbWgMYkDLGAxej3Jg=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","ttservices","tt","useEffect","useState","useRef","api_key","Map","currLocation","deliveryLocation","destinations","zoom_level","travel_mode","completedDest","mapElement","map","setMap","waypoints","setWayPoints","create_delivery_marker","location","marker_el","document","createElement","className","id","locationId","marker","Marker","element","anchor","setLngLat","lng","lat","addTo","create_driver_marker","createRoute","routeOptions","key","locations","travelMode","vehicleCommercial","vehicleHeading","services","calculateRoute","then","response","geojson","toGeoJson","addLayer","type","source","data","paint","bounds","LngLatBounds","features","geometry","coordinates","forEach","point","extend","LngLat","convert","fitBounds","duration","padding","maxZoom","console","log","handleDeleteRoute","routeId","removeLayer","getElementById","toString","remove","length","container","current","center","zoom","addControl","FullscreenControl","NavigationControl","position","top","bottom","left","right","width","height"],"sources":["/home/krishnansh/Documents/WebDev/PS/notus-react-main/src/views/driver/Map.js"],"sourcesContent":["import React from 'react'\nimport \"@tomtom-international/web-sdk-maps/dist/maps.css\";\nimport * as ttservices from \"@tomtom-international/web-sdk-services\";\nimport tt from \"@tomtom-international/web-sdk-maps\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { api_key } from \"constants.js\"\nimport \"../../App.css\"\n\nfunction Map({ currLocation, deliveryLocation, destinations, zoom_level, travel_mode, completedDest }) {\n    const mapElement = useRef();\n    const [map, setMap] = useState(null); \n    const [waypoints,setWayPoints] = useState(destinations);\n\n    function create_delivery_marker(location) {\n        const marker_el = document.createElement(\"div\");\n        marker_el.className = 'marker-delivery';\n        marker_el.id=deliveryLocation.locationId\n        // const popup = new tt.Popup({ offset: 20 }).setText(location.name);\n        const marker = new tt.Marker({ element: marker_el, anchor: \"bottom\" })\n        .setLngLat([location.lng, location.lat])\n        .addTo(map);\n\n        return marker;\n    }\n\n    function create_driver_marker(location) {\n      const marker_el = document.createElement(\"div\");\n      marker_el.className = 'marker-driver';\n      const marker = new tt.Marker({ element: marker_el, anchor: \"bottom\" })\n        .setLngLat([location.lng, location.lat])\n        .addTo(map);\n  \n      return marker;\n    }\n\n    function createRoute () {\n        const routeOptions = {\n          key: api_key,\n          locations: [\n            [currLocation.lng, currLocation.lat],\n            [deliveryLocation.lng, deliveryLocation.lat],\n          ],\n          travelMode: travel_mode,\n          vehicleCommercial: true,\n          vehicleHeading: 0,\n        };\n        \n        ttservices.services.calculateRoute(routeOptions).then((response) => {\n          var geojson = response.toGeoJson();\n          map.addLayer({\n            id: \"route\" + deliveryLocation.locationId,\n            type: \"line\",\n            source: {\n              type: \"geojson\",\n              data: geojson,\n            },\n            paint: {\n              \"line-color\": \"#0f8ae2\",\n              \"line-width\": 8,\n            },\n          });\n     \n          var bounds = new tt.LngLatBounds();\n          geojson.features[0].geometry.coordinates.forEach(function (point) {\n            bounds.extend(tt.LngLat.convert(point)); // creates a bounding area\n          });\n          map.fitBounds(bounds, {\n            duration: 300,\n            padding: 50,\n            maxZoom: 14,\n          }); // zooms the map to the searched route\n          console.log(\"creating driver route\")\n        });\n    }\n\n    const handleDeleteRoute = (routeId) => {\n      map?.removeLayer([\"route\" + routeId]);\n      document.getElementById(routeId?.toString())?.remove();\n      console.log(routeId)\n    }\n    useEffect(() => {\n      if(completedDest.length>0)\n        console.log(\"completed Destinations ->\",completedDest[completedDest.length-1]?.locationId)\n        handleDeleteRoute(completedDest[completedDest.length-1]?.locationId)\n    },[completedDest])\n\n    useEffect(() => {\n        let map = tt.map({\n        key: api_key,\n        container: mapElement.current,\n        center: [77.5747463,12.9140182],\n        zoom: zoom_level,\n        });\n        map.addControl(new tt.FullscreenControl());\n        map.addControl(new tt.NavigationControl());\n        setMap(map);\n        return () => map.remove();\n    }, []);\n    \n    useEffect(() => {\n        if (map) {\n          console.log(deliveryLocation)\n          createRoute()\n          create_driver_marker(currLocation,map)\n          create_delivery_marker(deliveryLocation,map)\n        }\n        else{\n            console.log(\"error loading map\"); //Add better error handling function\n        }\n      }, [map,currLocation,deliveryLocation]);\n\n    return (\n      <div className=\"map_wrapper\">\n        <div \n          ref={mapElement} \n          style={{\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0,\n            width: '100%',\n            height: '100%'\n          }}\n        />\n      </div>\n    );\n  }\n  export default Map;"],"mappings":"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"},"metadata":{},"sourceType":"module"}